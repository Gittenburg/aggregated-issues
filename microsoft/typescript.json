{"name": "microsoft/typescript", "repo": "microsoft/typescript", "labels": [{"name": "@types", "description": "Relates to working with .d.ts files (declaration/definition files) from DefinitelyTyped", "issueCount": 3, "pullCount": 0}, {"name": "Add a Flag", "description": "Any problem can be solved by flags, except for the problem of having too many flags", "issueCount": 13, "pullCount": 0}, {"name": "API", "description": "Relates to the public API for TypeScript", "issueCount": 100, "pullCount": 0}, {"name": "Author: Team", "description": "", "issueCount": 0, "pullCount": 62}, {"name": "Awaiting More Feedback", "description": "This means we'd like to hear from more people who would be helped by this feature", "issueCount": 756, "pullCount": 0}, {"name": "Blocked", "description": "A fix for this issue is blocked on another fix being in place", "issueCount": 2, "pullCount": 0}, {"name": "Breaking Change", "description": "Would introduce errors in existing code", "issueCount": 22, "pullCount": 8}, {"name": "Bug", "description": "A bug in TypeScript", "issueCount": 1574, "pullCount": 0}, {"name": "checkJs", "description": "Relates to checking JavaScript using TypeScript", "issueCount": 23, "pullCount": 0}, {"name": "Committed", "description": "The team has roadmapped this issue", "issueCount": 51, "pullCount": 0}, {"name": "Community Tooling", "description": "This might be better handled by tooling from the community instead of built into TypeScript", "issueCount": 3, "pullCount": 0}, {"name": "Crash", "description": "For flagging bugs which are compiler or service crashes or unclean exits, rather than bad output", "issueCount": 21, "pullCount": 0}, {"name": "Declined", "description": "The issue was declined as something which matches the TypeScript vision", "issueCount": 8, "pullCount": 0}, {"name": "Design Limitation", "description": "Constraints of the existing architecture prevent this from being fixed", "issueCount": 214, "pullCount": 0}, {"name": "Design Notes", "description": "Notes from our design meetings", "issueCount": 13, "pullCount": 0}, {"name": "Discussion", "description": "Issues which may not have code impact", "issueCount": 36, "pullCount": 0}, {"name": "Docs", "description": "The issue relates to how you learn TypeScript", "issueCount": 91, "pullCount": 0}, {"name": "Docs Meeting Notes", "description": "Write-ups on the meeting every two weeks on docs topics", "issueCount": 4, "pullCount": 0}, {"name": "Domain: --incremental", "description": "The issue relates to incremental compilation", "issueCount": 3, "pullCount": 0}, {"name": "Domain: Auto-import", "description": "", "issueCount": 7, "pullCount": 0}, {"name": "Domain: Big Unions", "description": "The root cause is ultimately that big unions interact poorly with complex structures", "issueCount": 2, "pullCount": 0}, {"name": "Domain: Comment Emit", "description": "The issue relates to the emission of comments when compiling", "issueCount": 15, "pullCount": 0}, {"name": "Domain: Completion Lists", "description": "The issue relates to showing completion lists in an editor", "issueCount": 67, "pullCount": 0}, {"name": "Domain: Conditional Types", "description": "The issue relates to conditional types", "issueCount": 16, "pullCount": 0}, {"name": "Domain: Contextual Types", "description": "The issue relates to contextual types", "issueCount": 5, "pullCount": 0}, {"name": "Domain: Control Flow", "description": "The issue relates to control flow analysis", "issueCount": 18, "pullCount": 0}, {"name": "Domain: Declaration Emit", "description": "The issue relates to the emission of d.ts files", "issueCount": 24, "pullCount": 0}, {"name": "Domain: Decorators", "description": "The issue relates to the decorator syntax", "issueCount": 16, "pullCount": 0}, {"name": "Domain: Error Messages", "description": "The issue relates to error messaging", "issueCount": 99, "pullCount": 0}, {"name": "Domain: ES Modules", "description": "The issue relates to import/export style module behavior", "issueCount": 8, "pullCount": 0}, {"name": "Domain: Formatter", "description": "The issue relates to the built-in formatter", "issueCount": 53, "pullCount": 0}, {"name": "Domain: Index Types", "description": "Issues with `keyof`", "issueCount": 1, "pullCount": 0}, {"name": "Domain: Indexed Access Types", "description": "The issue relates to accessing subtypes via index access", "issueCount": 3, "pullCount": 0}, {"name": "Domain: JavaScript", "description": "The issue relates to JavaScript specifically", "issueCount": 119, "pullCount": 0}, {"name": "Domain: JS Emit", "description": "The issue relates to the emission of JavaScript", "issueCount": 8, "pullCount": 0}, {"name": "Domain: JSDoc", "description": "Relates to JSDoc parsing and type generation", "issueCount": 87, "pullCount": 0}, {"name": "Domain: JSX/TSX", "description": "Relates to the JSX parser and emitter", "issueCount": 24, "pullCount": 0}, {"name": "Domain: lib.d.ts", "description": "The issue relates to the different libraries shipped with TypeScript", "issueCount": 179, "pullCount": 0}, {"name": "Domain: Literal Types", "description": "Unit types including string literal types, numeric literal types, Boolean literals, null, undefined", "issueCount": 2, "pullCount": 0}, {"name": "Domain: Mapped Types", "description": "The issue relates to mapped types", "issueCount": 9, "pullCount": 0}, {"name": "Domain: Organize Imports", "description": "Issues with the organize imports feature", "issueCount": 6, "pullCount": 0}, {"name": "Domain: Outlining", "description": "Relates to multi-line regions that editors can collapse", "issueCount": 7, "pullCount": 0}, {"name": "Domain: Performance", "description": "Reports of unusually slow behavior", "issueCount": 31, "pullCount": 0}, {"name": "Domain: Quick Fixes", "description": "Editor-provided fixes, often called code actions.", "issueCount": 65, "pullCount": 0}, {"name": "Domain: Quick Info", "description": "e.g. hover text, tool-tips, and tooltips.", "issueCount": 42, "pullCount": 0}, {"name": "Domain: Refactorings", "description": "e.g. extract to constant or function, rename symbol", "issueCount": 68, "pullCount": 0}, {"name": "Domain: Related Error Spans", "description": "Specifying regions for error messages/diagnostics on multiple locations.", "issueCount": 8, "pullCount": 0}, {"name": "Domain: Signature Help", "description": "Information in editor tooltips when invoking a function call", "issueCount": 8, "pullCount": 0}, {"name": "Domain: Smart Indentation", "description": "Automatic indenting after a newline (not quite formatter/formatting)", "issueCount": 1, "pullCount": 0}, {"name": "Domain: Smart-Select", "description": "Range expansion APIs for editors", "issueCount": 1, "pullCount": 0}, {"name": "Domain: Symbol Navigation", "description": "Relates to go-to-definition, find-all-references, highlighting/occurrences.", "issueCount": 31, "pullCount": 0}, {"name": "Domain: This-Typing", "description": "The issue relates to providing types to this", "issueCount": 1, "pullCount": 0}, {"name": "Domain: Transforms", "description": "Relates to the public transform API", "issueCount": 10, "pullCount": 0}, {"name": "Domain: tsc -b", "description": "Issues related to build mode", "issueCount": 2, "pullCount": 0}, {"name": "Domain: TSServer", "description": "Issues related to the TSServer", "issueCount": 31, "pullCount": 0}, {"name": "Domain: Type Display", "description": "Bugs relating to showing types in Quick Info/Tooltips, Signature Help, or Completion Info", "issueCount": 8, "pullCount": 0}, {"name": "Domain: Type Inference", "description": "Related to type inference performed during signature resolution or `infer` type resolution", "issueCount": 8, "pullCount": 0}, {"name": "Domain: Variance Relationships", "description": "The issue relates to variance relationships between types", "issueCount": 2, "pullCount": 0}, {"name": "Duplicate", "description": "An existing issue was already created", "issueCount": 1, "pullCount": 0}, {"name": "Effort: Difficult", "description": "Good luck.", "issueCount": 12, "pullCount": 0}, {"name": "Effort: Moderate", "description": "Should be feasible", "issueCount": 87, "pullCount": 0}, {"name": "ES Next", "description": "New featurers for ECMAScript (a.k.a. ESNext)", "issueCount": 17, "pullCount": 0}, {"name": "ES2017", "description": "Relates to the ES2017 Spec", "issueCount": 1, "pullCount": 0}, {"name": "ES2018", "description": "Relates to the ES2018 Spec", "issueCount": 1, "pullCount": 0}, {"name": "ES2019", "description": "Relates to the ES2019 Spec", "issueCount": 1, "pullCount": 0}, {"name": "ES6", "description": "Relates to the ES6 Spec", "issueCount": 24, "pullCount": 0}, {"name": "Experience Enhancement", "description": "Noncontroversial enhancements", "issueCount": 206, "pullCount": 0}, {"name": "Experiment", "description": "A fork with an experimental idea which might not make it into master", "issueCount": 0, "pullCount": 43}, {"name": "Experimentation Needed", "description": "Someone needs to try this out to see what happens", "issueCount": 13, "pullCount": 0}, {"name": "External", "description": "Relates to another program, environment, or user action which we cannot control.", "issueCount": 2, "pullCount": 0}, {"name": "feature-request", "description": "A request for a new feature", "issueCount": 4, "pullCount": 0}, {"name": "Fix Available", "description": "A PR has been opened for this issue", "issueCount": 62, "pullCount": 0}, {"name": "Fixed", "description": "A PR has been merged for this issue", "issueCount": 8, "pullCount": 0}, {"name": "Fixed in TSJS repo", "description": "Fix merged in https://github.com/Microsoft/TSJS-lib-generator, but not ported yet", "issueCount": 1, "pullCount": 0}, {"name": "For Backlog Bug", "description": "PRs that fix a backlog bug", "issueCount": 0, "pullCount": 82}, {"name": "For Milestone Bug", "description": "PRs that fix a bug with a specific milestone", "issueCount": 0, "pullCount": 52}, {"name": "For Uncommitted Bug", "description": "PR for untriaged, rejected, closed or missing bug", "issueCount": 0, "pullCount": 74}, {"name": "good first issue", "description": "Well scoped, documented and has the green light", "issueCount": 45, "pullCount": 0}, {"name": "GraceHopperOSD", "description": "Help wanted from Grace Hopper OSD participants", "issueCount": 37, "pullCount": 0}, {"name": "Has Repro", "description": "This issue has compiler-backed repros: https://aka.ms/ts-repros", "issueCount": 9, "pullCount": 0}, {"name": "help wanted", "description": "You can do this", "issueCount": 560, "pullCount": 0}, {"name": "High Priority", "description": null, "issueCount": 1, "pullCount": 0}, {"name": "i18n", "description": "(Ping PDostalek) Internationalization/translation of messages in the compiler.", "issueCount": 1, "pullCount": 0}, {"name": "Impact: Failed LS Operation", "description": "", "issueCount": 2, "pullCount": 0}, {"name": "In Discussion", "description": "Not yet reached consensus", "issueCount": 510, "pullCount": 0}, {"name": "Infrastructure", "description": "Issue relates to TypeScript team infrastructure", "issueCount": 55, "pullCount": 0}, {"name": "Investigating", "description": "Is in active investigation", "issueCount": 2, "pullCount": 0}, {"name": "lib update", "description": "PR modifies files in the `lib` folder", "issueCount": 0, "pullCount": 8}, {"name": "Meta-Issue", "description": "An issue about the team, or the direction of TypeScript", "issueCount": 14, "pullCount": 0}, {"name": "Needs Investigation", "description": "This issue needs a team member to investigate its status.", "issueCount": 304, "pullCount": 0}, {"name": "Needs More Info", "description": "The issue still hasn't been fully clarified", "issueCount": 212, "pullCount": 0}, {"name": "Needs Proposal", "description": "This issue needs a plan that clarifies the finer details of how it could be implemented.", "issueCount": 227, "pullCount": 0}, {"name": "Out of Scope", "description": "This idea sits outside of the TypeScript language design constraints", "issueCount": 5, "pullCount": 0}, {"name": "Planning", "description": "Iteration plans and roadmapping", "issueCount": 5, "pullCount": 0}, {"name": "Question", "description": "An issue which isn't directly actionable in code", "issueCount": 2, "pullCount": 0}, {"name": "Rescheduled", "description": "This issue was previously scheduled to an earlier milestone", "issueCount": 159, "pullCount": 0}, {"name": "Revisit", "description": "An issue worth coming back to", "issueCount": 27, "pullCount": 0}, {"name": "Scenario: Monorepos & Cross-Project References", "description": "Relates to composite projects (a.k.a references between \"medium sized projects\")", "issueCount": 8, "pullCount": 0}, {"name": "Source: Telemetry", "description": "The issue relates to the telemetry in editors", "issueCount": 130, "pullCount": 0}, {"name": "Suggestion", "description": "An idea for TypeScript", "issueCount": 1949, "pullCount": 0}, {"name": "Too Complex", "description": "An issue which adding support for may be too complex for the value it adds", "issueCount": 21, "pullCount": 0}, {"name": "typescript@experimental", "description": "Pull requests tagged with this label are automatically rebased together with master and published", "issueCount": 0, "pullCount": 1}, {"name": "Unactionable", "description": "There isn't something we can do with this issue", "issueCount": 1, "pullCount": 0}, {"name": "Visual Studio", "description": "Integration with Visual Studio", "issueCount": 33, "pullCount": 0}, {"name": "VS Code Priority", "description": "Critical issues that VS Code needs fixed in the current TypeScript milestone", "issueCount": 6, "pullCount": 0}, {"name": "VS Code Tracked", "description": "There is a VS Code equivalent to this issue", "issueCount": 102, "pullCount": 0}, {"name": "Waiting for TC39", "description": "Unactionable until TC39 reaches some conclusion", "issueCount": 12, "pullCount": 0}, {"name": "Website", "description": "Deprecated - please forward issue to microsoft/TypeScript-Website", "issueCount": 2, "pullCount": 0}, {"name": "Working as Intended", "description": "The behavior described is the intended behavior; this is not a bug", "issueCount": 1, "pullCount": 0}], "issues": [{"num": 36390, "title": " .map() .reduce() .filter() methods fail with \"This expression is not callable.\" error on valid array with union type", "labels": ["Experience Enhancement", "Rescheduled", "Suggestion"]}, {"num": 39549, "title": " A extends B relation break after wrapping by extra interface", "labels": ["Bug"]}, {"num": 18481, "title": " Add definition for `Navigator.bluetooth` ", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 24680, "title": " Assign tuple to object: Number is not assignable to type literal ", "labels": ["In Discussion", "Suggestion"]}, {"num": 26623, "title": " Compiler is unable to resolve return type of function even though it is returning function with known return type", "labels": ["Design Limitation"]}, {"num": 28771, "title": " javascript.updateImportsOnFileMove broken on VS mac", "labels": ["Domain: TSServer", "Needs More Info"]}, {"num": 32280, "title": " JSDoc type reference doesn't skip leading asterisk", "labels": ["Bug"]}, {"num": 36704, "title": " Let type identifiers co-exist with import namespace identifiers", "labels": ["In Discussion", "Suggestion"]}, {"num": 38001, "title": " TypeScript does not infer the type correctly after two layer Mapped Types.", "labels": ["Needs Investigation"]}, {"num": 28895, "title": "\"2 definitions\" returned when defaultProps exists in JS component.", "labels": ["Bug", "Domain: Symbol Navigation"]}, {"num": 28542, "title": "\"2 definitions\" when using  module.exports to export a function wrapped in {}", "labels": ["Bug", "Domain: JavaScript"]}, {"num": 32731, "title": "\"after\" custom transformer seems to be called before the JS transformation.", "labels": ["Needs Investigation"]}, {"num": 27694, "title": "\"An argument for 'param' was not provided.\" should use types to guess most likely missing parameter", "labels": ["Domain: Error Messages", "In Discussion", "Suggestion"]}, {"num": 9273, "title": "\"Block-scoped variable used before its declaration\" not detected inside closures", "labels": ["In Discussion", "Suggestion"]}, {"num": 5149, "title": "\"Cannot find module\" message should be more explicit, saying where it's looking", "labels": ["Suggestion", "help wanted"]}, {"num": 40040, "title": "\"Convert to async function\" generates incorrect code for nested return statements", "labels": ["Bug", "Domain: Refactorings"]}, {"num": 35192, "title": "\"Convert to async function\" produces incorrect code for .catch()", "labels": ["Bug", "Domain: Refactorings"]}, {"num": 40469, "title": "\"Convert to named function\" refactoring is not suggested for non-arrow function expressions", "labels": ["Bug", "Domain: Refactorings"]}, {"num": 40610, "title": "\"Convert to template string\" result unnecessarily complicated if one part was already a template string", "labels": ["Bug", "Domain: Refactorings"]}, {"num": 19254, "title": "\"Debugging Language Service in VS Code\" documentation is weird", "labels": ["Docs"]}, {"num": 40218, "title": "\"Delete all unused declarations\" deletes code with side-effects", "labels": ["Bug", "Domain: Refactorings"]}, {"num": 30260, "title": "\"Delete all unused declarations\" on TS imports removes code in files", "labels": ["Bug", "help wanted"]}, {"num": 4905, "title": "\"design:paramnames\" metadata key", "labels": ["Domain: Decorators", "In Discussion", "Suggestion"]}, {"num": 35738, "title": "\"Did you mean parent object or child property?\" in error messsages", "labels": ["Domain: Error Messages", "Effort: Moderate", "Experience Enhancement", "Suggestion", "help wanted"]}, {"num": 7077, "title": "\"duplicate identifier\" error in js files produced by tsc", "labels": ["Suggestion", "help wanted"]}, {"num": 35668, "title": "\"emitDecoratorMetadata\" gets compile error \"This dependency was not found...\"", "labels": ["Needs More Info"]}, {"num": 39152, "title": "\"export = { }\" vs \"let a = { }; export = a\", causes discrepancy in import behavior", "labels": ["Needs Investigation"]}, {"num": 37619, "title": "\"export class\" does not compile with outfile=foo (module=none, es6)", "labels": ["Bug"]}, {"num": 5205, "title": "\"extending\" internal namespaces", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 31861, "title": "\"Extract to function\" does not re-use type aliases", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 39640, "title": "\"Extract to function\" refactor is not suggested if selection contains `if` statement", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 38998, "title": "\"Filename too long\" on Windows when cloning test folder", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 38016, "title": "\"Find all references\" not working for JSDoc @callback", "labels": ["Bug"]}, {"num": 29452, "title": "\"fix everything in this file\" code action", "labels": ["API", "Domain: Quick Fixes", "Domain: TSServer", "In Discussion", "Suggestion"]}, {"num": 33147, "title": "\"Go To Type Definition\" for type names should navigate to the type definition", "labels": ["Domain: Symbol Navigation", "In Discussion", "Suggestion"]}, {"num": 28241, "title": "\"Import assignment cannot be used when targeting ECMAScript modules.\" should come with a codefix", "labels": ["Domain: Quick Fixes", "In Discussion", "Suggestion"]}, {"num": 38979, "title": "\"Infer parameter type from usage\" produces oddly formatted output", "labels": ["Bug"]}, {"num": 37099, "title": "\"Infer types from usage\" not consider js object initializer", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 39036, "title": "\"is assignable to the constraint of type but could be instantiated with a different subtype of constraint\" error with assetion function", "labels": ["Design Limitation"]}, {"num": 29220, "title": "\"is not a constructor\" should be detected in compile time as \"used before its declaration.\"", "labels": ["Awaiting More Feedback", "Experience Enhancement", "Suggestion"]}, {"num": 39949, "title": "\"Isolated\" annotation for functions that only act on inputs", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 40442, "title": "\"javascript.preferences.importModuleSpecifier\" relative path, but with current directory prefix", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 32344, "title": "\"Move to new file\" breaks implicit index imports", "labels": ["Bug", "Domain: Refactorings"]}, {"num": 32885, "title": "\"Move to new file\" breaks imports when using re-exports", "labels": ["Bug", "Domain: Refactorings"]}, {"num": 33156, "title": "\"Move to new file\" does not copy namespace imports", "labels": ["Bug", "Domain: Refactorings"]}, {"num": 39834, "title": "\"Organize imports\" duplicates comment above import", "labels": ["Bug", "Domain: Refactorings"]}, {"num": 37630, "title": "\"paths\" of tsconfig.json doesn't work inside the symlinked directory", "labels": ["Needs Investigation"]}, {"num": 35772, "title": "\"paths\" option should allow untyped entries", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 29261, "title": "\"Pick\" or \"Exclude\" constructor from class type", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 24002, "title": "\"program.emit\" produces wrong declaration file if \"declaration\" option is false or not specified", "labels": ["API", "Bug", "help wanted"]}, {"num": 40719, "title": "\"readonly\" interface property is not working when modifying instance property using Object.defineProperty", "labels": ["Design Limitation"]}, {"num": 30902, "title": "\"require\" is not an autocomplete option for blank js file", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 36085, "title": "\"source.organizeImports\" shouldn't remove my unused imports", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 31873, "title": "\"sourceRoot\" not resolved correctly for nested modules", "labels": ["Bug", "Rescheduled"]}, {"num": 28790, "title": "\"system\" module format broken for new SystemJS version", "labels": ["In Discussion", "Suggestion"]}, {"num": 26592, "title": "\"This condition will always return 'false'\" but returns true at runtime", "labels": ["Bug", "Domain: Error Messages"]}, {"num": 40819, "title": "\"TypeError: Cannot read property 'kind' of undefined\" when \"incremental\" is enabled", "labels": ["Bug"]}, {"num": 35744, "title": "\"types\" field in package.json pointing to a `.ts` file in node_modules results in the file being compiled and type checked", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 28383, "title": "\"Unique symbol as the name of a private method\" results in invalid .d.ts declaration", "labels": ["Bug", "Domain: Declaration Emit"]}, {"num": 20755, "title": "\"Variable is used before being assigned\" even though it is assigned", "labels": ["Bug"]}, {"num": 2432, "title": "'arguments' object not supported by findAllRefs/getOccurrences", "labels": ["Bug", "help wanted"]}, {"num": 30540, "title": "'bigint' is not comparable to 'number' with loose equality", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 29486, "title": "'Can't find name' for enum type in generated .d.ts ", "labels": ["Bug", "Domain: Declaration Emit"]}, {"num": 19229, "title": "'Canvas#getContext' almost never returns 'null'", "labels": ["Awaiting More Feedback", "Domain: lib.d.ts", "Suggestion"]}, {"num": 3403, "title": "'Content-Length' value returned by TSServer is one off on Windows", "labels": ["API", "Bug", "help wanted"]}, {"num": 37782, "title": "'declare method' quick fix for adding a private method", "labels": ["Suggestion", "good first issue", "help wanted"]}, {"num": 3229, "title": "'default' gets incorrect completion info when a default export is present", "labels": ["Bug", "help wanted"]}, {"num": 40210, "title": "'h' (Preact JSX factory) is not imported when '<>...</>' is used with no other JSX tags", "labels": ["Bug"]}, {"num": 10315, "title": "'innerText' should not be nullable in most of Node's derived types", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 31104, "title": "'Omit' should alias a distinct mapped type (for display purposes)", "labels": ["Effort: Moderate", "Experience Enhancement", "Suggestion", "help wanted"]}, {"num": 39946, "title": "'this' autocomplete broken", "labels": ["Bug", "Has Repro", "Needs Investigation"]}, {"num": 20278, "title": "'this' cannot be referenced in constructor arguments", "labels": ["Bug", "ES6"]}, {"num": 15748, "title": "'this' type cannot be compared with subclasses ", "labels": ["In Discussion", "Suggestion"]}, {"num": 21258, "title": "'utilities.ts' is an API surface hazard", "labels": ["Infrastructure"]}, {"num": 41021, "title": "'void' shouldn't be a silently indexable type", "labels": ["Bug", "Fix Available"]}, {"num": 28425, "title": "'Vue' only refers to a type,  but is being used as a namespace here.", "labels": ["Needs More Info"]}, {"num": 16918, "title": "(Proposal) syntax for contextual typing of a function declaration", "labels": ["In Discussion", "Suggestion"]}, {"num": 37453, "title": "(Set | Array).forEach loses type inference for callback", "labels": ["Design Limitation"]}, {"num": 40110, "title": "(Vanilla) Mixins Pattern: Base constructor must have same return type", "labels": ["Bug"]}, {"num": 20203, "title": "+= (plus equal) operator not treated correctly", "labels": ["In Discussion", "Suggestion"]}, {"num": 21653, "title": "--esModuleInterop: Strange incompatibility between correct and incorrect import of same type", "labels": ["Domain: Error Messages", "Experience Enhancement", "In Discussion", "Suggestion"]}, {"num": 34162, "title": "--noEmitOnError trace has incorrect number of errors", "labels": ["Bug"]}, {"num": 29324, "title": "--noImplicitAny codefix inferring string for complex object", "labels": ["Domain: Quick Fixes", "Experience Enhancement", "Suggestion"]}, {"num": 28991, "title": "--noImplicitAny codefixes infer anonymous object types despite appropriate interfaces in (or out of) scope", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 29322, "title": "--noImplicitAny codefixes infer methods returning void instead of any", "labels": ["In Discussion", "Suggestion"]}, {"num": 25526, "title": "--noImplicitThis error is inconsistent", "labels": ["Bug"]}, {"num": 31932, "title": "--watch compilation with no change takes 3 seconds", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 32665, "title": "./.vscode > tasks.json contains deprecated API tasks.identifier", "labels": ["Infrastructure"]}, {"num": 38953, "title": ".d.ts files strip private property types, which can be used to distinguish instance types", "labels": ["Design Limitation"]}, {"num": 36275, "title": ".includes or .indexOf does not narrow the type", "labels": ["Suggestion", "Too Complex"]}, {"num": 16840, "title": "2.4: Readonly<Map<k,v>> vs. ReadonlyMap<k,v>", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 26868, "title": "3.0.1 - Empty object in nested array breaks typing ", "labels": ["Design Limitation"]}, {"num": 29743, "title": "3.3.1 regression in type inference", "labels": ["Bug"]}, {"num": 30390, "title": "3.4 regression for type argument inference", "labels": ["Breaking Change", "Needs Investigation", "Rescheduled"]}, {"num": 30694, "title": "3.4 Regression on Type inference with union types", "labels": ["Needs Investigation"]}, {"num": 31121, "title": "3.4.1 regression in distributed types", "labels": ["Domain: Conditional Types", "Needs Investigation"]}, {"num": 31833, "title": "3.5 Breaks function assignments that use a complex Discriminated Unions Type", "labels": ["Bug"]}, {"num": 31316, "title": "3.5 regression: return type forced more restrictive than needed", "labels": ["Domain: Control Flow", "Domain: Indexed Access Types", "Needs Proposal", "Suggestion"]}, {"num": 33379, "title": "3.6 regression: unions of callable types involving `this` types", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 39788, "title": "4.0: Cannot use variadic tuples in Promise.all", "labels": ["Needs Investigation"]}, {"num": 15488, "title": "<reference types=\"\" /> is not emitted when the dependency is indirect", "labels": ["Bug", "Effort: Moderate", "help wanted"]}, {"num": 40359, "title": "?? and ??= behave differently when they shouldn't", "labels": ["Bug", "Effort: Moderate", "help wanted"]}, {"num": 40365, "title": "@deprecated for properties of merged Interfaces", "labels": ["Bug", "help wanted"]}, {"num": 39374, "title": "@deprecated strikethrough doesn't appear in many cases, such as JSX elements, const arrow functions, or properties.", "labels": ["Bug"]}, {"num": 37346, "title": "@description JSDoc tag interferes with callback parameter documentation", "labels": ["Bug", "GraceHopperOSD", "checkJs", "help wanted"]}, {"num": 39371, "title": "@example breaks when example includes `@` character (org package imports)", "labels": ["Bug", "VS Code Priority"]}, {"num": 36477, "title": "@template is lost when importing method", "labels": ["Needs Investigation"]}, {"num": 18475, "title": "@ts-check complains about the object given to Object.defineProperty not having Object properties", "labels": ["Bug", "Domain: lib.d.ts", "VS Code Tracked", "help wanted"]}, {"num": 19573, "title": "@ts-ignore for the block scope and imports", "labels": ["Awaiting More Feedback", "Suggestion", "VS Code Tracked"]}, {"num": 33256, "title": "@ts-ignore is broken in 3.6 when code line is broken into 2 lines", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 33795, "title": "@ts-ignore is hard to use with calls to overloads", "labels": ["Bug", "Needs Proposal"]}, {"num": 37047, "title": "@ts-ignore on an import that gets redefined strips the import from output", "labels": ["Bug"]}, {"num": 25303, "title": "@typedef tags appearing in the next declaration quick info in VSCode", "labels": ["Bug", "Domain: JSDoc", "help wanted"]}, {"num": 35566, "title": "@types's definition doesn't match its own type", "labels": ["Bug"]}, {"num": 28356, "title": "[1.28.2] Refactor renaming class-method not renaming bind(this) assignments (Javascript)", "labels": ["Bug", "Domain: Refactorings"]}, {"num": 22826, "title": "[2.8.0-rc] Segfault when running compiler with --d or --watch (out of memory)", "labels": ["Bug", "Domain: Declaration Emit"]}, {"num": 29859, "title": "[3.2.2] `keyof` expanded to fixed properties in the ambient declaration of a mixin", "labels": ["Needs More Info"]}, {"num": 31426, "title": "[3.5.0-dev.20190516] Incorrect type error for mixin", "labels": ["Bug", "Fix Available"]}, {"num": 31675, "title": "[3.5.1] Type 'NonNullable<Partial<Config>[T]>' is not assignable to type 'Config[T]'", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 34916, "title": "[3.6.3] `tsc --watch` extremely slow (regular `tsc` compiles fine).", "labels": ["Needs More Info", "Rescheduled"]}, {"num": 37679, "title": "[3.8.3] Compiler hang up with --strictNullChecks option and 13 destructing parameters", "labels": ["Bug"]}, {"num": 38460, "title": "[3.9.2] Regression - combination of mapped type, intersection and generic produces error under infer", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 41099, "title": "[4.1.0-beta] Incorrect method overload selected", "labels": ["Needs Investigation"]}, {"num": 33886, "title": "[Array.prototype.reduce] TS infers accumulator type as any[]", "labels": ["In Discussion", "Suggestion"]}, {"num": 36763, "title": "[Breaking Change] Typescript 3.7 converts reference paths to tsconfig specified paths breaking multi-project compiles.", "labels": ["Needs Investigation"]}, {"num": 37835, "title": "[Bug] & [Feature Request] ?? Compose Function Types using Generics / inferring fn params using generics", "labels": ["In Discussion", "Suggestion"]}, {"num": 36675, "title": "[Bug] [Yarn Berry] TS2742: The inferred type of 'testContext' cannot be named without a reference to './.yarn/cache/...'", "labels": ["Design Limitation"]}, {"num": 29122, "title": "[bug] A method return type of 'this' is incorrectly converted to 'any' in declaration output", "labels": ["Bug"]}, {"num": 30298, "title": "[BUG] Comments between export and import modules are removed", "labels": ["Bug", "Domain: Comment Emit"]}, {"num": 13627, "title": "[BUG] Docs say es6 modules can't export class objects, but that's not true.", "labels": ["Docs", "help wanted"]}, {"num": 38495, "title": "[bug] existing module shows as not found in VS Code", "labels": ["Needs More Info"]}, {"num": 39161, "title": "[Bug] No error on array spread of ([] | undefined) if \"downlevelIteration\" and \"es2015.iterable\" are both set", "labels": ["Bug"]}, {"num": 40400, "title": "[Bug] Projects have different output directory structure with same configuration.", "labels": ["Needs Investigation"]}, {"num": 38204, "title": "[Bug] Refactor breaks some statements into 2 lines", "labels": ["Bug", "Domain: Refactorings"]}, {"num": 16552, "title": "[bug] TemplateStringsArray is incompatible with literal array type", "labels": ["In Discussion", "Suggestion"]}, {"num": 16241, "title": "[bug] Ternary + arrow function is not correctly parsed", "labels": ["Bug"]}, {"num": 30890, "title": "[Bug]tsc does not finish", "labels": ["Needs More Info"]}, {"num": 26314, "title": "[Bug]tsc does not finish", "labels": ["Bug"]}, {"num": 35900, "title": "[Compiler API] function which check if a class implements an interface", "labels": ["API", "Awaiting More Feedback", "Suggestion"]}, {"num": 30624, "title": "[Design Policy] Consider JSDoc feature parity with Typescript", "labels": ["Meta-Issue"]}, {"num": 15626, "title": "[Discussion] Better Way to Declare Globals in JavaScript files", "labels": ["Domain: JavaScript", "Needs Proposal", "Suggestion", "VS Code Tracked"]}, {"num": 41072, "title": "[docs] Document the interaction between `Parameters` and the `this` parameter", "labels": ["Docs"]}, {"num": 27893, "title": "[docs] Module mode vs. script mode", "labels": ["Docs"]}, {"num": 25025, "title": "[feat] Allow use of downlevelIteration on es2015 or greater", "labels": ["In Discussion", "Suggestion"]}, {"num": 36766, "title": "[Feature proposal] Counter constraints on dynamic keys", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 32977, "title": "[Feature Request] A way to specify preference to emit `typeof` a variable instead", "labels": ["Needs Investigation"]}, {"num": 37918, "title": "[Feature Request] Ability to auto-generate a type file for local JS module", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 31760, "title": "[Feature Request] Abstract Interfaces with Undeclared Properties", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 31626, "title": "[Feature request] allow emit param name when emitDecoratorMetadata", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 31062, "title": "[Feature request] allow use `as const` + `type` or `interface`", "labels": ["In Discussion", "Suggestion"]}, {"num": 31122, "title": "[Feature request] allow use `showConfig` in tsconfig.json", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 39991, "title": "[feature request] Better error messages for decorators (they are completely not understandable)", "labels": ["Bug", "Domain: Error Messages", "Effort: Moderate", "help wanted"]}, {"num": 31331, "title": "[feature request] destructured type assignment", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 35654, "title": "[Feature Request] Future-proof always-aliasing of mapped/intersection/union/etc. types", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 31154, "title": "[Feature request] keyword `final` type for output full final type in .d.ts", "labels": ["Awaiting More Feedback", "Domain: Declaration Emit", "Suggestion"]}, {"num": 39484, "title": "[feature request] make it possible to /// reference node modules that carry their own types the same as node modules with @types/", "labels": ["In Discussion", "Suggestion"]}, {"num": 23242, "title": "[Feature Request] Make Typescript type system a formal proposal to ES ", "labels": ["Discussion"]}, {"num": 32909, "title": "[Feature Request] Non-Union Generic Type Params", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 29469, "title": "[feature request] not sure how to word this: \"infer generic arg type/constraint in wrapping type\"", "labels": ["In Discussion", "Suggestion"]}, {"num": 9245, "title": "[FEATURE REQUEST] Please supply a minified version with only transpilation functionality ", "labels": ["API", "Suggestion", "help wanted"]}, {"num": 31992, "title": "[Feature Request] Preserve comments when using Extract<keyof T, string>", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 32496, "title": "[Feature Request] Print project directory when diagnostics enabled", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 32224, "title": "[Feature request] sort literals in .d.ts", "labels": ["Experience Enhancement", "Suggestion", "good first issue"]}, {"num": 16551, "title": "[feature request] Support Custom Types for Tagged Template Expressions", "labels": ["In Discussion", "Suggestion"]}, {"num": 31780, "title": "[Feature Request] Support export assignment when other exported elements are just type declarations", "labels": ["Suggestion", "Too Complex"]}, {"num": 31724, "title": "[Feature request] use Proxy in __importStar when target >= es6 with esModuleInterop", "labels": ["Needs Investigation"]}, {"num": 37515, "title": "[Feature] allow use `xxx is Type` with async function", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 37487, "title": "[feature] class properties that are \"readonly on the outside, writable on the inside\"", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 27604, "title": "[Feature] make generated codes from enum could be minified when not used", "labels": ["In Discussion", "Suggestion"]}, {"num": 27532, "title": "[feature] support union type rest parameter", "labels": ["In Discussion", "Suggestion"]}, {"num": 37642, "title": "[Feature] Utility type for T[keyof T] or new keyword valueof", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 35713, "title": "[formatter] Semicolon is not removed on class member with initializer", "labels": ["Bug", "Domain: Formatter"]}, {"num": 34978, "title": "[generator] Avoid\u00a0const\u00a0condition emit\u00a0in\u00a0loops when\u00a0targeting\u00a0ES5\u00a0or\u00a0ES3", "labels": ["Domain: JS Emit", "Needs Investigation"]}, {"num": 29129, "title": "[i18n] Intl getCanonicalLocales / RelativeTimeFormat / ListFormat > 2339 error", "labels": ["Domain: lib.d.ts", "In Discussion", "Suggestion"]}, {"num": 38950, "title": "[javascript] Find all references when for module.exports = { foo: foo }", "labels": ["Bug"]}, {"num": 41179, "title": "[JS] Make \"Go to implementations\" go to the implementation (.js) instead of type definitions file (.d.ts)", "labels": []}, {"num": 31620, "title": "[k in keyof EnumA] should show error", "labels": ["In Discussion", "Suggestion"]}, {"num": 33195, "title": "[language server] Apply codefix to all files", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 38886, "title": "[lib.dom.d.ts] Include well-known KeyboardEvent.key values", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 35068, "title": "[navtree] Only a single nameSpan listed for multiple declarations of interface", "labels": ["Domain: TSServer", "In Discussion", "Suggestion"]}, {"num": 40623, "title": "[NewErrors] 4.1.0-dev.20200917 vs 4.0.2", "labels": ["Infrastructure"]}, {"num": 40659, "title": "[NewErrors] 4.1.0-dev.20200920 vs 4.0.3", "labels": ["Infrastructure"]}, {"num": 40800, "title": "[NewErrors] 4.1.0-dev.20200927 vs 4.0.3", "labels": ["Infrastructure"]}, {"num": 41155, "title": "[NewErrors] 4.1.0-dev.20201018 vs 4.0.3", "labels": []}, {"num": 41235, "title": "[NewErrors] 4.1.0-dev.20201025 vs 4.0.3", "labels": []}, {"num": 37670, "title": "[P in keyof T]: T[P] not accepting inferred base type via extends", "labels": ["Effort: Difficult", "Experience Enhancement", "Suggestion", "help wanted"]}, {"num": 40174, "title": "[pedantic] Disallow access member from any type", "labels": ["In Discussion", "Suggestion"]}, {"num": 33112, "title": "[Proposal] Conceptual(virtual) module in .d.ts", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 10752, "title": "[Proposal] Display all properties (inherited or not) of a given class (in TypeScript)", "labels": ["Needs Proposal", "Suggestion", "VS Code Tracked"]}, {"num": 40071, "title": "[PROPOSAL] Support @augments/@extends attached to an Object types", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 10421, "title": "[Proposal] Type assertion statement (type cast) at block-scope level", "labels": ["Revisit", "Suggestion"]}, {"num": 31489, "title": "[quick fix][typescript] Quick fix to add method parameter if missing - ts(2554)", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 31488, "title": "[quick fix][typescript] Quick fix to change return type of method - ts(2322)", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 24122, "title": "[Regression] TS2562 - mixins cannot accept generic types", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 37238, "title": "[request] allow `export type * from`", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 40151, "title": "[Request] Warn on void && Short circuit", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 30689, "title": "[RFC] Improved UX via --noExplicitErrors", "labels": ["Add a Flag", "Domain: Error Messages", "In Discussion", "Suggestion"]}, {"num": 24264, "title": "[SALSA] @callback's @param tags should not require names", "labels": ["Awaiting More Feedback", "Domain: JavaScript", "Suggestion"]}, {"num": 14233, "title": "[Salsa] Support jsdoc `@namespace` ", "labels": ["Committed", "Domain: JSDoc", "Domain: JavaScript", "Suggestion"]}, {"num": 31642, "title": "[site] looks like toc miss Utility Types  and tsconfig.json has 2", "labels": ["Docs"]}, {"num": 20111, "title": "[Suggestion] Allow @ts-ignore at the end of the same line", "labels": ["In Discussion", "Suggestion"]}, {"num": 16317, "title": "[Suggestion] Compiler Flag to treat types as immutable", "labels": ["Add a Flag", "Needs Proposal", "Suggestion"]}, {"num": 17825, "title": "[SUGGESTION] support for custom components on es5", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 33818, "title": "[suggestion] type functions that can run type code within current scope (sort of like macros)", "labels": ["Suggestion", "Too Complex"]}, {"num": 14219, "title": "[Suggestion]: Merge emitted getters and setters into a single Object.defineProperties call", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 10740, "title": "[Transforms] don't emit detach comments as part of the node comment", "labels": ["Bug", "Domain: Comment Emit", "Domain: Transforms"]}, {"num": 6603, "title": "[tsc] Inform user when detected tsconfig.json file is not being applied", "labels": ["Awaiting More Feedback", "Breaking Change", "Suggestion"]}, {"num": 5913, "title": "[tsserver] \"Error processing request. watch  ENOENT\" with TypeScript 1.7.3", "labels": ["Bug", "help wanted"]}, {"num": 39489, "title": "[tsserver] api to find references to a file ", "labels": ["API", "Committed", "Domain: TSServer", "Suggestion"]}, {"num": 12124, "title": "[tsserver] CompileOnSaveEmitFile should returns emited files (js, map, d.ts) path", "labels": ["API", "Awaiting More Feedback", "Suggestion"]}, {"num": 5923, "title": "[tsserver] documentation \"about how to implement tsClient?\"", "labels": ["Docs"]}, {"num": 7905, "title": "[tsserver] Support for \"definitions\" command (several definition)", "labels": ["API", "Awaiting More Feedback", "Suggestion"]}, {"num": 39009, "title": "[tsserverlibrary] Allow reporting helpful links and error-names", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 13088, "title": "[TypeScript 2.1.4] Why QuickInfo truncates documentation? ", "labels": ["API", "Bug", "Domain: Quick Info", "help wanted"]}, {"num": 36652, "title": "[typescript server] type discoverability is unstable", "labels": ["Needs Investigation"]}, {"num": 29517, "title": "[TypeScript] [JSDoc] Placing documentation for function below a decorator of the function (as opposed to above it) fails to associate with the function", "labels": ["Bug", "Domain: Signature Help"]}, {"num": 19040, "title": "[typescript] dom definitions not up to date", "labels": ["Bug", "Domain: lib.d.ts", "VS Code Tracked", "help wanted"]}, {"num": 23595, "title": "[typescript] lib.dom.d.ts has confusing types", "labels": ["Awaiting More Feedback", "Domain: lib.d.ts", "Suggestion"]}, {"num": 35673, "title": "[Typescript] References to methods/properties of class are not recognized inside a function which is bound to the class using .bind(this).", "labels": ["Design Limitation"]}, {"num": 40920, "title": "[typescript] removing a bracket loses all folded areas", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 13822, "title": "[typings installer] ensure that installed @types packages are supported by the current version of the TypeScript", "labels": ["Bug"]}, {"num": 11254, "title": "[typingsInstaller] honor versions in package.json/bower.json when searching for types", "labels": ["Bug", "Domain: JavaScript"]}, {"num": 11255, "title": "[typingsInstaller] Provide information about auto-installed types in project info", "labels": ["Bug", "Domain: JavaScript"]}, {"num": 26467, "title": "[vscode][project-references] broken links and missing completions", "labels": ["Needs More Info"]}, {"num": 35545, "title": "[webworker.d.ts] createImageBitmap is missing types for options", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 35802, "title": "__decorate helper should not use `this` when targeting modules", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 40328, "title": "__importDefault without tslib in output when noEmitHelpers and importHelpers set to true", "labels": ["Needs Investigation"]}, {"num": 27415, "title": "__importStar sometimes inlined when using dynamic imports with --importHelpers", "labels": ["Bug"]}, {"num": 19563, "title": "__metadata should register function that returns type instead of literal type", "labels": ["Domain: Decorators", "Revisit", "Suggestion"]}, {"num": 35071, "title": "`!.` after `?.` should be warned", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 35431, "title": "`!` type assertion on `never` changes the type", "labels": ["Bug"]}, {"num": 35866, "title": "`(0, object.property)()` produces TS2695", "labels": ["In Discussion", "Suggestion"]}, {"num": 16852, "title": "`--globalPlugins` and `--pluginProbeLocations` default to list with empty string", "labels": ["Bug"]}, {"num": 29789, "title": "`.call` selects the wrong overload for `String.prototype.replace`", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 25736, "title": "`@callback` is only generic after `@template` tag", "labels": ["Bug", "Domain: JSDoc", "Domain: JavaScript", "checkJs"]}, {"num": 15978, "title": "`@lib: ES6` on fourslash test case breaks tests", "labels": ["Bug", "help wanted"]}, {"num": 37458, "title": "`@ts-ignore` quick fix should be switched to `@ts-expect-error`", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 26776, "title": "`@typedef` doesn't give error for bad or missing typename", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 38304, "title": "`allowUnusedLabels` should be false in the --init configuration", "labels": ["In Discussion", "Suggestion"]}, {"num": 31295, "title": "`any` appears to shortcircut structural type checking", "labels": ["Bug", "Domain: Conditional Types", "Domain: Variance Relationships"]}, {"num": 35352, "title": "`as` keyword doesn't appear in completion list", "labels": ["Bug"]}, {"num": 41178, "title": "`assert.equal()` deprecation warning shown when using strict import", "labels": []}, {"num": 41232, "title": "`asserts` keyword does not enhance hoisted function type, works on functions assigned to a variable", "labels": []}, {"num": 23352, "title": "`cb: (x: T) => void` not assignable to `cb: (x: T) => void` when it has an overload: \"'any' is not assignable to 'never'\"", "labels": ["Bug"]}, {"num": 17372, "title": "`const enum` inside a namespace makes it treated as a value", "labels": ["Bug"]}, {"num": 9094, "title": "`default` from export list not quoted in ES3 output", "labels": ["Bug"]}, {"num": 33012, "title": "`esModuleInterop` breaks circular imports", "labels": ["Bug"]}, {"num": 38142, "title": "`Exclude<Exclude<T, null>, undefined>` is not assignable to `Exclude<T, null | undefined>` and vice versa", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 11853, "title": "`export * from \"mod\"` should filter out `default` property", "labels": ["Bug", "ES6", "help wanted"]}, {"num": 36313, "title": "`export as namespace` still allows access via properties in module files", "labels": ["Bug"]}, {"num": 12953, "title": "`export default function` should not be allowed in a namespace", "labels": ["Bug"]}, {"num": 27286, "title": "`export default interface` in augmentation shadows original default export", "labels": ["Bug"]}, {"num": 39805, "title": "`export default interface` with two names should be an error", "labels": ["Bug"]}, {"num": 35172, "title": "`extends ArrayBufferLike` works for own package; but causes errors for downstream users", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 33829, "title": "`getSignaturesOfType` throws `Cannot read property 'flags' of undefined`", "labels": ["Bug", "Crash"]}, {"num": 20372, "title": "`got n or more` with spread arguments", "labels": ["Bug", "Domain: Error Messages", "help wanted"]}, {"num": 37623, "title": "`import './file.json'`: This module is declared with using 'export ='", "labels": ["In Discussion", "Suggestion"]}, {"num": 30357, "title": "`importHelpers` generates code, that is incompatible with browsers", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 39948, "title": "`in` doesn't play good with enum", "labels": ["Bug"]}, {"num": 36165, "title": "`inherit` keyword as shorthand to refer to super class fields and methods.", "labels": ["In Discussion", "Suggestion"]}, {"num": 27511, "title": "`let foo = new Foo(); export = foo;` has fewer type errors than `export = new Foo();`", "labels": ["Bug"]}, {"num": 36525, "title": "`lib.d.ts` isn't ordered appropriately for signature help", "labels": ["Bug"]}, {"num": 14139, "title": "`lib.dom.ts` incorrect return type for `Document.elementFromPoint`", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 17101, "title": "`MediaError` interface in lib.dom.d.ts missing \"message\" property", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 38729, "title": "`moduleResolution: node` doesn't align with Node's module resolution when targeting ES2015.", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 4356, "title": "`new myVariable.constructor()` doesn't compile", "labels": ["In Discussion", "Suggestion"]}, {"num": 40443, "title": "`null!` still has the type `null` outside of `strictNulllChecks`", "labels": ["Bug"]}, {"num": 33891, "title": "`Object.entries(any)` returns `never` inside `new Map`", "labels": ["Bug"]}, {"num": 35478, "title": "`Object` variable declaration conflicts on commonjs", "labels": ["Bug"]}, {"num": 36981, "title": "`Omit`  helper loses type information when used with extended Records.", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 40742, "title": "`organizeImports` treatment of file header comments", "labels": ["Bug", "Domain: Organize Imports"]}, {"num": 31173, "title": "`paths` not used for auto import", "labels": ["Bug", "Domain: Quick Fixes"]}, {"num": 30727, "title": "`pipe` loses generics", "labels": ["Needs Investigation"]}, {"num": 37856, "title": "`Promise.all` not removing `never[]` in catch narrowing", "labels": ["Bug", "Domain: lib.d.ts", "Rescheduled"]}, {"num": 30633, "title": "`readonly` mapped type modifiers for `Map` / `ReadonlyMap`", "labels": ["In Discussion", "Suggestion"]}, {"num": 27098, "title": "`references` are not inherited in `tsconfig.json`", "labels": ["Docs"]}, {"num": 41039, "title": "`Reflect.deleteProperty` allows deletion of properties that aren't optional", "labels": ["Design Limitation"]}, {"num": 38595, "title": "`RegExp.lastIndex` has no doc comment in `lib.es5.d.ts`", "labels": []}, {"num": 34516, "title": "`static abstract` methods and properties", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 32194, "title": "`strictPropertyInitialization` should allow private initialization helpers", "labels": ["In Discussion", "Suggestion"]}, {"num": 19548, "title": "`SVGElement.className` should be read-only", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 29713, "title": "`symbol` does not match interface", "labels": ["Bug", "Domain: lib.d.ts"]}, {"num": 26933, "title": "`T` should be assignable to `A extends B ? C : D` if it is assignable to both `C` and `D`", "labels": ["Investigating", "Suggestion"]}, {"num": 29042, "title": "`this[variable]` and `this[stringLiteral]` have different behavior", "labels": ["Bug", "Domain: Control Flow"]}, {"num": 32486, "title": "`this` and `typeof` are not type keywords in completions", "labels": ["Bug"]}, {"num": 39931, "title": "`this` is not preserved when extracted to function in module scope", "labels": ["Bug", "Domain: Refactorings"]}, {"num": 22934, "title": "`this` type is not assignable to `NonNullable<this>`", "labels": ["Bug"]}, {"num": 21662, "title": "`this` types in intrinsic class attributes not inferred correctly", "labels": ["Bug", "Domain: JSX/TSX"]}, {"num": 31991, "title": "`transpileModule` should set `declarationMap = undefined` when it sets `declaration = undefined`", "labels": ["Bug"]}, {"num": 38391, "title": "`typeChecker.getTypeArguments` returns unexpected extra type argument", "labels": []}, {"num": 37868, "title": "`typeof` expressions should return an equivalent of a guard", "labels": ["In Discussion", "Suggestion"]}, {"num": 41198, "title": "`typeRoots` are ignored for normal type resolution when `types` are specified.", "labels": []}, {"num": 36699, "title": "`typescript.SymbolTable` does not properly implement the ES6 Map interface", "labels": ["API", "Awaiting More Feedback", "Suggestion"]}, {"num": 41284, "title": "`typeVersions` substitution occurs multiple times causing resolution to fail", "labels": []}, {"num": 39836, "title": "`unknown` type declaration for catch argument doesn't work in js", "labels": ["Bug"]}, {"num": 38140, "title": "`value: T` is not assignable to `Exclude<T, null>` after passing `value !== null` check", "labels": ["Design Limitation"]}, {"num": 39600, "title": "`void` parameter type produced from generic inference doesn't allow skipping as argument", "labels": ["Bug"]}, {"num": 16776, "title": "`watchDirectory` called unconditionally, but it is typed as optional", "labels": ["Bug", "help wanted"]}, {"num": 30047, "title": "A behavior of conditional types is changed (regression)", "labels": ["Needs Investigation"]}, {"num": 37142, "title": "A mixin class must have a constructor with a single rest parameter of type 'any[]'.", "labels": ["Bug"]}, {"num": 35102, "title": "A property descriptor must have keys \"enumerable\" and \"configurable\"", "labels": ["Bug", "Domain: lib.d.ts"]}, {"num": 28508, "title": "A way to expand mapped types", "labels": ["In Discussion", "Suggestion"]}, {"num": 37319, "title": "A way to ignore prefix/suffix in module ID, then resolve the remaining ID as usual", "labels": ["In Discussion", "Suggestion"]}, {"num": 26811, "title": "A way to specify class properties using JSDoc", "labels": ["Domain: JavaScript", "Experience Enhancement", "Suggestion"]}, {"num": 37067, "title": "Ability to decorate abstract member function", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 35470, "title": "Ability to disable TS8010: 'types' can only be used in a .ts file.", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 33185, "title": "Ability to get generic type from typeof and infer", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 33052, "title": "Ability to only check specific errors", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 25495, "title": "Ability to patch/overwrite missing/wrong declarations", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 39594, "title": "Ability to replace return type of function type", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 13087, "title": "Abstract class type argument inference", "labels": ["Committed", "Domain: JavaScript", "Suggestion"]}, {"num": 22815, "title": "Abstract classes that implement interfaces shouldn't require method signatures", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 33525, "title": "Abstract classes will still import the value for a computed property at runtime", "labels": ["Bug"]}, {"num": 37629, "title": "Abstract function parameter typing doesn't pass to implementing functions ", "labels": ["Bug"]}, {"num": 41173, "title": "Accept de-structured elements in type predicates", "labels": []}, {"num": 13944, "title": "Accept Input Source Maps", "labels": ["In Discussion", "Suggestion"]}, {"num": 14052, "title": "Access `global` as a type", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 35314, "title": "Accessing property on super should be a type error", "labels": ["Bug"]}, {"num": 29132, "title": "Accessing protected properties with `this` argument specifier differs with interface", "labels": ["Bug"]}, {"num": 23348, "title": "Accessor declarations are not unified when they have late bound names", "labels": ["Bug"]}, {"num": 36625, "title": "Accumulating type in TypeScript like powerful instrument for organizing code", "labels": ["In Discussion", "Suggestion"]}, {"num": 29462, "title": "Add \"find assignment references\"", "labels": ["Domain: TSServer", "In Discussion", "Suggestion"]}, {"num": 1534, "title": "Add \"sealed\" key word to mark some public/protected methods not be overriden", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 38966, "title": "Add \"sourceMapDir\", \"declarationMapDir\", \"inlineDeclarationMap\", and \"declarationMapInlineSources\" compiler options", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 5580, "title": "Add \"tonicExample\" or \"tonicExampleFilename\" field to package.json", "labels": ["Suggestion", "help wanted"]}, {"num": 29938, "title": "Add '--bail' option when running '--build' mode", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 37971, "title": "Add 'browser' module resolution, type checking native JS module imports", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 39514, "title": "Add @deprecated reasons in lib.dom.d.ts", "labels": ["Bug", "Domain: lib.d.ts"]}, {"num": 6805, "title": "Add `--inlineConsts` flag", "labels": ["In Discussion", "Suggestion"]}, {"num": 38881, "title": "Add `// @ts-unreachable` comment for compile-time unreachability checking", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 30163, "title": "Add `extendsExact: bool` property to tsconfig.json", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 36812, "title": "Add `import type \"mod\"`", "labels": ["Awaiting More Feedback", "In Discussion", "Suggestion"]}, {"num": 33785, "title": "Add `isRestTypeNode` type assertion to compiler API", "labels": ["API", "Awaiting More Feedback", "Suggestion"]}, {"num": 31438, "title": "Add `KeyOf` and `ValueOf` definitions to built-in lib", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 28105, "title": "Add `PromiseResult` type to standard lib", "labels": ["In Discussion", "Suggestion"]}, {"num": 24323, "title": "Add `SharedWorker` to the library", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 41283, "title": "Add `trim` as new intrinsic for use with template literal types", "labels": []}, {"num": 32411, "title": "Add a \"keep-current\" label for PRs that causes the bot to keep them rebased onto `master`, if possible", "labels": ["Infrastructure"]}, {"num": 28682, "title": "Add a --strictNaNChecks option, and a NaN / integer / float type to avoid runtime NaN errors", "labels": ["Domain: Literal Types", "In Discussion", "Suggestion"]}, {"num": 31787, "title": "Add a code action to implement (overwritten) method from base class", "labels": ["In Discussion", "Suggestion"]}, {"num": 14909, "title": "add a constraint for immutable types", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 32008, "title": "Add a flag for disabling all extensions", "labels": ["API", "Domain: TSServer", "In Discussion", "Suggestion"]}, {"num": 8584, "title": "add a flag to disable () => void being subtype of () => a", "labels": ["Revisit", "Suggestion"]}, {"num": 32822, "title": "Add a flag to select that DOM is based on HTMLElement or (Plain)Element", "labels": ["Add a Flag", "Awaiting More Feedback", "Suggestion"]}, {"num": 35627, "title": "Add a Merge utility type", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 37028, "title": "Add a modifier for \"closed\" blocks and functions", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 7770, "title": "add a modifier for pure functions", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 24509, "title": "Add a Mutable type (opposite of Readonly) to lib.d.ts", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 32412, "title": "Add a new bot trigger for publishing prereleases from a PR", "labels": ["Infrastructure"]}, {"num": 35185, "title": "Add a new helper type `Primitive` for JSON", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 31394, "title": "Add a new type Awaitable", "labels": ["Needs Investigation"]}, {"num": 31891, "title": "Add a new type PublicOf", "labels": ["In Discussion", "Suggestion"]}, {"num": 13243, "title": "Add a refactoring that annotates an implicit or explicit any with a best guess type inferred from its use sites", "labels": ["Committed", "Domain: Quick Fixes", "Suggestion"]}, {"num": 37709, "title": "Add a stable module target for top-level await", "labels": ["Waiting for TC39"]}, {"num": 35554, "title": "Add a visibility mechanism similar to `friend` or `InternalsVisibleTo`", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 36035, "title": "Add a way to exclude file or directory watching", "labels": ["Fix Available", "Suggestion"]}, {"num": 40180, "title": "Add alternative to `extends` that performs shallow excess property checking", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 26531, "title": "Add an option to force source maps to use absolute paths?", "labels": ["Add a Flag", "In Discussion", "Suggestion"]}, {"num": 26684, "title": "Add API to query if SourceFile originated from typeRoots lookup", "labels": ["API", "In Discussion", "Suggestion"]}, {"num": 40602, "title": "Add argument types to `URL.createObjectURL`", "labels": ["Domain: lib.d.ts", "Experience Enhancement", "Suggestion"]}, {"num": 38956, "title": "Add auto-completion results to CSSStyleDeclaration.{setProperty,removeProperty}", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 18407, "title": "Add base class in lib.scripthost.d.ts for Automation objects", "labels": ["Domain: lib.d.ts", "In Discussion", "Suggestion"]}, {"num": 32529, "title": "Add broccoli-typescript-compiler to user test suite", "labels": ["Fix Available", "Infrastructure"]}, {"num": 17146, "title": "Add capability of transforming and emitting JSDoc comments", "labels": ["API", "In Discussion", "Suggestion"]}, {"num": 13082, "title": "add codefix for extracting an interface from an object literal", "labels": ["Awaiting More Feedback", "Domain: Refactorings", "Suggestion"]}, {"num": 37634, "title": "Add Command-Line Syntax-Only Validation", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 40797, "title": "Add compiler support to disable function hoisting", "labels": ["Out of Scope", "Suggestion"]}, {"num": 37317, "title": "add databases interface to IDBFactory", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 36185, "title": "Add diff chunk header lines to Git", "labels": ["Community Tooling", "Experience Enhancement", "GraceHopperOSD", "Suggestion", "help wanted"]}, {"num": 36324, "title": "Add disablePictureInPicture property to HTML5 Video Elements", "labels": ["Bug", "Domain: lib.d.ts"]}, {"num": 33218, "title": "Add ElementInternals, attachInternals from HTML standard", "labels": ["Bug", "Domain: lib.d.ts"]}, {"num": 22606, "title": "Add example of instance member initialization to TS Handbook", "labels": ["Docs"]}, {"num": 5794, "title": "Add explicit error to __extends when base class is undefined", "labels": ["Suggestion", "help wanted"]}, {"num": 37191, "title": "Add extract to parameter refactoring for JS/TS in vscode", "labels": ["Awaiting More Feedback", "Domain: Refactorings", "Suggestion"]}, {"num": 37771, "title": "Add feature to re-declare variable", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 36217, "title": "Add FormDataEvent", "labels": ["Bug", "Domain: lib.d.ts"]}, {"num": 16461, "title": "Add fourslash test for AsyncIterable", "labels": ["Infrastructure"]}, {"num": 35601, "title": "Add full type hover popup to VS Code commands", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 38884, "title": "Add getMappedTypeParameters to TypeChecker", "labels": ["In Discussion", "Suggestion"]}, {"num": 28525, "title": "Add HTML5 API Interfaces to Window", "labels": ["Domain: lib.d.ts", "In Discussion", "Suggestion"]}, {"num": 36706, "title": "Add IDBFactory.databases() method to lib.DOM", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 37326, "title": "Add Intl.Locale to es2020 lib", "labels": ["Revisit", "Suggestion"]}, {"num": 30744, "title": "Add JSDOC @module support for intellisense.", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 23215, "title": "Add JSDoc's @inheritDoc Support for Static Class Members for TypeScript", "labels": ["Bug", "Domain: JSDoc", "help wanted"]}, {"num": 18471, "title": "Add Length Parameter to typed arrays", "labels": ["Awaiting More Feedback", "Domain: lib.d.ts", "Suggestion"]}, {"num": 4844, "title": "Add minified version", "labels": ["Suggestion", "help wanted"]}, {"num": 38347, "title": "Add missing `toString` declarations for base types that have them", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 26217, "title": "Add missing member fix should work for missing function", "labels": ["Committed", "Domain: Quick Fixes", "Suggestion", "help wanted"]}, {"num": 35614, "title": "Add more telemetry for ATA", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 38913, "title": "Add named type arguments", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 37777, "title": "Add navigation path for going to JS node_modules definitions instead of .d.ts declarations", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 28289, "title": "Add new moduleResolution option: `yarn-pnp`", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 11604, "title": "Add new tslint rule to prevent calling Intl directly", "labels": ["Infrastructure"]}, {"num": 18985, "title": "Add node flags for blank lines before and after a node", "labels": ["API", "In Discussion", "Suggestion"]}, {"num": 8545, "title": "add object initializers", "labels": ["Needs More Info", "Suggestion"]}, {"num": 30855, "title": "Add option to include default typeRoots when overriding typeRoots", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 17151, "title": "Add plugins property on TS Server open request", "labels": ["Bug", "Domain: TSServer", "VS Code Tracked"]}, {"num": 27942, "title": "Add properties in JSDoc generation on destructuring in javascript file", "labels": ["Domain: JSDoc", "Domain: Quick Fixes", "In Discussion", "Suggestion"]}, {"num": 17181, "title": "Add pure and immutable keywords to ensure code has no unintended side-effects", "labels": ["In Discussion", "Suggestion"]}, {"num": 31163, "title": "Add quick fix to add explicit return type to method", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 38911, "title": "Add quick fix to convert type-only import into normal import", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 34539, "title": "Add quick fix to export unexported members to fix unresolved symbol errors", "labels": ["Awaiting More Feedback", "Domain: Quick Fixes", "Suggestion"]}, {"num": 38258, "title": "Add readonly for all possible function parameter for lib.dom.d.ts", "labels": ["Bug", "Domain: lib.d.ts"]}, {"num": 29274, "title": "Add ReadonlyDate ", "labels": ["Awaiting More Feedback", "Domain: lib.d.ts", "Suggestion"]}, {"num": 13199, "title": "Add refactoring action to annotate a variable or a function signature component with its inferred type", "labels": ["Awaiting More Feedback", "Domain: Refactorings", "Suggestion"]}, {"num": 15090, "title": "Add refactoring action to export selected JSX code as stateless component", "labels": ["Domain: Refactorings", "Experience Enhancement", "Suggestion"]}, {"num": 39368, "title": "Add refactoring option to convert between function declaration and function variable", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 25002, "title": "Add related error spans for getter/setters with different types", "labels": ["Domain: Error Messages", "Domain: Related Error Spans", "Experience Enhancement", "Suggestion"]}, {"num": 9224, "title": "Add rule typescript.format.insertSpaceAfterOpeningAndBeforeClosingNamedImport", "labels": ["Domain: Formatter", "Suggestion", "help wanted"]}, {"num": 10727, "title": "Add spread/rest higher-order types operator", "labels": ["Revisit", "Suggestion"]}, {"num": 23406, "title": "Add StyleSheetList and CSSRuleList to dom.iterable.d.ts", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 31267, "title": "Add support for @inheritdoc", "labels": ["Domain: JSDoc", "Needs Proposal", "Suggestion"]}, {"num": 22126, "title": "Add support for an `@export` tag", "labels": ["Domain: JSDoc", "Domain: JavaScript", "In Discussion", "Suggestion"]}, {"num": 2900, "title": "Add Support for design-time decorators", "labels": ["In Discussion", "Suggestion"]}, {"num": 13408, "title": "Add support for diagnostic severities", "labels": ["Needs Proposal", "Suggestion", "VS Code Tracked"]}, {"num": 39066, "title": "Add support for ES.Next private methods and private accessor properties", "labels": ["In Discussion", "Suggestion"]}, {"num": 26593, "title": "Add support for explicitly indicating that a function's return type is inferred.", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 37357, "title": "Add support for inferring tuple types generated from using the spread operator on const assertions", "labels": ["In Discussion", "Suggestion"]}, {"num": 6891, "title": "Add support for spaces in file paths on Windows systems", "labels": ["Bug", "help wanted"]}, {"num": 35749, "title": "Add support for URI style import", "labels": ["In Discussion", "Suggestion"]}, {"num": 30612, "title": "Add support for using declaration", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 40695, "title": "Add support of Item method (stage 3)", "labels": ["ES Next", "Fix Available", "Needs Investigation", "Suggestion"]}, {"num": 41238, "title": "Add target: ES2021", "labels": ["ES Next", "Fix Available", "Suggestion"]}, {"num": 38247, "title": "Add the Node that comes with Visual Studio as a NodePath fallback in the .targets file in the Microsoft.TypeScript.MSBuild Nuget package", "labels": ["Suggestion", "Visual Studio"]}, {"num": 32569, "title": "Add treat to user test suite", "labels": ["Infrastructure"]}, {"num": 38578, "title": "Add TS Server API for mapping TS file to output file", "labels": ["Committed", "Suggestion"]}, {"num": 40921, "title": "Add TS Server command for 'add all missing imports'", "labels": ["Domain: Quick Fixes", "Suggestion"]}, {"num": 40922, "title": "Add TS server command for removing all unused code in a file", "labels": ["Domain: Quick Fixes", "Suggestion"]}, {"num": 25121, "title": "Add type checking and refactoring support for example code (e.g. in JSDocs)", "labels": ["Domain: JSDoc", "Needs Proposal", "Suggestion"]}, {"num": 29548, "title": "Add type definitions for Files And Directories API", "labels": ["Domain: lib.d.ts", "In Discussion", "Suggestion", "help wanted"]}, {"num": 40179, "title": "Add type operators that can answer \"given function type T, what is the type of its return value when arguments P are passed in?\"", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 28753, "title": "Add type predicate to Object.is", "labels": ["Domain: lib.d.ts", "In Discussion", "Suggestion"]}, {"num": 33047, "title": "Add type to retrieve valid events of an EventTarget", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 33866, "title": "Add types for window.performance.getEntriesByType", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 38779, "title": "Add undefined to tuple index signature, or reject keys that are not \"keyof tuple\"", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 10223, "title": "Add watcherMessage option", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 33094, "title": "Add way force TS Server to use a specific set of tsconfig/jsconfigs", "labels": ["Rescheduled", "Suggestion", "VS Code Tracked"]}, {"num": 18482, "title": "Add WebVR API to lib.d.ts", "labels": ["Domain: lib.d.ts", "Revisit", "Suggestion", "help wanted"]}, {"num": 37227, "title": "Add {root} helper for tsconfig.json (for avoiding multiple ../../)", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 39401, "title": "Adding a compilerOption to disable error on property override accessor in 4.0.beta", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 26725, "title": "Adding a string index signature to `string` triggers a comparison depth error when using a reverse mapped type", "labels": ["Bug"]}, {"num": 16119, "title": "Adding an import with quick fix should respect sort order", "labels": ["Bug", "Domain: Quick Fixes"]}, {"num": 41066, "title": "Adding an overload breaks inference of compositional functions", "labels": ["Needs Investigation"]}, {"num": 29060, "title": "Adding generic parameter to a lambda function removes typing from the function argument", "labels": ["Bug", "Domain: Contextual Types"]}, {"num": 28021, "title": "Adding overloads breaks return type inference", "labels": ["In Discussion", "Suggestion"]}, {"num": 17204, "title": "addition assignment behaves surprisingly with union types", "labels": ["Bug"]}, {"num": 30914, "title": "Additive inverse of number literals", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 39882, "title": "Add\u00a0typed\u00a0overloads to\u00a0`Object.create`", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 30339, "title": "Adjacent .d.ts file stops working when using import path aliases", "labels": ["Bug"]}, {"num": 11074, "title": "Adjust cursor position on new line or don't emit empty spaces", "labels": ["Bug", "VS Code Tracked"]}, {"num": 35480, "title": "Adjust lookahead for `async of` for any upcoming changes", "labels": ["ES Next", "Waiting for TC39"]}, {"num": 39068, "title": "Adjust type declarations of build in Javascript classes to reflect Javascript object/class hierarchy", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 16148, "title": "Affine types / ownership system", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 24459, "title": "After Transformer called with a Bundle, not a Source file", "labels": ["API", "Bug", "help wanted"]}, {"num": 39445, "title": "after x[ii] && ..., it should be clear that x[ii] is not falsy", "labels": ["Design Limitation"]}, {"num": 39705, "title": "aka.ms/tsconfig.json doesn't resolve in tsconfig.js init", "labels": ["Website"]}, {"num": 30952, "title": "Alias for TypeScript declaration emitting", "labels": ["Needs More Info"]}, {"num": 35907, "title": "All semantic operations break after go to definition", "labels": ["Bug", "Needs More Info", "Rescheduled"]}, {"num": 16607, "title": "Allow \"Compiler Plugins\"", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 40652, "title": "Allow \"infer\" declaration in template literal type to be inferred as number or boolean", "labels": ["Declined", "Suggestion"]}, {"num": 30611, "title": "Allow \"T extends enum\" generic constraint", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 32380, "title": "Allow '--noEmit' to override  'emitDeclarationOnly' from config.", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 36060, "title": "Allow .d.ts files to represent anonymous class expressions with `private` members", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 36282, "title": "Allow `#`-private names in parameter property positions", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 32798, "title": "Allow `== null` to narrow `unknown` to `null | undefined`", "labels": ["Bug"]}, {"num": 30932, "title": "Allow `export type Foo;` as valid syntax", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 38038, "title": "Allow `this` in constructor parameter", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 8363, "title": "Allow `this` in static initializers", "labels": ["Awaiting More Feedback", "ES Next", "Suggestion"]}, {"num": 420, "title": "Allow a module to implement an interface", "labels": ["Suggestion", "help wanted"]}, {"num": 26011, "title": "Allow ability to do an in-place override (_not_ extend) of interface properties", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 35986, "title": "Allow accessors to support inline generics for this", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 14789, "title": "Allow an interface in the JSX namespace to specify the element class type", "labels": ["In Discussion", "Suggestion"]}, {"num": 7596, "title": "Allow ArrayLike as a spread source", "labels": ["ES6", "In Discussion", "Suggestion"]}, {"num": 33595, "title": "Allow async functions to return union type T | Promise<T>", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 12607, "title": "Allow augmentation of re-exported module", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 36177, "title": "Allow augmentation of the async function prototype", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 37181, "title": "Allow binding generic functions to a given type", "labels": ["In Discussion", "Suggestion"]}, {"num": 36439, "title": "Allow C++-style visibility sections in class bodies", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 33685, "title": "Allow circular references of project references", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 18283, "title": "Allow class inheritance in ambient contexts, even with a base private constructor", "labels": ["Committed", "Suggestion", "help wanted"]}, {"num": 1213, "title": "Allow classes to be parametric in other parametric classes", "labels": ["Suggestion", "help wanted"]}, {"num": 6804, "title": "Allow compile-time computable expressions to initialize ambient `const`s", "labels": ["Effort: Moderate", "Suggestion", "help wanted"]}, {"num": 36126, "title": "Allow conditionally setting optional properties in a mapped type", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 32296, "title": "Allow configuration of missing property quickfix", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 37960, "title": "Allow configuration of NodeBuilderFlags.AllowNodeModulesRelativePaths for un-distributed mono repos", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 32420, "title": "Allow configuration of ts.server.maxFileSize", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 32401, "title": "Allow constant strings as string literals for dynamic import statements.", "labels": ["Needs Investigation"]}, {"num": 30584, "title": "allow constructing URLSearchParams directly from FormData", "labels": ["Bug", "Domain: lib.d.ts"]}, {"num": 36029, "title": "Allow creating contantly typed Map which has immutable defined set of keys", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 30123, "title": "Allow currying of generics", "labels": ["Needs More Info"]}, {"num": 31256, "title": "Allow custom keywords to make it easy for children in different languages to contact typescript for simple computational experiments", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 12613, "title": "Allow declaring properties inside class constructors", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 7318, "title": "allow decorators for functions", "labels": ["Domain: Decorators", "In Discussion", "Suggestion"]}, {"num": 6480, "title": "Allow defining static index signature", "labels": ["Effort: Moderate", "Suggestion", "help wanted"]}, {"num": 2226, "title": "Allow different syntactic elements have different indentation", "labels": ["Suggestion", "help wanted"]}, {"num": 40167, "title": "Allow export type for module = none", "labels": ["In Discussion", "Suggestion"]}, {"num": 16936, "title": "Allow extending multiple interfaces with different, but compatible types", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 20723, "title": "Allow extending native built-in classes in downlevel compilation", "labels": ["In Discussion", "Suggestion"]}, {"num": 31843, "title": "Allow extending types referenced through interfaces", "labels": ["In Discussion", "Suggestion"]}, {"num": 18924, "title": "Allow Extract Constant in expression-bodied arrow functions", "labels": ["Domain: Refactorings", "Experience Enhancement", "Suggestion"]}, {"num": 35611, "title": "Allow folding of JSDoc comments", "labels": ["Domain: Outlining", "Effort: Moderate", "Suggestion", "help wanted"]}, {"num": 27386, "title": "Allow for dropping tsconfig.json in arbitrary folder and specifying the source root with tsc command ", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 16599, "title": "Allow functions to implicitly perform interface merging on class inputs", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 33388, "title": "Allow hooks for watch events", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 29130, "title": "Allow identifiers in types to resolve to unit-typed values", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 31581, "title": "Allow identifying readonly properties in mapped types", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 28825, "title": "Allow ignoring certain TS suggestion-level diagnostic codes", "labels": ["In Discussion", "Suggestion"]}, {"num": 40344, "title": "Allow importing both type entity and value entity for \"const enum\" through \"import type\"", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 40337, "title": "Allow importModuleSpecifier: \"relative\" to be overridden for explicitly configured \"paths\" in a jsconfig/tsconfig", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 40198, "title": "Allow incremental compilation without emitting updated tsBuildInfo file", "labels": ["Needs More Info"]}, {"num": 1863, "title": "Allow indexing with symbols", "labels": ["Effort: Moderate", "Suggestion", "help wanted"]}, {"num": 32044, "title": "Allow inference of class generics when declaring an interface ", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 38968, "title": "Allow inferring generic function types \"as const\"", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 25719, "title": "Allow inferring rest element types in conditional types involving tuples", "labels": ["In Discussion", "Suggestion"]}, {"num": 32277, "title": "Allow Inifinity and -Infinity as number literal types", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 30620, "title": "allow inline intellisense comment on es6 export", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 6474, "title": "Allow inline type predicates", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 26916, "title": "Allow intersection type guards for multiple parameters", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 38367, "title": "Allow JSX element tags to be symbols", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 26331, "title": "allow listing source files in a strict order", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 29056, "title": "Allow local .js/.ts files to be typed by their corresponding .d.ts file", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 38914, "title": "allow local module type declarations on separate files (similar to C .h files)", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 29920, "title": "Allow mapped tuples to have behaviour based on index", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 30169, "title": "Allow marking functions in interfaces as callback / non-callable", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 11117, "title": "Allow method type guards", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 28448, "title": "Allow minimal type checking of JavaScript files", "labels": ["Add a Flag", "Domain: JavaScript", "In Discussion", "Suggestion"]}, {"num": 37143, "title": "Allow mixin constructor have parameters before rest parameter", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 25720, "title": "Allow more constructs to work as type guards for `unknown`", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 17713, "title": "Allow narrowing generic type to single element of union type", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 37224, "title": "Allow narrowing type based on others properties when creating a new object", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 36288, "title": "Allow non returning functions to have contextually required `undefined` return type", "labels": ["In Discussion", "Suggestion"]}, {"num": 31493, "title": "Allow non-inherited static class members.", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 17588, "title": "Allow object types to have property-like associated types", "labels": ["In Discussion", "Suggestion"]}, {"num": 33750, "title": "Allow overload signatures when writing class property initializers", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 33407, "title": "Allow overrides in tsconfig", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 12212, "title": "Allow pass through of class-properties", "labels": ["Bug", "ES Next", "help wanted"]}, {"num": 40459, "title": "Allow passing a TypeReference aliasing a ModuleDeclaration as the argument to an ImportTypeNode", "labels": ["In Discussion", "Suggestion"]}, {"num": 29245, "title": "Allow paths to be masked and captured by regex", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 31035, "title": "allow per file compilerOptions", "labels": ["Suggestion", "Too Complex"]}, {"num": 25238, "title": "Allow Program#getSemanticDiagnostics to ignore @ts-ignore", "labels": ["API", "In Discussion", "Suggestion"]}, {"num": 25613, "title": "Allow regular flags to mix with --build", "labels": ["In Discussion", "Suggestion"]}, {"num": 31160, "title": "Allow returning types from functions", "labels": ["Needs More Info"]}, {"num": 33325, "title": "Allow running extract refactoring on selected statement even when trailing semicolon is not included in selection", "labels": ["Bug", "Domain: Refactorings"]}, {"num": 28317, "title": "Allow setters to return", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 10571, "title": "Allow skipping some generics when calling a function with multiple generics", "labels": ["In Discussion", "Suggestion"]}, {"num": 686, "title": "Allow specifing implements for automatic types", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 33892, "title": "Allow specifying interface implements clauses for the static side of classes", "labels": ["In Discussion", "Suggestion"]}, {"num": 16597, "title": "Allow specifying only a subset of generic type parameters explicitly instead of all vs none", "labels": ["In Discussion", "Suggestion"]}, {"num": 27298, "title": "Allow specifying regex for module alias paths", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 34665, "title": "Allow static members in abstract classes to reference type parameters", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 24865, "title": "allow storing results of narrowing in booleans for further narrowing", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 7285, "title": "Allow subclass constructors without super() call", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 38150, "title": "Allow this in type guards when type of this is explicitly specified in method signature", "labels": ["In Discussion", "Suggestion"]}, {"num": 27575, "title": "Allow to add a call signature to the Mapped Type OR to remove all `Function.prototype` methods", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 27387, "title": "Allow to explicitly pass parameter types via JSDoc", "labels": ["Domain: JSDoc", "Domain: JavaScript", "In Discussion", "Suggestion", "checkJs"]}, {"num": 18256, "title": "Allow to extract code containing `return` statement if it's at the end of a function", "labels": ["Domain: Refactorings", "Experience Enhancement", "Suggestion"]}, {"num": 39324, "title": "Allow to find references of the actual type", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 39583, "title": "Allow to overwrite generic templates", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 27594, "title": "Allow to specify return type of constructor", "labels": ["In Discussion", "Suggestion"]}, {"num": 21984, "title": "Allow trailing commas in type arguments", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 38370, "title": "Allow trailing lines in multiline comment directives", "labels": ["Bug", "Rescheduled"]}, {"num": 27379, "title": "Allow tsconfig.json when input files are specified", "labels": ["In Discussion", "Suggestion"]}, {"num": 40027, "title": "Allow tsconfig.yaml in addition to tsconfig.json", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 28939, "title": "Allow tsserver to log to stderr instead of logfile", "labels": ["In Discussion", "Suggestion"]}, {"num": 35017, "title": "Allow type aliases to reference themselves in type argument positions", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 20024, "title": "Allow type annotation on catch clause variable", "labels": ["Add a Flag", "Awaiting More Feedback", "Suggestion"]}, {"num": 41034, "title": "Allow type assertion for \"super\" keyword in method.", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 30342, "title": "Allow type assertions to consider typed index signatures", "labels": ["In Discussion", "Suggestion"]}, {"num": 13035, "title": "Allow type casts around shorthand property names", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 29432, "title": "Allow Type Checking to be Extended (into Tagged Templates, for example)", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 25879, "title": "Allow type variables to be constrained singleton, causing lookup into a non-generic mapped type to substitute", "labels": ["In Discussion", "Suggestion"]}, {"num": 38866, "title": "Allow type-only named re-exports along with assigned export in the same file", "labels": ["In Discussion", "Suggestion"]}, {"num": 23455, "title": "Allow Typescript to detect when imported html relative paths are incorrect", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 10907, "title": "Allow UMD module exports in source files", "labels": ["In Discussion", "Suggestion"]}, {"num": 38342, "title": "Allow usage of `Reflect.get()` by returning `unknown` instead of `any`", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 29378, "title": "Allow use of infer in extends clause of generic type parameter", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 35387, "title": "Allow using type parameters and return types with overloaded class constructors", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 37582, "title": "allow voluntary .ts suffix for import paths", "labels": ["In Discussion", "Suggestion"]}, {"num": 28990, "title": "allow wildcards in getSupportedCodeFixes", "labels": ["API", "In Discussion", "Suggestion"]}, {"num": 2361, "title": "Allow wrapped values to be used in place of primitives.", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 36557, "title": "Allowing relative paths in triple slash \"types\" directives generates broken definitions", "labels": ["Domain: Declaration Emit", "Needs Investigation", "Rescheduled"]}, {"num": 33699, "title": "Allowing subsequent property declarations of compatible types", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 15995, "title": "AllowJs and duplicate identifier", "labels": ["Awaiting More Feedback", "Domain: JavaScript", "Suggestion"]}, {"num": 9474, "title": "allowJs option with namespaces", "labels": ["Domain: JavaScript", "Needs Proposal", "Suggestion"]}, {"num": 35505, "title": "allowJS prevents transpiling of .ts files", "labels": ["Needs More Info"]}, {"num": 40345, "title": "allowJs should default to true", "labels": ["Breaking Change", "Needs More Info", "Suggestion"]}, {"num": 37469, "title": "Allow\u00a0functions to\u00a0have `unique\u00a0symbol` as\u00a0the\u00a0return\u00a0type", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 30453, "title": "Alternate syntax for function overloads", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 8277, "title": "Always allow code before super call when it does not use \"this\"", "labels": ["Effort: Moderate", "Suggestion", "help wanted"]}, {"num": 40450, "title": "Always verify import path", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 11243, "title": "Ambient class augmentation with export =", "labels": ["Bug"]}, {"num": 30490, "title": "Ambient imports are not removed when importing an interface from a package & emitDecoratorMetadata is enabled", "labels": ["Bug"]}, {"num": 41071, "title": "Ambient types aren't detected in large codebase", "labels": ["Needs Investigation"]}, {"num": 28760, "title": "AMD Module Names Directives Rewrite CommonJS require's.", "labels": ["Bug"]}, {"num": 4004, "title": "amd reexport symbols", "labels": ["Bug", "Effort: Moderate", "help wanted"]}, {"num": 8769, "title": "An easier way to create new records from existing records that have readonly properties", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 28519, "title": "An index signature parameter type with types extends string or number.", "labels": ["In Discussion", "Suggestion"]}, {"num": 26347, "title": "Analysis support for metaprogramming decorators", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 20494, "title": "animationend and animationstart not in lib.dom.d.ts ?", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 11498, "title": "Annotate immediately-invoked functions for inlining flow control analysis", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 6123, "title": "Annoying autocompletions of Generics", "labels": ["Bug", "Visual Studio"]}, {"num": 28364, "title": "Annoyingly useless Symbol completions", "labels": ["Bug", "Domain: Completion Lists", "Effort: Moderate", "help wanted"]}, {"num": 17139, "title": "Anonymous class missing references / missing in implementations", "labels": ["In Discussion", "Suggestion", "VS Code Tracked"]}, {"num": 19313, "title": "Anonymous function expressions aren't covered for 'infer from usage'", "labels": ["Bug", "Domain: Quick Fixes"]}, {"num": 37100, "title": "Any type is inferred when function input parameter is set to some value", "labels": ["Bug"]}, {"num": 17753, "title": "Apart from watching config file for the project updates, we probably should also watch extended config file", "labels": ["Bug"]}, {"num": 28026, "title": "API about Identifier's scope", "labels": ["API", "Experience Enhancement", "Suggestion"]}, {"num": 40090, "title": "API Suggestion: Add function for getting syntax kind name from syntax kind", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 20878, "title": "API: allow custom getFileSystemEntries in DirectoryStructureHost.readDirectory", "labels": ["API", "In Discussion", "Suggestion"]}, {"num": 28365, "title": "API: Allow passing TypeScript.SourceFile / AST directly to transpileModule", "labels": ["API", "In Discussion", "Suggestion"]}, {"num": 33875, "title": "API: expose getOptionalType and getNonOptionalType", "labels": ["API", "In Discussion", "Suggestion"]}, {"num": 22269, "title": "API: expose IntrinsicType", "labels": ["API", "In Discussion", "Suggestion"]}, {"num": 31296, "title": "API: expose isReadonlySymbol", "labels": ["API", "In Discussion", "Suggestion"]}, {"num": 24706, "title": "API: incorrect declarations in types.ts", "labels": ["Breaking Change", "Infrastructure", "help wanted"]}, {"num": 40542, "title": "Apply function generics as part of type definition", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 24780, "title": "Apply interface to part of object literal", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 30994, "title": "Are namespaces legacy?", "labels": ["Discussion"]}, {"num": 13167, "title": "Are there jsdoc supported in salsa to polyfill ?", "labels": ["Awaiting More Feedback", "Domain: JavaScript", "Suggestion"]}, {"num": 39208, "title": "Argument of any no longer matches `<T>(x: T) => T` in overload set", "labels": ["Bug", "Rescheduled"]}, {"num": 30728, "title": "Argument of type 'T[T[K] extends T[] ? K : never]' is not assignable to parameter of type 'T[]'.", "labels": ["Design Limitation"]}, {"num": 29369, "title": "Argument types of functions with multiple declarations should be smarter.", "labels": ["Awaiting More Feedback", "Domain: Control Flow", "Suggestion"]}, {"num": 31599, "title": "Arobases in an example section of a jsdoc is considered a jsdoc section", "labels": ["Bug"]}, {"num": 10886, "title": "Array inheritance in ES6 declaration file (lib.es6.d.ts)", "labels": ["Domain: lib.d.ts", "Suggestion", "help wanted"]}, {"num": 38380, "title": "Array literal of union type should be convertible to union of arrays", "labels": ["Bug"]}, {"num": 36554, "title": "Array method definition revamp: Use case collection", "labels": ["Meta-Issue", "Needs Proposal", "Suggestion"]}, {"num": 19508, "title": "Array of functions return types not combined", "labels": ["Needs More Info"]}, {"num": 32761, "title": "Array of tuple literal not assignable to iterable of tuple with --lib es2015 -t es5", "labels": ["Needs Investigation"]}, {"num": 30686, "title": "Array reduce callback (reducer) and default parameters", "labels": ["Design Limitation"]}, {"num": 35965, "title": "Array rest of readonly tuple type incorrectly preserves readonly modifier", "labels": ["In Discussion", "Suggestion"]}, {"num": 19956, "title": "Array typed as `never[]`even when assigned to `number[]`", "labels": ["Bug"]}, {"num": 40463, "title": "Array#map() is not callable on type-guarded array", "labels": ["Has Repro", "Needs Investigation"]}, {"num": 33700, "title": "Array.isArray refinement loses the array's type", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 28837, "title": "Array.length type guard for array spreading", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 19456, "title": "Array.prototype.filter doesn't require callback to return", "labels": ["Awaiting More Feedback", "Domain: lib.d.ts", "Suggestion"]}, {"num": 40844, "title": "Array.prototype.some() doesn't cause type narrowing", "labels": ["Design Limitation"]}, {"num": 18286, "title": "Array.prototype.sort make compareFn required in lib.d.ts", "labels": ["Domain: lib.d.ts", "Experimentation Needed", "Suggestion"]}, {"num": 33117, "title": "Arrow function generics are resolved", "labels": ["Needs Investigation"]}, {"num": 37850, "title": "Assert while trying to report error about a bad tsconfig file", "labels": ["Bug", "GraceHopperOSD", "help wanted"]}, {"num": 39361, "title": "Assertion function methods complains about missing annotation even with explicit annotation", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 36931, "title": "Assertion functions don't work when defined as methods", "labels": ["Design Limitation"]}, {"num": 35004, "title": "Assertion functions don't work with wildcard imports", "labels": ["Bug"]}, {"num": 27524, "title": "Assign a known symbol to a constant should retain type information", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 24834, "title": "Assign defaults to generic types in lib.d.ts", "labels": ["In Discussion", "Suggestion"]}, {"num": 22781, "title": "Assign Enums to Enums?", "labels": ["In Discussion", "Suggestion"]}, {"num": 6541, "title": "Assignability error reporting should have a more specific error for unions", "labels": ["Bug", "Domain: Error Messages", "help wanted"]}, {"num": 27118, "title": "Assignability rule for conditional types needs to require check types and distributivity to be identical", "labels": ["Committed", "Rescheduled", "Suggestion"]}, {"num": 35162, "title": "Assigning a callable return type of a generic function directly to some generic parameter results in error", "labels": ["Needs Investigation"]}, {"num": 38445, "title": "Assigning array values by index treats Array<A> | Array<B> as Array<A | B>", "labels": ["In Discussion", "Suggestion"]}, {"num": 35824, "title": "Assigning to a string fails if it was previously compared to an enum", "labels": ["Bug", "Fix Available", "Rescheduled"]}, {"num": 33942, "title": "Assigning to a unwrapped type doesn't work on Generics but works with Interface", "labels": ["Design Limitation"]}, {"num": 33911, "title": "Assigning to common property (with different types) of a union type is incorrectly allowed", "labels": ["Design Limitation"]}, {"num": 40323, "title": "Assignment contextual typing doesn't work consistently for overloaded function interfaces versus function union types", "labels": ["Design Limitation"]}, {"num": 37883, "title": "Assignment expression fails to narrow", "labels": ["Committed", "Effort: Moderate", "Suggestion", "help wanted"]}, {"num": 26397, "title": "Assignment of argument to argument loses deduced typing", "labels": ["Bug"]}, {"num": 2215, "title": "Assignment of string literal indexed enum member passes compilation but results in invalid javascript", "labels": ["Bug", "help wanted"]}, {"num": 36843, "title": "Assignment to constant variables imported from ES6 modules allowed", "labels": ["Bug"]}, {"num": 32311, "title": "Assignment to type alias containing `T[keyof T]` property does not respects variance", "labels": ["Design Limitation"]}, {"num": 22446, "title": "Assignments to global objects in Javascript should be global declarations", "labels": ["Bug", "Effort: Moderate", "Experience Enhancement", "help wanted"]}, {"num": 40689, "title": "Associate HTML Elements and EventMaps in a map", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 24350, "title": "Assume arity of tuples when declared as literal", "labels": ["Revisit", "Suggestion"]}, {"num": 41242, "title": "async await generator triggers Chrome Web Store's Obfuscation violation", "labels": ["External"]}, {"num": 29361, "title": "Async LanguageServiceHost", "labels": ["API", "In Discussion", "Suggestion"]}, {"num": 29100, "title": "Async Transformers", "labels": ["API", "Awaiting More Feedback", "Suggestion"]}, {"num": 36687, "title": "async, await, loop, implicitly has type 'any' because it does not have a type annotation and is referenced directly or indirectly in its own initializer.", "labels": ["Design Limitation"]}, {"num": 11799, "title": "async/await not working on IE6-IE8 in @next", "labels": ["Bug"]}, {"num": 40047, "title": "Async/Await overrides variables", "labels": ["Bug", "Domain: JS Emit", "Domain: Transforms"]}, {"num": 13376, "title": "async/await: nowait keyword?", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 37681, "title": "Asynchronous type guards and assertion signatures", "labels": ["In Discussion", "Suggestion"]}, {"num": 20993, "title": "ATA inclusion in JS projects should include bundled .d.ts files from NPM packages", "labels": ["Bug"]}, {"num": 34778, "title": "Attempt to more-frequently use local aliases when printing out types", "labels": ["Domain: Type Display", "Needs Proposal", "Suggestion"]}, {"num": 28308, "title": "AudioWorkletProcessor type definition is missing", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 18877, "title": "Augmenting external module that is re-exported?", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 11865, "title": "auto align colons in object literals, variables, and equals like WebStorm", "labels": ["Awaiting More Feedback", "Suggestion", "VS Code Tracked"]}, {"num": 36616, "title": "Auto Complete does not work when project very large.", "labels": ["Needs More Info"]}, {"num": 32560, "title": "Auto fix compilerOptions Lib", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 29450, "title": "Auto fixable quick fixes", "labels": ["API", "Domain: Quick Fixes", "Domain: TSServer", "Experience Enhancement", "Suggestion"]}, {"num": 21860, "title": "auto import always uses relative (to the current file) module paths in presense of baseUri", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 36730, "title": "Auto import generates wrong module specifier for `a/index.ts` when `a.ts` exists", "labels": ["Bug", "Domain: Auto-import"]}, {"num": 39821, "title": "Auto import incorrectly imports 'null'", "labels": ["Bug"]}, {"num": 35792, "title": "auto import not working properly", "labels": ["Needs More Info"]}, {"num": 32174, "title": "Auto import suggestions heavily slows intellisense", "labels": ["Bug"]}, {"num": 39778, "title": "Auto imports not working with project references ", "labels": ["Needs Investigation"]}, {"num": 26948, "title": "Auto type reference directives do not lowercase the typing name", "labels": ["Needs Investigation"]}, {"num": 39435, "title": "auto-complete not work but type check still working", "labels": ["Bug", "Domain: Completion Lists"]}, {"num": 39454, "title": "Auto-completions from global type definitions don't work without initial text", "labels": ["Bug", "Domain: Completion Lists"]}, {"num": 36469, "title": "Auto-format incorrectly formats multi-line arrays", "labels": ["Bug", "Domain: Formatter"]}, {"num": 34704, "title": "Auto-import shouldn't work on `undefined`", "labels": ["Bug"]}, {"num": 28007, "title": "Auto-import triggers for reserved keyword exports", "labels": ["Bug", "Domain: Quick Fixes"]}, {"num": 23830, "title": "Auto-importing modules as namespaces?", "labels": ["Domain: Completion Lists", "Domain: Quick Fixes", "Effort: Moderate", "Suggestion", "help wanted"]}, {"num": 10335, "title": "Auto-indentation problem with promise blocks", "labels": ["Bug", "Domain: Formatter", "VS Code Tracked", "help wanted"]}, {"num": 25371, "title": "auto-suggest the name of argument based off the name of the parameter", "labels": ["Awaiting More Feedback", "Domain: Completion Lists", "Suggestion"]}, {"num": 30148, "title": "Autocomple import ignore rootDirs", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 30147, "title": "Autocomple import parent dir wrong when rootDirs is defined", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 41088, "title": "Autocomplete 'duplicates' path when typing part of the path and then autocomplete", "labels": ["Bug", "Domain: Completion Lists", "Effort: Moderate", "help wanted"]}, {"num": 40869, "title": "Autocomplete doesn't work if typescript in devDependencies in monorepos root package.json", "labels": ["Needs Investigation"]}, {"num": 26384, "title": "Autocomplete fails on inferred type", "labels": ["Bug", "Domain: Completion Lists"]}, {"num": 28662, "title": "Autocomplete on extends keyof generic", "labels": ["Domain: Completion Lists", "Experience Enhancement", "Suggestion"]}, {"num": 29140, "title": "Autocomplete: Prefer matches with the same capitalisation", "labels": ["Domain: Completion Lists", "In Discussion", "Suggestion"]}, {"num": 14841, "title": "Autocompletion for mapped type with inferred keys and values all the same.", "labels": ["Domain: Completion Lists", "Experience Enhancement", "Suggestion"]}, {"num": 39438, "title": "autocompletion of object fields in union type broken when discriminating fields have type undefined ", "labels": ["Bug", "Domain: Completion Lists"]}, {"num": 40700, "title": "Autofill object literal in IDE", "labels": ["Domain: Completion Lists", "In Discussion", "Suggestion"]}, {"num": 36864, "title": "Automate DefinitelyTyped and ATA infrastructure during nightly publishes", "labels": ["Infrastructure"]}, {"num": 36863, "title": "Automate release branch creation", "labels": ["Infrastructure", "Rescheduled"]}, {"num": 33345, "title": "Automated Migration for Breaking Changes to the Type System", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 31417, "title": "Automatic `skipDefaultLibCheck` (and potentially `skipLibCheck`)", "labels": ["Domain: Performance", "Domain: lib.d.ts", "In Discussion", "Suggestion"]}, {"num": 31907, "title": "Automatic Backward/Forward .d.ts compatibility system", "labels": ["Suggestion", "Too Complex"]}, {"num": 10763, "title": "Automatic Brace Completion Should Not Complete `<` in Js Files", "labels": ["Bug", "Visual Studio"]}, {"num": 34876, "title": "Automatic Brace Insertion (ABI) is undesirable", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 6012, "title": "automatic module resolution for JPSM packages", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 38325, "title": "Automatic multi-file namespace references in AMD/System modules are buggy in complicated situations", "labels": ["Needs Investigation"]}, {"num": 37723, "title": "Automatic Type Acquisition does not work", "labels": ["Needs More Info"]}, {"num": 37826, "title": "Automatic Type Acquisition should give the ability to prioritize jsconfig.json types over node_modules types", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 34917, "title": "Automatic type package resolving doesn\u2019t respect paths defined", "labels": ["Needs Investigation"]}, {"num": 27670, "title": "Automatic typings install does not trigger project refresh", "labels": ["Bug"]}, {"num": 5997, "title": "Automatically inserting JSX closing element in TypeScript JSX file", "labels": ["Suggestion", "Visual Studio"]}, {"num": 31637, "title": "Automatically Update html and *css modules", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 21017, "title": "Autos should display returned results of last function", "labels": ["Suggestion", "Visual Studio"]}, {"num": 35300, "title": "Avoid elaborating missing properties on common container types", "labels": ["Domain: Error Messages", "Effort: Moderate", "Experience Enhancement", "Rescheduled", "help wanted"]}, {"num": 8600, "title": "Avoid including 'index' (or equivalent) as part of module name during error reporting", "labels": ["Bug", "Domain: Error Messages", "help wanted"]}, {"num": 35735, "title": "Avoid listing missing properties on types with only call/construct signatures", "labels": ["Domain: Error Messages", "Experience Enhancement", "GraceHopperOSD", "Suggestion", "good first issue", "help wanted"]}, {"num": 35250, "title": "Avoid mentioning source types of object literals in error messages", "labels": ["Domain: Error Messages", "Experience Enhancement"]}, {"num": 31072, "title": "Avoid nesting IIFE for nested namespaces", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 35253, "title": "Avoid printing out expected/actual types in JSX attributes unless a spread is provided", "labels": ["Domain: Error Messages", "Effort: Moderate", "Experience Enhancement", "help wanted"]}, {"num": 38847, "title": "await inside a non-async function should be a parsing error, even in JS with \"checkJs\": false", "labels": ["Bug"]}, {"num": 28811, "title": "await keyword still not included in suggestions", "labels": ["Bug", "Domain: Completion Lists"]}, {"num": 32005, "title": "Babel-generated module with exports[\"default\"] not importable", "labels": ["Bug"]}, {"num": 31697, "title": "Backticks around module names in module declarations", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 34893, "title": "Bad `.d.ts` emit for class expression on `module.exports", "labels": ["Bug", "Domain: Declaration Emit", "Domain: JavaScript"]}, {"num": 28541, "title": "Bad auto closing jsx tag returned for if you have an unclosed element", "labels": ["Domain: Completion Lists", "Domain: JSX/TSX", "Experience Enhancement", "Suggestion"]}, {"num": 16645, "title": "Bad automatic formatting when filling in type argument as object literal", "labels": ["Bug", "Domain: Formatter", "help wanted"]}, {"num": 40540, "title": "Bad declaration emit for CommonJS element-access export of identifier with space asserts", "labels": ["Bug", "Domain: Declaration Emit"]}, {"num": 24210, "title": "Bad error message for enum initializers", "labels": ["Bug", "Domain: Error Messages", "good first issue", "help wanted"]}, {"num": 35989, "title": "Bad error message when trying to access protected property of super class type", "labels": ["Domain: Error Messages", "Experience Enhancement", "GraceHopperOSD", "good first issue", "help wanted"]}, {"num": 26618, "title": "Bad formatting adding multiple properties to start of object literal", "labels": ["Bug", "Domain: Formatter", "help wanted"]}, {"num": 23781, "title": "Bad formatting after `export {};`", "labels": ["Bug", "Domain: Formatter", "help wanted"]}, {"num": 18846, "title": "Bad formatting extracting function out of single-line function", "labels": ["Bug", "Domain: Formatter", "Domain: Refactorings", "help wanted"]}, {"num": 18797, "title": "Bad formatting when removing unused type parameter in lambda", "labels": ["Bug", "Domain: Formatter", "help wanted"]}, {"num": 28849, "title": "Badly hoisted variable declaration on tslib import", "labels": ["Bug"]}, {"num": 16945, "title": "bang operator resets type inference", "labels": ["Bug"]}, {"num": 35131, "title": "baseUrl definition in tsconfig.json leads to compilation error", "labels": ["Needs More Info"]}, {"num": 39695, "title": "baseUrl is used to create reference type path in declaration file", "labels": ["Bug"]}, {"num": 40410, "title": "Behavior change when lowering async function which throws during argument evaluation", "labels": ["Bug"]}, {"num": 31977, "title": "better autocompletion for dicriminated union as tuples", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 17689, "title": "Better comment emit on tokens", "labels": ["Domain: Comment Emit", "Meta-Issue"]}, {"num": 25567, "title": "Better compile time polyfill support by splitting lib .d.ts files into smallest segments possible", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 7705, "title": "Better display representation for intersection types", "labels": ["Effort: Difficult", "Suggestion", "help wanted"]}, {"num": 21050, "title": "Better error for semicolon after decorator", "labels": ["Domain: Error Messages", "Suggestion", "help wanted"]}, {"num": 9597, "title": "Better error recovery after `.` followed by `return`", "labels": ["Bug"]}, {"num": 41112, "title": "Better errors for unparenthesized object destructuring assignments", "labels": ["Domain: Error Messages", "Effort: Moderate", "Experimentation Needed", "help wanted"]}, {"num": 28413, "title": "Better handling for manually created source files and compiler APIs", "labels": ["API", "Needs Proposal", "Suggestion"]}, {"num": 4032, "title": "Better handlng of hyphenated properties", "labels": ["API", "Suggestion", "help wanted"]}, {"num": 38603, "title": "Better intellisense for unions of tuple types", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 9045, "title": "Better parsing experience for TSX", "labels": ["Bug", "help wanted"]}, {"num": 12798, "title": "Better propagation of type predicate signatures", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 30658, "title": "Better support for global registration patterns", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 38381, "title": "Better type printing for JSX IntrinsicElements", "labels": ["In Discussion", "Suggestion"]}, {"num": 18403, "title": "Better union error", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 38980, "title": "BigInt constructor should not accept any type", "labels": ["Experimentation Needed", "Suggestion", "good first issue", "help wanted"]}, {"num": 38353, "title": "Bind and Apply calls are not checked against all function overloads", "labels": ["Design Limitation"]}, {"num": 33815, "title": "bind, call and apply do not work on unions of function types with different return types.", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 33096, "title": "Block comments inside of callback function body should not be emitted", "labels": ["Bug", "Domain: Comment Emit"]}, {"num": 39918, "title": "Bogus \"duplicate identifier\" when checking JS code", "labels": ["Bug", "checkJs"]}, {"num": 29973, "title": "Boolean intellisense", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 16655, "title": "Boolean() cannot be used to perform a null check", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 30225, "title": "Boolean[\"toString\"] inconsistency", "labels": ["In Discussion", "Suggestion"]}, {"num": 33693, "title": "Breaking change - `.typeArguments` removed from some `TypeReference`s", "labels": ["Breaking Change"]}, {"num": 38555, "title": "Breaking change to `extends any` causes confusing behavior with indirect references to `any`", "labels": ["In Discussion", "Suggestion"]}, {"num": 25784, "title": "Bring back typedef property expansion", "labels": ["In Discussion", "Suggestion"]}, {"num": 38476, "title": "Brittle circularity inherited from factory-produced class", "labels": ["Needs Investigation"]}, {"num": 40913, "title": "Broken autoimport of module without index reexport", "labels": ["Domain: Auto-import", "Experience Enhancement", "Suggestion"]}, {"num": 28293, "title": "Broken IndexedDB event typings in 3.1.5", "labels": ["Bug", "Domain: lib.d.ts"]}, {"num": 14930, "title": "Broken inference between index typed object and Record", "labels": ["In Discussion", "Suggestion"]}, {"num": 30873, "title": "Broken link in docs", "labels": ["Docs"]}, {"num": 35374, "title": "bug `createTemplateMiddle()` and `createTemplateTail()` do not work with escaped chars", "labels": ["Bug"]}, {"num": 10476, "title": "Bug in helper function that is emitted by the compiler for module re-exports", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 26437, "title": "Bug in lib.dom.d.ts - document.evaluate", "labels": ["Bug", "Domain: lib.d.ts", "Fixed in TSJS repo", "Rescheduled", "good first issue", "help wanted"]}, {"num": 32408, "title": "Bug in typing iterable iterator with symbol", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 38937, "title": "bug of multi re-export with interface", "labels": ["Needs Investigation"]}, {"num": 17937, "title": "Bug with object type in unions?", "labels": ["Bug"]}, {"num": 3539, "title": "Bug with resolveClassOrInterfaceMembers", "labels": ["Suggestion", "help wanted"]}, {"num": 19379, "title": "Bug(?): Using attribute type of extended generic param and an intersection type", "labels": ["Bug"]}, {"num": 30207, "title": "bug(generics): errors of inferring types for an array", "labels": ["Design Limitation"]}, {"num": 20752, "title": "BUG,  Type is missing", "labels": ["Bug"]}, {"num": 39858, "title": "Bug: \"Convert to async function\" refactor generates invalid code with imported functions", "labels": ["Bug", "Domain: Refactorings"]}, {"num": 31859, "title": "BUG: `allowSyntheticDefaultImports: true` breaks Typescript auto-import", "labels": ["Bug"]}, {"num": 8624, "title": "Bug: Accessing private statics in a class via its derived class is allowed", "labels": ["Breaking Change", "Effort: Moderate", "Suggestion", "help wanted"]}, {"num": 28159, "title": "Bug: Chained this-intersecting methods don't work from within class", "labels": ["Bug", "Domain: This-Typing"]}, {"num": 30667, "title": "bug: Decorator Method Name Type Restriction By Enum", "labels": ["Needs Investigation"]}, {"num": 14281, "title": "Bug: ES6-style exports counted as `private` when building with `declaration` flag.", "labels": ["Bug"]}, {"num": 22689, "title": "Bug: Incorrect module resolution for \"valid\" ES2015 specifiers with hashes and/or search parameters", "labels": ["Awaiting More Feedback", "Domain: ES Modules", "Suggestion"]}, {"num": 37103, "title": "Bug: strictNullChecks + object spread + computed key", "labels": ["Bug"]}, {"num": 39178, "title": "Build mode ignores inherited --pretty flag when run through lerna", "labels": ["Bug"]}, {"num": 29611, "title": "Build Mode in Visual Studio \"Rebuild\" results in occasional errors", "labels": ["Discussion"]}, {"num": 29296, "title": "Build not including custom @types", "labels": ["Needs More Info"]}, {"num": 35729, "title": "Build watch takes 30x as long as cold build, high transformTime", "labels": ["Domain: Declaration Emit", "Domain: Performance", "Needs More Info"]}, {"num": 7091, "title": "buildOnSave support in tsconfig.json", "labels": ["In Discussion", "Suggestion", "Visual Studio"]}, {"num": 10038, "title": "Built-in functions (e.g. isFinite) type guard and accepting null | undefined (strictNullChecks)", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 39436, "title": "Bundling typescript using webpack: the request of a dependency is an expression (+possible fix)", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 41263, "title": "Cache specific utility types", "labels": ["Design Limitation"]}, {"num": 41135, "title": "CalableFunction interface can be assigned to variable with another 'call' method signature", "labels": ["Design Limitation"]}, {"num": 40943, "title": "Call expression's leading comments are removed when assigned to a explicitly typed variable", "labels": ["Bug", "Domain: Comment Emit"]}, {"num": 37342, "title": "Call hierarchy becomes infinitely nested on derived class methods using super call ", "labels": ["Bug", "Rescheduled"]}, {"num": 23429, "title": "Callback in mapped type implicitly has 'any' type", "labels": ["Bug"]}, {"num": 35501, "title": "callbacks should select the right overload", "labels": ["Design Limitation"]}, {"num": 10905, "title": "Can __export emitter be controlled by emitEmitHelpers compile option?", "labels": ["Breaking Change", "Suggestion", "help wanted"]}, {"num": 41323, "title": "Can assign non existing field in class with checkJs / @ts-check", "labels": []}, {"num": 18074, "title": "can i rely on this weird yet handy behavior? if not what is a working alternative?", "labels": ["Bug"]}, {"num": 40356, "title": "Can Module Resolution Cache Usage Be Improved?", "labels": ["In Discussion", "Needs Investigation", "Suggestion"]}, {"num": 38256, "title": "Can not access super property while super method is available", "labels": []}, {"num": 14080, "title": "Can not declaration merging for default exported class", "labels": ["Bug"]}, {"num": 14621, "title": "Can not set static properties on arrow-function-initialized variables", "labels": ["Bug", "Domain: JavaScript"]}, {"num": 18537, "title": "Can not specify toString/valueOf methods in object literal", "labels": ["Bug"]}, {"num": 24308, "title": "Can types be used to ensure path comparisons are correct?", "labels": ["Infrastructure"]}, {"num": 28323, "title": "Can we cut down on `Object.assign` overloads?", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 29190, "title": "Can wrongly assign object with incomplete mapped type to interface with mapped type member", "labels": ["Bug"]}, {"num": 31811, "title": "Can't assign result of function of type T to ReturnType<T>", "labels": ["Design Limitation"]}, {"num": 35795, "title": "Can't compare arrray length inside nested ifs ", "labels": ["Design Limitation"]}, {"num": 28012, "title": "can't emit import when overwrite declare", "labels": ["Bug", "Domain: Error Messages"]}, {"num": 35909, "title": "Can't evaluate equality of symbols made by Symbol.for", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 31908, "title": "Can't exclude undefined from indexed Partial with simple guard", "labels": ["Design Limitation"]}, {"num": 22824, "title": "Can't extend intersection containing constructable type parameter", "labels": ["Bug"]}, {"num": 13807, "title": "Can't extend mixin constructor that constructs a generic type", "labels": ["In Discussion", "Suggestion"]}, {"num": 39743, "title": "Can't find declaration files for imports with extension when using path mapping", "labels": ["Needs Investigation"]}, {"num": 14461, "title": "Can't find definition of a property on an object with an index signature.", "labels": ["Bug", "Domain: Symbol Navigation", "help wanted"]}, {"num": 40816, "title": "Can't get the type of the nth argument of an overloaded method / polymorphic method", "labels": ["Design Limitation"]}, {"num": 40832, "title": "Can't index object in generic function with property name extracted with Pick from derived type", "labels": ["Design Limitation"]}, {"num": 35896, "title": "Can't infer unique symbol types via another variable", "labels": ["Bug"]}, {"num": 16517, "title": "Can't namespace-merge into Class returned from a method / variable.", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 36468, "title": "Can't use aliases of the global `Symbol` value to refer to its properties in the same manner or create unique symbols", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 27987, "title": "Can't use type aliases or conditional types resolving to Promise for async/await return types", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 3792, "title": "Cannot 'export default' abstract, ambient class or interface", "labels": ["Suggestion", "help wanted"]}, {"num": 40979, "title": "Cannot annotate a field in constructor as null using jsdoc @type", "labels": ["Bug"]}, {"num": 32714, "title": "Cannot assign array containing string-type to union of Iterable and string.", "labels": ["Design Limitation"]}, {"num": 40312, "title": "Cannot assign generic type aliases that should be equivalent.", "labels": ["Bug", "Fix Available"]}, {"num": 32693, "title": "Cannot assign property to same type with generic key", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 37823, "title": "Cannot assign to ... because it is a read-only property when using type guard in ctor", "labels": ["Bug", "GraceHopperOSD", "help wanted"]}, {"num": 24525, "title": "Cannot augment global namespace from module due to shadowing(?)", "labels": ["Bug"]}, {"num": 37549, "title": "Cannot circumvent weak type detection in class", "labels": ["Needs More Info"]}, {"num": 24226, "title": "Cannot create declaration files from static factory class returned from a function.", "labels": ["Bug"]}, {"num": 4067, "title": "Cannot define a union type with a new signature type", "labels": ["Bug", "help wanted"]}, {"num": 28642, "title": "cannot enforce type shape when assigned to a conjunction", "labels": ["In Discussion", "Suggestion"]}, {"num": 38387, "title": "Cannot export self module as default", "labels": ["Bug", "Rescheduled"]}, {"num": 37680, "title": "Cannot find name 'Iterable' when including ES2015.Promise", "labels": ["Bug", "Rescheduled"]}, {"num": 34749, "title": "Cannot find type definition file for ambient declaration module", "labels": ["Needs Investigation"]}, {"num": 37687, "title": "Cannot find usage references for most kinds of merged declarations", "labels": ["Bug"]}, {"num": 8136, "title": "Cannot get symbol inside class decorator (Cannot read property 'members' of un...)", "labels": ["API", "Bug", "help wanted"]}, {"num": 15514, "title": "Cannot have array binding patterns without iterable extensions", "labels": ["Bug"]}, {"num": 18202, "title": "Cannot implement generic type guarding function", "labels": ["Bug"]}, {"num": 29485, "title": "Cannot import properties from module.exports as types in JSDoc", "labels": ["Bug", "Domain: JavaScript"]}, {"num": 31146, "title": "Cannot infer generic argument type from passed callback", "labels": ["Bug", "Domain: Type Inference"]}, {"num": 41246, "title": "Cannot infer the type of a generic type parameter T even if T extends a single string literal type", "labels": []}, {"num": 18203, "title": "Cannot iterate over union of types (used to be possible in Ts-2.3)", "labels": ["Bug"]}, {"num": 23185, "title": "Cannot Load Custom Definition File in Repository", "labels": ["Domain: Error Messages", "GraceHopperOSD", "Suggestion", "good first issue", "help wanted"]}, {"num": 37834, "title": "Cannot mix both fixed and rest arguments using '.call' when using '--strictBindCallApply'", "labels": ["Needs Investigation"]}, {"num": 14417, "title": "Cannot Optionalize Class Getters", "labels": ["Suggestion", "help wanted"]}, {"num": 27689, "title": "Cannot override method in subclass when superclass instance type is a mapped type", "labels": ["In Discussion", "Suggestion"]}, {"num": 37165, "title": "Cannot read property 'flags' of undefined ", "labels": ["Bug", "Fix Available"]}, {"num": 30528, "title": "Cannot read property 'parent' of undefined in collectEnclosingScopes", "labels": ["Bug"]}, {"num": 17547, "title": "cannot redeclare exported variable", "labels": ["Bug", "Domain: JavaScript"]}, {"num": 29586, "title": "Cannot reference type of a different property in the same object literal", "labels": ["Design Limitation"]}, {"num": 16508, "title": "Cannot remove on<event>", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 30418, "title": "Cannot run 'convert to named parameters' refactoring for method implementing an interface", "labels": ["Bug", "VS Code Priority"]}, {"num": 38796, "title": "Cannot safely, generically add a property to a record", "labels": ["Needs More Info"]}, {"num": 40733, "title": "Cannot subclass class-like types with accessors.", "labels": ["In Discussion", "Suggestion"]}, {"num": 18908, "title": "Cannot use 'this' indexed type with mapped types", "labels": ["Bug"]}, {"num": 39312, "title": "Cannot use Array.prototype.push.apply with NodeList, even though it works properly in all browsers.", "labels": ["Bug"]}, {"num": 31445, "title": "Cannot use matching indexes across objects with similar types", "labels": ["Design Limitation"]}, {"num": 33009, "title": "Cannot use nesting computed property name in an interface", "labels": ["Bug"]}, {"num": 26486, "title": "Cannot use type side of a namespace in JsDoc after `declare global ...` workaround for UMD globals", "labels": ["Bug", "Domain: JSDoc"]}, {"num": 23774, "title": "Cannot use variable from common deconstruction into the initialising expression of another one when strictNullChecks is on", "labels": ["Bug"]}, {"num": 35257, "title": "Cannot widen type in generics while retaining knowledge of assignability", "labels": ["Design Limitation"]}, {"num": 31608, "title": "Cant infer type of parent based on member of child", "labels": ["In Discussion", "Suggestion"]}, {"num": 5940, "title": "Cascading errors when incorrectly extending a generic type", "labels": ["Bug", "help wanted"]}, {"num": 36461, "title": "Case Sensitivity while importing in TypeScript", "labels": ["Bug"]}, {"num": 36575, "title": "Cast is allowed between property and lone getter/setter", "labels": ["Bug", "Design Limitation", "Needs Proposal"]}, {"num": 39623, "title": "Cast Method of a class to a certain type", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 20821, "title": "Cast problem with generics method definition", "labels": ["Committed", "Suggestion"]}, {"num": 15289, "title": "Casting of a union type variable doesn't work if interface has all optional properties", "labels": ["In Discussion", "Suggestion"]}, {"num": 36472, "title": "Catch when callbacks are missing a return.", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 15089, "title": "CFA doesn't see non executable code", "labels": ["Bug"]}, {"num": 23818, "title": "CFA failure with fallthrough clauses in switch statements", "labels": ["Bug"]}, {"num": 20497, "title": "CFA should consider branch flags", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 28907, "title": "CFA with deep expressions doesn't work correctly", "labels": ["Bug", "Domain: Control Flow"]}, {"num": 28594, "title": "chained generic mixins fail", "labels": ["In Discussion", "Suggestion"]}, {"num": 30604, "title": "Change API for compiler option \"target\" to use strings instead of numbers", "labels": ["Needs Investigation"]}, {"num": 38831, "title": "Change default inference from arrays to tuples and primitives to literals", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 28911, "title": "Change Diagnostic.code to 'string | number'", "labels": ["API", "Breaking Change", "Experience Enhancement", "Suggestion"]}, {"num": 39958, "title": "Change infer keyword behaviour to use it for type caching", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 32562, "title": "Change property modifier in mapped type based on condition", "labels": ["Awaiting More Feedback", "Domain: Mapped Types", "Suggestion"]}, {"num": 12871, "title": "Changed behaviour in TS2.1 for Promise<void>", "labels": ["Bug", "Domain: lib.d.ts"]}, {"num": 18980, "title": "ChangeTracker can't express overlapping edits", "labels": ["Infrastructure"]}, {"num": 1921, "title": "Changing --out setting in project properties should mark project as needing a clean/rebuild", "labels": ["Bug", "Visual Studio"]}, {"num": 14551, "title": "Changing baseUrl causes compiler not to look at @types subdirectory", "labels": ["Docs"]}, {"num": 28338, "title": "Changing single-line JSDoc comments to multiline requires unnecessary edits", "labels": ["Domain: TSServer", "In Discussion", "Suggestion"]}, {"num": 35194, "title": "charCount of undefined error in LineNode.walk causing invalid errors in editor", "labels": ["Needs More Info"]}, {"num": 40207, "title": "Check 'imports' are relative and end with '.js' (no rewrite)", "labels": ["Out of Scope", "Suggestion"]}, {"num": 11378, "title": "Check @param names in JSDoc method documentation", "labels": ["Committed", "Domain: JSDoc", "Effort: Moderate", "Suggestion", "VS Code Tracked", "help wanted"]}, {"num": 21213, "title": "Check DOM on-event handlers", "labels": ["Suggestion", "Visual Studio"]}, {"num": 22284, "title": "Check if tsc --watch is already running for a given directory/project", "labels": ["In Discussion", "Suggestion"]}, {"num": 38000, "title": "Check index array length", "labels": ["Suggestion", "Too Complex"]}, {"num": 39132, "title": "Check JS doesn't narrow types properly", "labels": ["Needs Investigation"]}, {"num": 27023, "title": "Check property declarations in JS", "labels": ["Bug"]}, {"num": 40364, "title": "check react children props", "labels": ["Declined", "Suggestion"]}, {"num": 26045, "title": "Checking assignability without losing inferred types and without runtime code", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 38985, "title": "Checking JS types does not accept @implements or @augments on constructor functions", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 39837, "title": "Checking union type where key is enum tricks compiler", "labels": ["Bug"]}, {"num": 38291, "title": "checkJS + JSDoc + inline d.ts syntax", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 31243, "title": "checkJs can't correctly determine type of generic function parameter", "labels": ["Suggestion"]}, {"num": 21435, "title": "checkJS has no effect when allowJS is not enabled in the tsconfig.json", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 16738, "title": "checkJs should imply allowJs", "labels": ["In Discussion", "Suggestion"]}, {"num": 32482, "title": "checkJs should recognize properties assigned with lodash", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 15416, "title": "checkJs: allow file extensions other than .js", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 28551, "title": "ChildNode.nextSibling should be another ChildNode, not just a Node", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 33716, "title": "CI Status Thread", "labels": ["Infrastructure"]}, {"num": 41164, "title": "Circular reference error when defining Record type", "labels": ["Design Limitation"]}, {"num": 32950, "title": "Circular reference misdetection", "labels": ["Bug"]}, {"num": 32986, "title": "Circular references while using Pick", "labels": ["Needs Investigation"]}, {"num": 10873, "title": "circular symlink breaks typescript intellisense", "labels": ["Bug", "VS Code Tracked"]}, {"num": 34673, "title": "Clarify canvas ctx.globalCompositeOperation type", "labels": ["Bug", "Domain: lib.d.ts"]}, {"num": 37640, "title": "Clarify class property initializer behavior", "labels": ["Docs"]}, {"num": 40853, "title": "Class instance property with default value not referenced in destructured object property reassignments", "labels": ["Bug", "Domain: Symbol Navigation"]}, {"num": 26275, "title": "Class method autocompletions not working properly on class with mixins", "labels": ["Bug"]}, {"num": 13815, "title": "Class method with `this` typing cannot access private or protected members", "labels": ["Bug"]}, {"num": 14126, "title": "Class mixins shouldn't require a specific signature of constructors ", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 23609, "title": "Class properties referencing the class get incorrect class value when using functions defined outside the class", "labels": ["Bug", "ES Next"]}, {"num": 39681, "title": "Class Property Inference from Constructors fails for a simple object declared in place", "labels": ["Bug", "Has Repro"]}, {"num": 26609, "title": "Class prototype should be readonly", "labels": ["Bug"]}, {"num": 5950, "title": "Class View in Visual Studio?", "labels": ["Suggestion", "Visual Studio"]}, {"num": 35715, "title": "class-factory mixins in type declaration files are impossible. (allow implicit return types in declaration files somehow)", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 40023, "title": "Clean up old branches in the repo?", "labels": ["Infrastructure"]}, {"num": 39935, "title": "Clean up syntax for importing and using nested type declarations", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 20764, "title": "Clear message that .ts file is not included to project in VisualStudio", "labels": ["Needs Proposal", "Suggestion", "Visual Studio"]}, {"num": 37044, "title": "CLI --extend-tsconfig argument", "labels": ["In Discussion", "Suggestion"]}, {"num": 27507, "title": "CLI-only error calling generic function", "labels": ["Bug", "Domain: Mapped Types"]}, {"num": 283, "title": "cloneNode should return sub type, not Node", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 16503, "title": "Cloning a tuple turns it into an array", "labels": ["In Discussion", "Suggestion"]}, {"num": 36418, "title": "cmd+click function name goes to type definition file instead of source", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 37816, "title": "Cmd+click of JSX component shows type definition in VSCode, instead of linking to component definition", "labels": ["Bug"]}, {"num": 20902, "title": "Code action to remove unused declaration removes license comment", "labels": ["Bug", "Domain: Quick Fixes", "help wanted"]}, {"num": 32215, "title": "Code completion: suggest tokens from \"paths\" in tsconfig.json", "labels": ["In Discussion", "Suggestion"]}, {"num": 32183, "title": "code example is not correct in Intersection Types section", "labels": ["Docs"]}, {"num": 12084, "title": "Code Format with object spread in JavaScript files breaks", "labels": ["Bug", "VS Code Tracked"]}, {"num": 29233, "title": "Code formatting silently fails when certain JS characters included in JSX", "labels": ["Bug", "Crash", "Domain: Formatter", "Domain: JSX/TSX", "Effort: Moderate"]}, {"num": 38835, "title": "Code generated for optional call could be optimized when the result is unused", "labels": ["Effort: Moderate", "Experience Enhancement", "Suggestion", "help wanted"]}, {"num": 21136, "title": "Code Helper attempts to index MPEG-TS files in project and eats 100% cpu", "labels": ["Bug", "VS Code Tracked", "good first issue", "help wanted"]}, {"num": 30338, "title": "Code Helper CPU + Typescript crashes", "labels": ["Needs More Info"]}, {"num": 27639, "title": "Code navigation / intellisense broken with wrapped module.exports", "labels": ["Bug", "Domain: JavaScript"]}, {"num": 31654, "title": "Code not reachable in Visual Studio Code with Javascript and Go To Definition (F12) functionnality", "labels": ["Suggestion", "Too Complex"]}, {"num": 26474, "title": "Codefix for implicit-any 'this' in function", "labels": ["Domain: Quick Fixes", "Experience Enhancement", "Suggestion"]}, {"num": 13295, "title": "CodeFix to import entire module into single variable", "labels": ["Awaiting More Feedback", "Domain: Quick Fixes", "Suggestion"]}, {"num": 31923, "title": "Codefix: convert `Type[]` to `readonly Type[]`", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 35691, "title": "Codefix: removing inferable types", "labels": ["Awaiting More Feedback", "Domain: Quick Fixes", "Suggestion"]}, {"num": 22015, "title": "Collision when inferring numerical enum value", "labels": ["In Discussion", "Suggestion"]}, {"num": 4455, "title": "Colorization in peek window for JSX code is incorrect", "labels": ["Bug", "Visual Studio"]}, {"num": 1197, "title": "Colorize the usages of interfaces everywhere", "labels": ["Bug"]}, {"num": 11582, "title": "Combination of brackets and functions inside ternary operator produce error", "labels": ["Bug"]}, {"num": 31281, "title": "Combine reducers with intersected type of unions causes tsc to crash", "labels": ["Domain: Performance", "Needs More Info"]}, {"num": 5326, "title": "Combining destructuring with parameter properties", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 25148, "title": "commandLineParser's convertJsonOption() misses check for option's null and undefined value", "labels": ["Bug", "help wanted"]}, {"num": 38791, "title": "Comment directive activated when longer string used", "labels": ["Bug"]}, {"num": 35779, "title": "Comments at the end of an array, when the last item ends with a comma, are not compiled", "labels": ["Bug", "Domain: Comment Emit"]}, {"num": 24371, "title": "Comments before a decorator produces a weird comma in the emitted JS output", "labels": ["Bug", "Domain: Comment Emit"]}, {"num": 26079, "title": "comments before imports are stripped in AMD output unless there's a blank line after them", "labels": ["Bug", "Domain: Comment Emit"]}, {"num": 10383, "title": "Comments on inner properties are stripped", "labels": ["Suggestion", "help wanted"]}, {"num": 16428, "title": "Comments on namespace name paths pollute the base/root namespace", "labels": ["Bug", "help wanted"]}, {"num": 17576, "title": "Comments should be source mapped line by line", "labels": ["In Discussion", "Suggestion"]}, {"num": 31911, "title": "Commit .vscode workspace folder for common tasks", "labels": ["Infrastructure"]}, {"num": 36764, "title": "CommonJS arguments shouldn't be treated as globals in node", "labels": ["Suggestion", "Too Complex"]}, {"num": 35881, "title": "commonjs export binding not updated in ForInOrOfStatement", "labels": ["Bug"]}, {"num": 35879, "title": "commonjs export binding produces invalid code for increment/decrement in PrefixUnaryExpression", "labels": ["Bug", "Rescheduled"]}, {"num": 40555, "title": "Commonjs exports should allow duplicates in some cases", "labels": ["Bug"]}, {"num": 23132, "title": "Comparing constrained generic types/substitution types to conditional types", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 41163, "title": "Comparison of union types should error", "labels": ["In Discussion", "Suggestion"]}, {"num": 31251, "title": "Comparison targets are reversed (regression)", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 30118, "title": "Comparison targets are reversed (regression)", "labels": ["Needs Investigation"]}, {"num": 40897, "title": "Compilation ouput has undefined properties (__generator function param _b.trys is undefined)", "labels": ["Bug"]}, {"num": 3003, "title": "Compile / edit time pluggable analyzers like C#", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 29231, "title": "Compile module to a cache directory. Reuse cached output if inputs the same", "labels": ["In Discussion", "Scenario: Monorepos & Cross-Project References", "Suggestion"]}, {"num": 39018, "title": "Compile time exponentially longer as more exclamation marks are added to a negation in a template placeholder expression", "labels": ["Bug"]}, {"num": 34793, "title": "Compiled .d.ts output for `Omit` is verbose and semantically inconsistent", "labels": ["Fix Available", "Needs Investigation", "Rescheduled"]}, {"num": 23757, "title": "Compiled async/await function is no longer with constructor named as 'AsyncFunction'", "labels": ["Bug", "ES2017"]}, {"num": 15088, "title": "Compiled generators does not have correct constructor name", "labels": ["Bug", "ES6"]}, {"num": 6490, "title": "Compiler \"target\" option capitalization in docs inconsistent with code and json schema", "labels": ["Docs"]}, {"num": 16166, "title": "Compiler allows for using a value before it is imported", "labels": ["Bug", "Domain: ES Modules", "Domain: Transforms"]}, {"num": 26187, "title": "Compiler API allow custom options in parseCommandLine/ConfigFile", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 13393, "title": "Compiler API Example in Wiki fails to run as described", "labels": ["Docs"]}, {"num": 27315, "title": "Compiler API should detect unparsed config files", "labels": ["API", "Bug"]}, {"num": 28276, "title": "Compiler API to resolve path from ImportDeclaration", "labels": ["API", "In Discussion", "Suggestion"]}, {"num": 23719, "title": "Compiler API: Expose More from typescript.d.ts", "labels": ["API", "Suggestion", "help wanted"]}, {"num": 13165, "title": "Compiler API: no Symbol for Node", "labels": ["Bug"]}, {"num": 40787, "title": "Compiler API: Please mark TransformationContext.addInitializationStatement as public API", "labels": ["Needs Investigation"]}, {"num": 22229, "title": "Compiler doesn't understand Partial<T> function argument without explicit cast", "labels": ["In Discussion", "Suggestion"]}, {"num": 35141, "title": "Compiler error message improvement: Special casing container objects", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 27178, "title": "Compiler Errors TS1110 and TS2345 with integer type pattern", "labels": ["Domain: Literal Types", "In Discussion", "Suggestion"]}, {"num": 10678, "title": "Compiler fails when using noResolve for global types", "labels": ["Bug", "help wanted"]}, {"num": 29376, "title": "Compiler generates jsxFactory call with incorrect namespace", "labels": ["Domain: Error Messages", "Needs Proposal", "Suggestion"]}, {"num": 19374, "title": "Compiler gives two different errors for wrong number of type arguments", "labels": ["Bug", "Domain: Error Messages"]}, {"num": 17033, "title": "Compiler hang when importing big JS file with --allowJs", "labels": ["Bug"]}, {"num": 28617, "title": "Compiler hangs with large JS file with --allowJs", "labels": ["Bug", "Domain: Control Flow"]}, {"num": 21140, "title": "Compiler OOM in watch mode and with --d", "labels": ["Needs More Info"]}, {"num": 28548, "title": "Compiler option for implicitly adding this context on class member methods", "labels": ["Add a Flag", "In Discussion", "Suggestion"]}, {"num": 25081, "title": "Compiler options have different effects on command line vs in fourslash test", "labels": ["Infrastructure"]}, {"num": 37701, "title": "Compiler Performance: Lazily construct SourceFile objects from input files", "labels": ["In Discussion", "Suggestion"]}, {"num": 13819, "title": "Compiler should complain about implicit return value of child class constructor, if it does not satisfy child class type", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 3432, "title": "Compiler should error when encountering invalid regular expressions", "labels": ["Bug", "help wanted"]}, {"num": 28569, "title": "Compiler warning for always true/false strict inequality expression", "labels": ["In Discussion", "Suggestion"]}, {"num": 29829, "title": "compiler, when it watch mode, resets the screen colors", "labels": ["Effort: Moderate", "Needs Proposal", "Suggestion", "help wanted"]}, {"num": 33576, "title": "compilerOptions support TDZ error option", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 10688, "title": "compilerOptions.paths to support relative and absolute paths", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 35642, "title": "compilerOptions:outDir is warning if set to null inside VSCode", "labels": ["Bug"]}, {"num": 31066, "title": "Compiling async/await to ES5 may fail to warn about missing Promise constructor", "labels": ["Bug"]}, {"num": 28195, "title": "Compiling with -d should emit triple-slash lib paths", "labels": ["In Discussion", "Suggestion"]}, {"num": 5060, "title": "Completion inside interface has inconsistent behavior", "labels": ["Bug"]}, {"num": 37249, "title": "Completion list incorrectly uses generic default when the constraint type would be better (?)", "labels": ["Bug", "Domain: Completion Lists"]}, {"num": 33302, "title": "Completion list should include property names of constraining type when writing object type literals in type argument positions", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 10204, "title": "Completion list should remain open if suitable match is not found", "labels": ["Suggestion", "Visual Studio"]}, {"num": 40078, "title": "Completion: Higher priority for the same name when assign access expression to property ", "labels": ["Declined", "Suggestion"]}, {"num": 20565, "title": "Completions are low-quality for UMD modules without typings", "labels": ["Domain: JavaScript", "Needs Proposal", "Suggestion"]}, {"num": 18577, "title": "Completions for callback parameter names", "labels": ["Domain: Completion Lists", "In Discussion", "Suggestion"]}, {"num": 13711, "title": "Completions in switch: don't include already-covered cases", "labels": ["Domain: Completion Lists", "Experience Enhancement", "Suggestion"]}, {"num": 40129, "title": "Completions: Suggest enum member or literal union Inside switch statement", "labels": ["In Discussion", "Suggestion"]}, {"num": 31738, "title": "Compose function can not deduce generic types of arguments if compose function is defined right to left", "labels": ["Design Limitation"]}, {"num": 39146, "title": "Composite (-b) projects don't report duplicate compilations", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 36743, "title": "Composite projects: support strict dependencies", "labels": ["In Discussion", "Suggestion"]}, {"num": 27864, "title": "Computed Properties aren't bound correctly during Object/Class evaluation", "labels": ["Bug", "Domain: Transforms", "Effort: Moderate", "help wanted"]}, {"num": 25758, "title": "Computed properties no throws if there is a duplicate", "labels": ["Bug"]}, {"num": 13948, "title": "Computed property key names should not be widened", "labels": ["Bug"]}, {"num": 26945, "title": "Computing constraint of conditional type by replacing contravariant infer variables with their constraints is unsound", "labels": ["Bug"]}, {"num": 39409, "title": "Conditional + annotation causes erroneous typing", "labels": ["Needs Investigation"]}, {"num": 41321, "title": "Conditional Template Literal Type not distributing", "labels": []}, {"num": 29188, "title": "Conditional type does not narrow union type", "labels": ["Bug", "Domain: Conditional Types"]}, {"num": 39787, "title": "Conditional type does not work with a generic", "labels": ["Design Limitation"]}, {"num": 26240, "title": "Conditional type doesn't narrow primitive types", "labels": ["In Discussion", "Suggestion"]}, {"num": 30152, "title": "Conditional types are incorrectly narrowed ", "labels": ["Needs Investigation"]}, {"num": 32735, "title": "Conditional types break with property chaining", "labels": ["Bug"]}, {"num": 25344, "title": "Conditional types can cause TS to miss incorrect interface extensions", "labels": ["Bug", "Domain: Conditional Types"]}, {"num": 27022, "title": "Conditional types don't work with Mapped types when you extend enum keys", "labels": ["Needs Investigation"]}, {"num": 33669, "title": "Conditional types fail to distribute in properties of mapped types", "labels": ["Docs"]}, {"num": 35533, "title": "Conditional types incorrect for complex types", "labels": ["Design Limitation"]}, {"num": 32934, "title": "Conditionalize `__esModule` emit?", "labels": ["Needs Investigation"]}, {"num": 38044, "title": "Conditionally filter types from tuples at transpilation time.", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 40550, "title": "Conditionally Mapped Type Leads to Confusing ts(2345) Error Message", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 38459, "title": "Config option to compile *and* embed code from an external project or folder", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 31199, "title": "Configurable import suggestions to override global types", "labels": ["Domain: Quick Fixes", "Needs Proposal", "Suggestion"]}, {"num": 14279, "title": "Configuration For Treating JS/TS Files as Independent Units (modules)", "labels": ["Awaiting More Feedback", "Suggestion", "VS Code Tracked"]}, {"num": 32830, "title": "Configure from package.json", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 31990, "title": "Conflicting definitions for Set constructor causes unexpected default generic in TS 3.5", "labels": ["In Discussion", "Suggestion"]}, {"num": 28279, "title": "Conflicting function return types checked for single bindings, but not overloads.", "labels": ["In Discussion", "Suggestion"]}, {"num": 14828, "title": "Confusing behavior typechecking array members", "labels": ["Bug"]}, {"num": 38645, "title": "Confusing definition found for `function`s in some cases", "labels": ["Bug"]}, {"num": 29094, "title": "Confusing enum reverse string lookup behaviour in strict mode", "labels": ["Domain: Error Messages", "Experience Enhancement", "Suggestion"]}, {"num": 16993, "title": "Confusing error for custom Promise type", "labels": ["Needs Investigation"]}, {"num": 30408, "title": "Confusing error message for labels used before definition", "labels": ["Domain: Error Messages", "Domain: Related Error Spans", "Effort: Moderate", "Experience Enhancement", "GraceHopperOSD", "Suggestion", "good first issue", "help wanted"]}, {"num": 25245, "title": "Confusing error message: Operator '===' cannot be applied to types '1' and '0'.", "labels": ["Bug", "Domain: Error Messages", "Fix Available", "Fixed", "help wanted"]}, {"num": 36307, "title": "Confusing error when returning generic in terms of `this` from method called on union of subclasses", "labels": ["Needs Investigation"]}, {"num": 30648, "title": "Conjunction of two disjunctions cause incorrect errors", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 321, "title": "Consider adding a module level visibility modifier.", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 18340, "title": "Consider applying Prettier to the codebase", "labels": ["Infrastructure"]}, {"num": 7772, "title": "Consider emitting `__esModule` for `export { foo as default }` and `export { foo as default } from './bar'`.", "labels": ["Bug", "help wanted"]}, {"num": 4320, "title": "Consider exporting 'getOwnEmitOutputFilePath'", "labels": ["API", "Suggestion", "help wanted"]}, {"num": 28147, "title": "Consider including some base configs in the published `typescript` package", "labels": ["In Discussion", "Suggestion"]}, {"num": 32082, "title": "Consider inferring class members types by implemented interface members (continuation of #340)", "labels": ["In Discussion", "Suggestion"]}, {"num": 39034, "title": "Consider loose completions in the syntax server on unresolved/error types", "labels": ["In Discussion", "Suggestion"]}, {"num": 23189, "title": "Consider not mentioning namespaces as much in the handbook", "labels": ["Docs"]}, {"num": 1260, "title": "Consider property access a form of type guards", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 7014, "title": "Consider re-ordering Array#reduce overloads in lib.d.ts", "labels": ["Domain: lib.d.ts", "Suggestion", "good first issue", "help wanted"]}, {"num": 35113, "title": "Consider some way of serializing open projects in tsserver, potentially leveraging `.tsbuildinfo` files", "labels": ["Domain: --incremental", "Domain: Performance", "Domain: TSServer", "Experimentation Needed", "In Discussion", "Needs Proposal", "Suggestion"]}, {"num": 33288, "title": "Consider supporting an array for package.json types", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 37648, "title": "Considering limiting hover length", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 39519, "title": "Consider\u00a0adding\u00a0`primitive` as\u00a0a\u00a0union of\u00a0all\u00a0primitive\u00a0types", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 15387, "title": "console.log(...[1,2,3]); Parameter does not support spread operator.", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 41247, "title": "Const assertion with explicit type: don't widen back or allow autocompletion", "labels": []}, {"num": 30445, "title": "const assertions in JSDoc", "labels": ["In Discussion", "Suggestion"]}, {"num": 40499, "title": "const enum imports are stripped even with isolatedModules", "labels": ["Bug"]}, {"num": 33703, "title": "const enum not being converted to number", "labels": ["Needs More Info"]}, {"num": 41122, "title": "Const enum values as array", "labels": ["Out of Scope", "Suggestion"]}, {"num": 31459, "title": "const module = {}; export = module", "labels": ["Bug"]}, {"num": 6678, "title": "Const numbers that index into tuples do not produce the correct type", "labels": ["Effort: Moderate", "Suggestion", "help wanted"]}, {"num": 31422, "title": "const TemplateStringsArray for TaggedTemplateExpression", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 37888, "title": "Constants + Generic causing TS4023 (\"but cannot be named\")", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 13257, "title": "Constraint Types Proposal", "labels": ["In Discussion", "Suggestion"]}, {"num": 21249, "title": "Constraints which are generic mapped types should have a constraint of the same mapping over their generic's constraint", "labels": ["Bug"]}, {"num": 15003, "title": "Constructor emit is not correct for truly primitives returning by super", "labels": ["Bug", "ES6"]}, {"num": 40451, "title": "Constructor generic types and `this` parameter (TS1092, TS2681)", "labels": ["In Discussion", "Suggestion"]}, {"num": 29328, "title": "Constructor property inheritance is not giving an error in ES2015+ target", "labels": ["Bug"]}, {"num": 26990, "title": "ConstructorOf<T> wrapper to declare type of constructor of type parameter", "labels": ["In Discussion", "Suggestion"]}, {"num": 30991, "title": "ConstructorParameters is not working for private constructors (and protected constructors)", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 12082, "title": "context help of angular2-project does not show up by tsserver", "labels": ["Bug", "Domain: Quick Info"]}, {"num": 2151, "title": "Contextual intellisense in Visual Studio", "labels": ["API", "Suggestion", "help wanted"]}, {"num": 38879, "title": "Contextual typing fails to throw error with function return type on left side of equals sign", "labels": ["Bug"]}, {"num": 33738, "title": "Contextual typing interferes with type argument inference ", "labels": ["Bug"]}, {"num": 31618, "title": "Contextual typing with optional discriminant", "labels": ["Bug"]}, {"num": 33783, "title": "Contextually allow spread to create tuples from tuples", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 32794, "title": "Contextually infer parameters for type aliases/interfaces", "labels": ["In Discussion", "Suggestion"]}, {"num": 40162, "title": "Contextually type 'await ...' whose value is unused to 'void | PromiseLike<void>'", "labels": ["Experimentation Needed", "Suggestion"]}, {"num": 33181, "title": "Continuing #17110 - Given generic `W extends { x: A }` should be able to use `keyof W['x']` to index w.x", "labels": ["Experimentation Needed", "Suggestion"]}, {"num": 26408, "title": "Contradicting types in tooltip and type checker when inference fails and when using @ts-ignore", "labels": ["Bug"]}, {"num": 37400, "title": "Contravariance broke in 3.8 when combining spreading parameter list with conditional type", "labels": ["Blocked", "Bug", "Rescheduled"]}, {"num": 14994, "title": "Control application of insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets for Array Literal vs Array Access Expression", "labels": ["Domain: Formatter", "Suggestion", "VS Code Tracked", "help wanted"]}, {"num": 26914, "title": "Control flow analysis should \"work\" in unreachable code", "labels": ["Bug"]}, {"num": 36702, "title": "Control flow doesn't affect spreaded properties", "labels": ["Bug"]}, {"num": 28038, "title": "Control Flow narrows  X | undefined to never without checking arrow function", "labels": ["Design Limitation"]}, {"num": 11542, "title": "Control flow not formed when using consts", "labels": ["Committed", "Suggestion"]}, {"num": 26767, "title": "convert a property/element access expression to a getter and setter", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 574, "title": "Convert HTMLElement and friends to classes to support Web Components/Custom elements", "labels": ["Domain: lib.d.ts", "In Discussion", "Suggestion"]}, {"num": 40042, "title": "Convert to async function with decorator", "labels": ["Bug", "Domain: Refactorings"]}, {"num": 31897, "title": "Convert to Async not working if I have a \"catch\" statement", "labels": ["Bug"]}, {"num": 30469, "title": "Convert to async/await doesn't support .finally() method", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 31514, "title": "Convert to class declaration quick fix misses superclass", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 30764, "title": "Convert to destructed refactoring not enabled in JavaScript?", "labels": ["Domain: JavaScript", "Domain: Refactorings", "In Discussion", "Suggestion"]}, {"num": 31321, "title": "Convert to discriminated union", "labels": ["Awaiting More Feedback", "Domain: Refactorings", "Suggestion"]}, {"num": 32491, "title": "Convert to ES2015 class do not recognize inheritance", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 41078, "title": "Convert to ES6 Class Refactoring removes methods named with quoted properties", "labels": ["Bug", "Domain: Refactorings", "help wanted"]}, {"num": 40366, "title": "Convert to named function drops the async keyword", "labels": ["Bug", "Domain: Refactorings", "help wanted"]}, {"num": 27601, "title": "Copy JSDoc from type when destructing arguments.", "labels": ["Experience Enhancement", "Suggestion", "help wanted"]}, {"num": 31264, "title": "Copy/Paste of the PromiseLike interface incompatible with itself", "labels": ["Needs Investigation"]}, {"num": 40616, "title": "Copying .ts files and renaming them confuses TypeScript", "labels": ["Needs Investigation"]}, {"num": 40479, "title": "Correct declaration emit of commonjs exports of namespace-nested classes", "labels": ["Bug"]}, {"num": 31285, "title": "Correct typing when using the index signature of an Enum", "labels": ["In Discussion", "Suggestion"]}, {"num": 24057, "title": "Correct usage of type, update docs", "labels": ["Docs"]}, {"num": 32804, "title": "Correlated type constraint breaks under return type inference", "labels": ["Discussion"]}, {"num": 1394, "title": "Covariance / Contravariance Annotations", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 26981, "title": "Covariant assignability of type guard functions is unsound", "labels": ["Committed", "Suggestion", "help wanted"]}, {"num": 32229, "title": "CRA build slow when using typescript", "labels": ["Domain: Performance", "Needs Investigation", "Rescheduled"]}, {"num": 33755, "title": "Crash when writing `import global = globalThis;`", "labels": ["Bug"]}, {"num": 17861, "title": "Crazy checker.ts refactor experiment (25kloc)", "labels": ["Discussion"]}, {"num": 34617, "title": "Create a parser npm module", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 25426, "title": "Create a Typescript Mimetype", "labels": ["Experience Enhancement", "Suggestion", "help wanted"]}, {"num": 19299, "title": "Create Annex B lib target", "labels": ["Committed", "Effort: Moderate", "Suggestion", "help wanted"]}, {"num": 22602, "title": "Create commonjs imports in importFixes", "labels": ["Awaiting More Feedback", "Domain: Completion Lists", "Suggestion"]}, {"num": 26259, "title": "createProgram calls host.getSourceFile multiple times", "labels": ["Docs"]}, {"num": 40826, "title": "createTempVariable() should also try to not shadowing upper lexical environment temp variables", "labels": ["Needs Investigation"]}, {"num": 34586, "title": "Creating too many types for DOM & D3", "labels": ["Domain: Performance"]}, {"num": 41227, "title": "Cryptic error message when assigning to a key also present on the constructor, but forgetting to declare it in the class body", "labels": ["Bug", "help wanted"]}, {"num": 41117, "title": "Cryptic error message without --noImplicitAny", "labels": ["Bug"]}, {"num": 13644, "title": "CSSStyleDeclaration string properties all have `| null` type declaration.", "labels": ["Awaiting More Feedback", "Domain: lib.d.ts", "Suggestion"]}, {"num": 31525, "title": "CTRL-Click not working on require('...') path", "labels": ["Bug"]}, {"num": 16581, "title": "curly-brace formatting doesn't respect options in VS", "labels": ["Bug", "Domain: Formatter", "Visual Studio", "help wanted"]}, {"num": 15113, "title": "cursor moves to wrong position after formatting ", "labels": ["Bug", "Domain: Formatter", "help wanted"]}, {"num": 40648, "title": "Custom array index types", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 19018, "title": "Customise extensions that import intellisense recognises", "labels": ["Domain: Completion Lists", "In Discussion", "Suggestion", "VS Code Tracked"]}, {"num": 28807, "title": "cyclic dependency and main/module package.json breaks structural typing", "labels": ["Bug"]}, {"num": 40581, "title": "d.ts type imports are not resolved correctly in dependencies", "labels": ["Needs Investigation"]}, {"num": 40003, "title": "d.ts type is different than intellisense type", "labels": ["Needs Investigation"]}, {"num": 18433, "title": "Dangerous \"name\" (and potentially others) global ", "labels": ["Committed", "Domain: lib.d.ts", "Suggestion", "good first issue", "help wanted"]}, {"num": 40710, "title": "DashCase and CamelCase intrinsic string types, or similar", "labels": ["In Discussion", "Suggestion"]}, {"num": 31936, "title": "Dead links in 'Release TypeScript 3.5.2'", "labels": ["Docs"]}, {"num": 32235, "title": "Dead return statements in a generator should offer a did-you-mean-yield codefix", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 36363, "title": "Debug failure on TS Server format", "labels": ["Bug", "Impact: Failed LS Operation"]}, {"num": 40386, "title": "Debug Failure prevents renaming imports on file move", "labels": ["Bug"]}, {"num": 35133, "title": "Debug Failure. Did not expect ClassDeclaration to have an Identifier in its trivia", "labels": ["Bug", "Crash", "Domain: TSServer"]}, {"num": 33935, "title": "Debug Failure. Did not expect PropertyDeclaration to have an Identifier in its trivia", "labels": ["Bug", "Crash"]}, {"num": 39854, "title": "Debug Failure. Did not expect SourceFile to have an Identifier in its trivia  at addSyntheticNodes", "labels": ["Bug", "Rescheduled"]}, {"num": 27058, "title": "Debug Failure. False expression. at getChildListThatStartsWithOpenerToken", "labels": ["Needs More Info"]}, {"num": 27305, "title": "Debug Failure. False expression: Changes overlap", "labels": ["Needs More Info"]}, {"num": 40301, "title": "Debug Failure. Illegal value: 200 in signatureToSignatureDeclarationHelper", "labels": ["Bug"]}, {"num": 25456, "title": "Debug Failure. This is unknown parent for type parameter: 176", "labels": ["Bug", "Crash"]}, {"num": 24435, "title": "Debugging long check times with TypeScript?", "labels": ["Discussion"]}, {"num": 38575, "title": "Debugging TypeScript problems Wiki 404", "labels": ["Needs More Info"]}, {"num": 22833, "title": "Declaration binding identifiers are not mapped to the generated binding location", "labels": ["Bug"]}, {"num": 36548, "title": "Declaration emit for private identifiers in class expressions is wrong", "labels": ["Bug", "Rescheduled"]}, {"num": 33350, "title": "Declaration emit is broken for parameters marked /* @internal */", "labels": ["Bug", "Domain: Declaration Emit"]}, {"num": 38111, "title": "Declaration emit reveals paths within dependency that were not referred to in the source file", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 37151, "title": "Declaration emit should not inline type definitions", "labels": ["Needs Investigation"]}, {"num": 28009, "title": "Declaration file emitted with esModuleInterop can't be consumed without it", "labels": ["Domain: Declaration Emit", "Experience Enhancement", "Suggestion"]}, {"num": 38250, "title": "Declaration file generation not working as expected", "labels": ["Needs Investigation"]}, {"num": 35720, "title": "Declaration files generated by tsc output `any` for all fields for nested yup schemas", "labels": ["Needs More Info"]}, {"num": 36353, "title": "Declaration includes incorrect 'any' types for inferred nested property members", "labels": ["Bug"]}, {"num": 41116, "title": "Declaration merging can be inconsistent", "labels": ["Needs Investigation"]}, {"num": 35698, "title": "Declaration merging for interfaces defined in other module", "labels": ["Needs More Info"]}, {"num": 27295, "title": "Declaration: JSDoc of local class expression disappears when placed in different files", "labels": ["Bug", "help wanted"]}, {"num": 28040, "title": "Declarations are not generated for a high order component", "labels": ["Domain: Declaration Emit", "Experience Enhancement", "Suggestion"]}, {"num": 30124, "title": "Declarations are unexpectedly used from node_modules in parent directory", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 41245, "title": "declarations not re-generated for .js files when changes are made", "labels": []}, {"num": 28491, "title": "Declare all missing members quick fix", "labels": ["Domain: Quick Fixes", "In Discussion", "Suggestion"]}, {"num": 41033, "title": "Declare generics in type assertion / generic constraint and reuse", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 13321, "title": "Declare local variable as optional", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 2185, "title": "Declaring a var inside a loop with a let of the same name gives no error", "labels": ["Bug", "ES6"]}, {"num": 15877, "title": "Declaring generic type of implicitly called method ", "labels": ["Suggestion", "Too Complex"]}, {"num": 30982, "title": "Declaring index signature based on property type gives invalid error", "labels": ["Bug"]}, {"num": 13120, "title": "Decorated private propoerty flagged as unused with `noUnusedLocals:true`", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 35050, "title": "Decorator emit incorrect within `try` block", "labels": ["Bug", "Domain: JS Emit", "Rescheduled"]}, {"num": 7169, "title": "Decorator Metdata: expose array element type", "labels": ["Domain: Decorators", "Needs Proposal", "Suggestion"]}, {"num": 38438, "title": "Decorator mixin intellisense working improperly", "labels": ["Needs Investigation"]}, {"num": 5770, "title": "decorators in object literals not working", "labels": ["Committed", "Domain: Decorators", "Suggestion"]}, {"num": 7342, "title": "Decorators not allowed classes expressions", "labels": ["Committed", "Domain: Decorators", "Suggestion"]}, {"num": 2602, "title": "decorators should be colorized differently", "labels": ["API", "Suggestion", "help wanted"]}, {"num": 21699, "title": "Decouple jsx element type from jsx factory return type and sfc return type", "labels": ["Breaking Change", "Domain: JSX/TSX", "Effort: Moderate", "Suggestion"]}, {"num": 32799, "title": "Default assignment of an empty array to known array type should keep type", "labels": ["Bug"]}, {"num": 16598, "title": "Default exported named class throw an error if there is another class with same name", "labels": ["Bug", "Domain: Error Messages", "GraceHopperOSD", "help wanted"]}, {"num": 39710, "title": "Default formatter results strange indents for TypeScript code.", "labels": ["Bug", "Domain: Formatter"]}, {"num": 41065, "title": "Default generic type is improperly constrained in conditional types.", "labels": ["Bug"]}, {"num": 32467, "title": "Default to ReadonlyArray", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 29401, "title": "default types for @template generics in JSDoc", "labels": ["Awaiting More Feedback", "Domain: JSDoc", "Suggestion"]}, {"num": 36682, "title": "Default values for jsconfig.json override extended values", "labels": ["Bug"]}, {"num": 11409, "title": "Default values of readonly parameter properties shouldn't have literal types", "labels": ["Bug"]}, {"num": 2694, "title": "Define assignability relation for primitive-constrained type parameters", "labels": ["Suggestion", "help wanted"]}, {"num": 36526, "title": "Define protocol type names for well-known symbols", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 36860, "title": "Definition output should not iterate over keys", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 8808, "title": "DefinitionResponse selects full type range", "labels": ["API", "Suggestion", "help wanted"]}, {"num": 31052, "title": "Delayed, Generic Type specialization evaluation, for function reference type signature captured and re-write", "labels": ["Discussion"]}, {"num": 32196, "title": "Delete unused declarations codefix should offer \"Delete unused elements of only this declaration\" too", "labels": ["Bug", "Rescheduled"]}, {"num": 33381, "title": "Deprecated information on typescriptlang.org/samples/index.html", "labels": ["Docs"]}, {"num": 39296, "title": "Deprecated should support contextual type with signature resolution", "labels": ["Effort: Moderate", "Experience Enhancement", "help wanted"]}, {"num": 40588, "title": "Deprecated suggestions not reported as deprecated imported alias ", "labels": ["Bug", "Effort: Moderate", "Fix Available", "help wanted"]}, {"num": 34319, "title": "Describe function signature using an interface ", "labels": ["In Discussion", "Suggestion"]}, {"num": 23399, "title": "Describe object vs Object in the Handbook", "labels": ["Docs"]}, {"num": 28239, "title": "Describe the type of missing property in error message", "labels": ["Committed", "Domain: Error Messages", "Suggestion"]}, {"num": 40969, "title": "Design Meeting Notes, 10/2/2020", "labels": ["Design Notes"]}, {"num": 39852, "title": "Design Meeting Notes, 7/31/2020", "labels": ["Design Notes"]}, {"num": 40006, "title": "Design Meeting Notes, 8/11/2020", "labels": ["Design Notes"]}, {"num": 40052, "title": "Design Meeting Notes, 8/14/2020", "labels": ["Design Notes"]}, {"num": 40184, "title": "Design Meeting Notes, 8/21/2020", "labels": ["Design Notes"]}, {"num": 40309, "title": "Design Meeting Notes, 8/28/2020", "labels": ["Design Notes"]}, {"num": 40505, "title": "Design Meeting Notes, 9/11/2020", "labels": ["Design Notes"]}, {"num": 40636, "title": "Design Meeting Notes, 9/18/2020", "labels": ["Design Notes"]}, {"num": 40779, "title": "Design Meeting Notes, 9/25/2020", "labels": ["Design Notes"]}, {"num": 40434, "title": "Design Meeting Notes, 9/4/2020", "labels": ["Design Notes"]}, {"num": 40504, "title": "Design Meeting Notes, 9/8/2020", "labels": ["Design Notes"]}, {"num": 27519, "title": "Design:type metadata for cyclic dependencies throw at runtime", "labels": ["Design Limitation"]}, {"num": 21146, "title": "Destructing assignments with initializers do not affect control flow correctly in strictNullChecks", "labels": ["Bug"]}, {"num": 32273, "title": "Destruction of TypeScript ecosystem on npm is expanding", "labels": ["Needs Proposal"]}, {"num": 24827, "title": "Destructure of function parameters - Refactoring", "labels": ["Domain: Refactorings", "Needs Proposal", "Suggestion"]}, {"num": 37427, "title": "Destructured tuple elements are no longer literals", "labels": ["Bug", "help wanted"]}, {"num": 33659, "title": "Destructured variables shouldn't have access to subsequent variables", "labels": ["Bug"]}, {"num": 34780, "title": "Destructuring array into an object is assignable to an array type", "labels": ["Design Limitation"]}, {"num": 32959, "title": "Destructuring array polyfill isn't equivalent to new JS", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 31388, "title": "Destructuring array, ability to explicitly tell the variable is unused", "labels": ["In Discussion", "Suggestion"]}, {"num": 37818, "title": "Destructuring assertions gives unexpected results", "labels": ["Design Limitation"]}, {"num": 37693, "title": "Destructuring assignment with default does not correctly remove `undefined` from type", "labels": ["Bug"]}, {"num": 6784, "title": "Destructuring causes error for null/undefined properties", "labels": ["In Discussion", "Suggestion", "help wanted"]}, {"num": 17566, "title": "Destructuring index signature by computed property loses type information", "labels": ["Bug"]}, {"num": 24045, "title": "Destructuring parameter JSDoc not matched up correctly ", "labels": ["Bug", "Domain: JSDoc", "Domain: JavaScript"]}, {"num": 16789, "title": "Destructuring with computed key does not do type inferring even for indexed types", "labels": ["Bug"]}, {"num": 30517, "title": "Detect dead exports as well as per-module dead code", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 18978, "title": "Detect duplicate nodes during printing", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 33454, "title": "Detect exotic assignment patterns to JS prototypes", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 36463, "title": "Detect symbol-named properties as union discriminants", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 39995, "title": "Detect unreachable code in more scenarios", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 16030, "title": "Determine when isDeclaration and isDeclarationName should check for special property assignments", "labels": ["Infrastructure"]}, {"num": 13655, "title": "Diagnostic about \"left-hand side of a 'for...in' statement\" type is out of date", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 3276, "title": "Diagnostic elaboration is not consistently reported in language service", "labels": ["Bug", "help wanted"]}, {"num": 19686, "title": "Diagnostics and quick info disagree on type of variable", "labels": ["Bug"]}, {"num": 37454, "title": "didn't have wran message when use bad syntax", "labels": ["Bug"]}, {"num": 41262, "title": "Difference in behavior with encodedSemanticClassifications-full in TS 4.1 compared to using VS Code plugin", "labels": []}, {"num": 39509, "title": "Difference in overload pick between JS and TS with default generic type parameter", "labels": ["Needs Investigation"]}, {"num": 38623, "title": "Different inference behavior between method and function syntax as opposed to arrow functions.", "labels": ["Bug"]}, {"num": 40036, "title": "Different types in declaration and original when filtering union of objects by enum property", "labels": ["Needs More Info"]}, {"num": 27931, "title": "Differentiate between implicit any and explicit any in the Compiler API.", "labels": ["In Discussion", "Suggestion"]}, {"num": 21733, "title": "Differing results for inference produced when identical overload count changes", "labels": ["Bug"]}, {"num": 6015, "title": "Differing user-defined type guard and 'typeof' type guard behaviour when narrowing 'any'", "labels": ["Effort: Moderate", "Suggestion", "help wanted"]}, {"num": 23530, "title": "Directly indicate incorrect properties when assignment check fails", "labels": ["Domain: Error Messages", "Needs Proposal", "Suggestion"]}, {"num": 37240, "title": "Directly setting an object which contains an optional item defined with an interface doesn't bypass `Object is possibly 'null' or 'undefined'.`", "labels": ["Bug"]}, {"num": 37053, "title": "disable certain global types for specific files, or specify type roots for specific files.", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 18261, "title": "Disable formatting a region of code using directives", "labels": ["Awaiting More Feedback", "Domain: Formatter", "Suggestion", "VS Code Tracked"]}, {"num": 37332, "title": "Disable or remove specific code action/fixes/refactoring", "labels": ["In Discussion", "Suggestion"]}, {"num": 40426, "title": "Disable type checking for node_modules entirely", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 11920, "title": "disallow comparing to null and undefined unless they are valid cases in strict null mode", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 29883, "title": "Disallow excess properties to React components (for performance)", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 32713, "title": "Disallow getter that references itself", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 32895, "title": "Disallow values of type 'symbol' from being passed to 'Number' function/constructor or 'String' constructor", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 33596, "title": "Disallowing `throw`ing expressions that aren't assignable to `Error`", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 10530, "title": "Discriminant property type guard not applied with bracket notation", "labels": ["Bug", "Revisit"]}, {"num": 37488, "title": "Discriminant-specific error message not shown when one constituent of a union has a union-typed discriminant", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 37343, "title": "Discriminated union(?) not working when fields have same name?", "labels": ["Design Limitation"]}, {"num": 27541, "title": "Discriminated Unions - Multiple Fields, SubClassing/interfacings, kind field detection failure", "labels": ["Discussion"]}, {"num": 38144, "title": "Discriminated unions do not work with `never` / optional discriminant", "labels": ["Design Limitation"]}, {"num": 3628, "title": "Discussion: (Reflective) Type Model", "labels": ["Discussion"]}, {"num": 40683, "title": "Display operator informaton on mouse-over", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 29063, "title": "Distinguish between plain object types and class types", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 13195, "title": "Distinguish missing and undefined", "labels": ["Experimentation Needed", "Suggestion"]}, {"num": 27487, "title": "Distinguishing suggestions from global scope from local suggestions", "labels": ["Experience Enhancement", "Suggestion", "VS Code Tracked"]}, {"num": 36969, "title": "Distribute property type union members to create union of object types", "labels": ["Bug"]}, {"num": 6950, "title": "Distributing a library with es6-* deps without requiring users to install typings", "labels": ["@types", "In Discussion", "Suggestion"]}, {"num": 38004, "title": "Distributive as const", "labels": ["In Discussion", "Suggestion"]}, {"num": 21955, "title": "Divide by zero Typechecking", "labels": ["In Discussion", "Suggestion"]}, {"num": 40721, "title": "Do not perform typechecking if files are unchanged when compiling with `-p`", "labels": ["Domain: --incremental", "Domain: tsc -b", "In Discussion", "Suggestion"]}, {"num": 32060, "title": "Do not remove PURE comment after typed declaration", "labels": ["Bug"]}, {"num": 8227, "title": "Do not rename imports from ambient modules", "labels": ["Effort: Moderate", "Suggestion", "help wanted"]}, {"num": 3287, "title": "Do not strip end of file newlines in emit", "labels": ["Suggestion", "help wanted"]}, {"num": 23219, "title": "Do not type check .js files in referenced node_modules under `--checkJs` and `--maxNodeModuleJsDepth` > 0", "labels": ["Bug", "Domain: JavaScript", "checkJs"]}, {"num": 27364, "title": "Doc block: Remove \"*\" at beginning of line when between a code fence", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 13855, "title": "Doc comment applied to all components of dotted namespace declaration", "labels": ["Bug", "help wanted"]}, {"num": 20266, "title": "Doc Error - Worse than no Doc: JQuery Import Fails using ES6", "labels": ["Docs"]}, {"num": 37145, "title": "Docs - I am able to add new add new items to top level scope, contrary to what doc mention.", "labels": ["Docs"]}, {"num": 30976, "title": "Docs are wrong: export = and import = require(), says latter is required incorrectly", "labels": ["Docs"]}, {"num": 38919, "title": "Docs Meeting Notes, the v2 Handbook", "labels": ["Docs Meeting Notes"]}, {"num": 39422, "title": "Docs Meeting Notes: DT and .d.ts docs", "labels": ["Docs Meeting Notes"]}, {"num": 39118, "title": "Docs Meeting Notes: Mixins Reference Page", "labels": ["Docs Meeting Notes"]}, {"num": 10878, "title": "Docs on improving compilation speed", "labels": ["Docs"]}, {"num": 39615, "title": "Docs review: Twoslash Powered Bug Repros in Issues", "labels": ["Docs Meeting Notes"]}, {"num": 14509, "title": "Docs update for webpack 2.2", "labels": ["Docs"]}, {"num": 35653, "title": "Docs: \"Type assertion\" vs \"asserts\" keyword", "labels": ["Discussion"]}, {"num": 28980, "title": "Docs: Advanced Types section \"Interfaces vs. Type Aliases\" is contradictory", "labels": ["Docs"]}, {"num": 33326, "title": "docs: clarify declaration merging behavior", "labels": ["Docs"]}, {"num": 24082, "title": "Docs: Difference between esnext, es6, es2015 module targets", "labels": ["Docs"]}, {"num": 29961, "title": "Docs: Function Parameter Bivariance", "labels": ["Docs"]}, {"num": 31849, "title": "Document --incremental and composite project APIs", "labels": ["API", "Docs", "Fix Available", "help wanted"]}, {"num": 30666, "title": "Document --preserveWatchOutput in tsc --help", "labels": ["Docs"]}, {"num": 38737, "title": "Document how (lazy) type checking works", "labels": ["Docs"]}, {"num": 19369, "title": "Document how to disable Automatic Type Acquisition (ATA)", "labels": ["Docs"]}, {"num": 29048, "title": "Document quick fix (or whatever it's officially called)", "labels": ["In Discussion", "Suggestion"]}, {"num": 19915, "title": "Document which node kinds can have decorators", "labels": ["Infrastructure"]}, {"num": 33462, "title": "document.createTreewalker and document.createNodeIterator have missing signature types that which are supported both in IE, Firefox and Chrome", "labels": ["Bug", "Domain: lib.d.ts"]}, {"num": 30067, "title": "Document.onmousewheel event was removed from typescript", "labels": ["Bug", "Domain: lib.d.ts"]}, {"num": 33545, "title": "Documentation for --declaration and -d incorrect, missing --dry", "labels": ["Docs"]}, {"num": 41230, "title": "Documentation on how to transpile from TypeScript to JavaScript is missing (or very hard to find)", "labels": ["Question"]}, {"num": 36486, "title": "Documentation returned from constant type instead of from the constant itself ", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 23262, "title": "Documentation: Clarify declaration files and the declare keyword", "labels": ["Docs"]}, {"num": 11927, "title": "Documentation: Typo in section \"this parameters in callbacks\"?", "labels": ["Docs"]}, {"num": 32884, "title": "Documentation: usage of types/interfaces defined in modules on global", "labels": ["Docs"]}, {"num": 40926, "title": "Documented server plugin example fails with relative path", "labels": ["Bug"]}, {"num": 30022, "title": "DocumentOrShadowRoot.adoptedStyleSheets is missing in lib.dom.d.ts (constructible style sheets spec)", "labels": ["Domain: lib.d.ts", "Revisit", "Suggestion"]}, {"num": 17048, "title": "Doesn't handle unicode identifiers correctly", "labels": ["Bug", "ES6"]}, {"num": 31825, "title": "Doesn't support rename refactoring with importing from a module (yarn workspaces)", "labels": ["Bug"]}, {"num": 14374, "title": "Dom d.ts does not define event.target.parentNode", "labels": ["Bug", "Domain: lib.d.ts", "VS Code Tracked", "help wanted"]}, {"num": 16942, "title": "DOM File.lastModifiedDate is deprecated", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 20958, "title": "DOM FileReader load event needs to be more specific", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 16255, "title": "DOM lib is missing Intersection Observer API on window global", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 30024, "title": "DOM lib: Add support for Trusted Types API", "labels": ["Revisit", "Suggestion"]}, {"num": 38554, "title": "DOM lib: CSS namespace breaks CSS Typed OM", "labels": ["Bug", "Fix Available"]}, {"num": 36178, "title": "DOM suggestion: customisable `history.state` type", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 13569, "title": "DOM: Font Loading API", "labels": ["Domain: lib.d.ts", "Revisit", "Suggestion"]}, {"num": 20867, "title": "DOMContentLoaded is missing from autocomlete", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 17598, "title": "Don't allow `this` in decorator expressions", "labels": ["Bug", "Domain: Decorators", "ES Next"]}, {"num": 598, "title": "Don't allow falsely discarded parameters when determining overloaded signature compatibility", "labels": ["Suggestion", "help wanted"]}, {"num": 37282, "title": "Don't emit `const enum`s with reverse mapping (under `preserveConstEnum`)", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 40632, "title": "Don't emit abstract members", "labels": ["Bug", "Fix Available", "help wanted"]}, {"num": 36174, "title": "Don't escape valid Unicode characters in strings", "labels": ["Bug", "Effort: Difficult", "help wanted"]}, {"num": 18917, "title": "Don't extract constant to an unreachable location", "labels": ["Bug", "Domain: Refactorings"]}, {"num": 23454, "title": "Don't offer to change spelling to not-yet-defined variables", "labels": ["Awaiting More Feedback", "Domain: Quick Fixes", "Suggestion"]}, {"num": 22357, "title": "Don't offer to infer parameter type if inferred type is 'any'", "labels": ["Bug", "Domain: Quick Fixes"]}, {"num": 40635, "title": "Don't require to implement optional abstract properties", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 40701, "title": "Don't suggest converting custom promise-like returning function to async ones", "labels": ["Domain: Refactorings", "Experience Enhancement", "Suggestion", "help wanted"]}, {"num": 241, "title": "Don't widen return types of function expressions", "labels": ["Experimentation Needed", "Fix Available", "Suggestion"]}, {"num": 13812, "title": "Dot in string literal affects completion", "labels": ["Bug"]}, {"num": 3715, "title": "Down-level destructuring in `for..in` statement", "labels": ["Bug", "ES6"]}, {"num": 17885, "title": "DragEvent should accept a DragEventInit inheriting from MouseEventInit", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 35042, "title": "Drop emit of last semicolon in single-line object literal types", "labels": ["Suggestion"]}, {"num": 21923, "title": "Duplicate duplicate identifier errors", "labels": ["Bug", "VS Code Tracked", "help wanted"]}, {"num": 802, "title": "Duplicate identifier error does not show up for method signatures", "labels": ["Bug", "help wanted"]}, {"num": 36294, "title": "Duplicate identifier errors when using @types inside a Windows junction", "labels": ["Bug"]}, {"num": 22650, "title": "Duplicate names in generated list of vars", "labels": ["Bug", "help wanted"]}, {"num": 39197, "title": "duplicate Object.defineProperty when code emit with re-export a rename", "labels": ["Bug"]}, {"num": 21913, "title": "Duplicate type declarations won't be error", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 24996, "title": "Duplicated jsdoc should error", "labels": ["Domain: JavaScript", "In Discussion", "Suggestion", "checkJs"]}, {"num": 25668, "title": "Duplicated synthetic comment emit on module declarations", "labels": ["Bug"]}, {"num": 32103, "title": "Dynamic import breaks global onError with requirejs", "labels": ["Needs Investigation"]}, {"num": 37465, "title": "Dynamic object key + discriminated union + typeof could have a better narrowing type", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 11967, "title": "Dynamic Super Types", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 28892, "title": "Dynamic TagName causing error after version upgrade", "labels": ["Bug", "Domain: JSX/TSX"]}, {"num": 15274, "title": "Early reference to parameters defined via object destructuring should trigger an error", "labels": ["Bug"]}, {"num": 29526, "title": "Easier destructuring with type annotations on binding patterns", "labels": ["In Discussion", "Suggestion"]}, {"num": 15175, "title": "echoCancelation typo in lib.d.ts, lib.dom.d.ts, lib.es6.d.ts", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 41192, "title": "Editor Suggestion Backlog Slog, 10/21/2020", "labels": ["Design Notes"]}, {"num": 35524, "title": "Editor support for @see and {@link} in JSDoc comments tags", "labels": ["Awaiting More Feedback", "Domain: JSDoc", "Suggestion"]}, {"num": 7734, "title": "Editor: Excess or missing arguments in a function call highlight the whole call in red, including all anonymous function bodies", "labels": ["Bug", "help wanted"]}, {"num": 40310, "title": "Editors need a way to determine whether they are talking to an official TS Server", "labels": ["Infrastructure"]}, {"num": 36067, "title": "Either understand const arrow assertions or give better errors on them", "labels": ["Domain: Error Messages", "Experience Enhancement", "In Discussion", "Rescheduled", "Suggestion"]}, {"num": 38329, "title": "electron_node tsserver.js using >100 CPU", "labels": ["Needs More Info"]}, {"num": 36230, "title": "Element access with non-literal constant key should be narrowable", "labels": ["Experience Enhancement", "Experimentation Needed", "Suggestion"]}, {"num": 38838, "title": "ElementCSSInlineStyle.style should not be read-only", "labels": ["Bug", "Domain: lib.d.ts"]}, {"num": 17428, "title": "Eliminate non-generic functions", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 35030, "title": "Embedding types in module/namespace declarations", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 38146, "title": "Emit .d.ts for type-only usage of .d.ts files in a project", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 37840, "title": "emit code miss return type in .d.ts ( 3.9.0-dev.20200408 )", "labels": ["Needs Investigation"]}, {"num": 2272, "title": "Emit destructuring patterns in 'for...in' statements for ES3/5", "labels": ["Bug", "help wanted"]}, {"num": 843, "title": "Emit does not preserve empty lines", "labels": ["Bug", "help wanted"]}, {"num": 39149, "title": "emit file lost import module in .js with package use export = with build by new typescript@next", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 13522, "title": "Emit function name for inner downlevel async functions", "labels": ["Bug", "ES6"]}, {"num": 33370, "title": "Emit new `merge` helper for fixed object spread semantics", "labels": ["Needs More Info"]}, {"num": 30041, "title": "Emit Numerical Literal with different TokenFlags", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 41201, "title": "emitDecoratorMetadata should emit type resolvers", "labels": []}, {"num": 28799, "title": "Emiting instance member property in `.d.ts` instead of a function in Mixin contexts (when no override)", "labels": ["Design Limitation"]}, {"num": 35686, "title": "EmitResolver cannot handle JsxOpeningLikeElement and JsxOpeningFragment that didn't originate from the parse tree", "labels": ["Bug", "Domain: Transforms", "Rescheduled", "good first issue", "help wanted"]}, {"num": 41236, "title": "EmitResult typings are incomplete", "labels": ["API", "Question"]}, {"num": 7038, "title": "Emitted extends clause should come after deatched-comment at the top of the file ", "labels": ["Bug", "help wanted"]}, {"num": 39547, "title": "Emitting combined output declarations tries to resolve monorepo imports", "labels": ["Needs Investigation"]}, {"num": 13099, "title": "Empty `super` call should be allowed when extending map", "labels": ["Bug", "Domain: lib.d.ts", "ES6"]}, {"num": 31898, "title": "Empty function suggestion returned in completionInfo result", "labels": ["Bug"]}, {"num": 36692, "title": "Empty JSDocTemplateTag has single type parameter with zero width", "labels": ["Bug", "GraceHopperOSD", "good first issue", "help wanted"]}, {"num": 21826, "title": "Empty type inferred by Object.entries", "labels": ["Bug", "Domain: lib.d.ts", "Fix Available", "Fixed"]}, {"num": 40671, "title": "Enable \"Convert to template string\" on expressions that don't start with a string", "labels": ["Bug", "Domain: Quick Fixes", "Fix Available", "GraceHopperOSD", "good first issue", "help wanted"]}, {"num": 39311, "title": "Enable \"useDefineForClassFields\" in tsc --init", "labels": ["In Discussion", "Suggestion"]}, {"num": 20290, "title": "Enable `jake runtests t=` to match on unit test filenames", "labels": ["Infrastructure"]}, {"num": 36207, "title": "Enable a library to support an older compiler than the one used to build it", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 40793, "title": "Enable constants as computed values for string enums", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 6209, "title": "Enable Go to Implementation in Typescript Editors", "labels": ["API", "Domain: Symbol Navigation", "Experience Enhancement", "Suggestion", "VS Code Tracked"]}, {"num": 6802, "title": "Enable JavaScript specific warning behavior", "labels": ["Committed", "Domain: JavaScript", "Suggestion", "VS Code Tracked"]}, {"num": 38890, "title": "Enable node typings if file starts with node shebang", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 40425, "title": "Enable to write async functions with the defined return type more simply, from :Promise<typename> to :typename@", "labels": ["Declined", "Suggestion"]}, {"num": 14520, "title": "Enable type parameter lower-bound syntax", "labels": ["In Discussion", "Suggestion"]}, {"num": 31573, "title": "Encapsulate type refactoring", "labels": ["Awaiting More Feedback", "Domain: Refactorings", "Suggestion"]}, {"num": 39777, "title": "End tags ignore indentation rules in Javascript React", "labels": ["Bug", "Domain: Formatter", "GraceHopperOSD", "help wanted"]}, {"num": 38222, "title": "Enforce consistent imports when directory is in jsconfig's paths", "labels": ["Needs Investigation"]}, {"num": 37336, "title": "Enforce correct bounds on assignability when the target is a lookup type on a constrained type parameter", "labels": ["In Discussion", "Suggestion"]}, {"num": 37842, "title": "Enhance event type of ServiceWorker `onstatechange` listener", "labels": ["Bug", "Domain: lib.d.ts"]}, {"num": 34692, "title": "Enhance members of literal type like const array type", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 38836, "title": "Ensure find-all-refs works on unresolved locals", "labels": ["Domain: Symbol Navigation", "In Discussion", "Rescheduled", "Suggestion"]}, {"num": 36639, "title": "Ensure generated `.d.ts` files compile with no errors under `noImplicitAny`", "labels": ["Bug", "Infrastructure"]}, {"num": 29879, "title": "Enum assignability false positive", "labels": ["Bug"]}, {"num": 25083, "title": "Enum keys not accepted as computed properties if their name is not a valid identifier", "labels": ["In Discussion", "Suggestion"]}, {"num": 35867, "title": "Enum members aren't subtype reduced in unions", "labels": ["Bug"]}, {"num": 15495, "title": "Enum not block-scoped given closure and --target es5", "labels": ["Bug"]}, {"num": 30585, "title": "Enum redeclared as var inside block scope", "labels": ["Bug"]}, {"num": 38658, "title": "enum to string (and number) literals keeping the opacity", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 3845, "title": "Enum types are not checked in binary operators", "labels": ["Breaking Change", "Bug", "help wanted"]}, {"num": 35329, "title": "Enum used as object key is not exported in declaration", "labels": ["Bug", "Domain: Declaration Emit"]}, {"num": 41326, "title": "Enum-based constants can be used as computed property names more than once ", "labels": []}, {"num": 39773, "title": "Enum-specific interfaces enums could implement", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 39627, "title": "Enumerating an enum: Wrong thing is allowed and right thing is not with with noImplicityAny", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 25894, "title": "Enums and interfaces do not have definitions in quick info/tooltips", "labels": ["Domain: Quick Info", "Experience Enhancement", "Suggestion", "help wanted"]}, {"num": 32690, "title": "Enums behave unexpectedly, the workaround is verbose. There should be a less verbose way.", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 27976, "title": "Enums does not support literal typing with computed values", "labels": ["Design Limitation"]}, {"num": 40740, "title": "Enums should have a null prototype", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 37448, "title": "Enums, string/number types of interfaces/classes cannot be used as index signatures", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 20352, "title": "Equivalent of Flow's $ObjMap", "labels": ["In Discussion", "Suggestion"]}, {"num": 15835, "title": "Erroneous control flow type narrowing in loops", "labels": ["Bug"]}, {"num": 13262, "title": "Erronous documentation for property decorators?", "labels": ["Docs"]}, {"num": 19639, "title": "Error \"'this' implicitly has type 'any'\" when used .bind()", "labels": ["Awaiting More Feedback", "Domain: JavaScript", "Suggestion"]}, {"num": 27436, "title": "Error \"Cannot write file ... because it would overwrite input file.\"", "labels": ["Needs More Info"]}, {"num": 33143, "title": "Error elaborations should not be de-duped", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 25330, "title": "Error for missing await in conditional", "labels": ["In Discussion", "Suggestion"]}, {"num": 14350, "title": "Error for nested type guard", "labels": ["Bug"]}, {"num": 40331, "title": "Error in '<anonymous>' during 'completionInfo'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 41057, "title": "Error in '<anonymous>' during 'getCodeFixes'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 39875, "title": "Error in '<anonymous>' during 'getEditsForFileRename'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 41059, "title": "Error in '<anonymous>' during 'signatureHelp'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 39512, "title": "Error in '_loop_10' during 'getCodeFixes'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 41058, "title": "Error in '_loop_16' during 'getApplicableRefactors'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 41248, "title": "Error in 'acquireOrUpdateDocument' during 'updateOpen'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 39872, "title": "Error in 'addSyntheticNodes' during 'getOutliningSpans'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 39876, "title": "Error in 'cleanText' during 'navtree'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 41062, "title": "Error in 'createDetachedDiagnostic' during 'completionInfo'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 40084, "title": "Error in 'createFileDiagnostic' during 'encodedSemanticClassifications-full'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 40083, "title": "Error in 'createFileDiagnostic' during 'getApplicableRefactors'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 40087, "title": "Error in 'createTextSpan' during 'getCodeFixes'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 39511, "title": "Error in 'first' during 'completionEntryDetails'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 40082, "title": "Error in 'getExportAssignmentExport' during 'documentHighlights'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 39584, "title": "Error in 'getExportEqualsLocalSymbol' during 'documentHighlights'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 39766, "title": "Error in 'getImportFixForSymbol' during 'completionEntryDetails'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 39877, "title": "Error in 'getImportFixForSymbol' during 'getCodeFixes'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 39975, "title": "Error in 'getNameForExportedSymbol' during 'completionInfo'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 41061, "title": "Error in 'getSpans' during 'navtree'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 40418, "title": "Error in 'getSymbolParentOrFail' during 'completionInfo'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 39878, "title": "Error in 'getValidSourceFile' during 'definitionAndBoundSpan'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 39874, "title": "Error in 'getValidSourceFile' during 'documentHighlights'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 39513, "title": "Error in 'getValidSourceFile' during 'getApplicableRefactors'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 39873, "title": "Error in 'getValidSourceFile' during 'quickinfo'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 39765, "title": "Error in 'Session.getCodeFixes' during 'getCodeFixes'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 41060, "title": "Error in 'updateSourceFile' during 'completionInfo'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 40086, "title": "Error in 'updateSourceFile' during 'getOutliningSpans'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 40085, "title": "Error in 'updateSourceFile' during 'navtree'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 26174, "title": "Error in catch clause should be unknown", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 13654, "title": "Error in find-all-references for 3 spread types", "labels": ["Bug"]}, {"num": 31305, "title": "Error in module-plugin.d.ts template", "labels": ["Docs"]}, {"num": 16360, "title": "Error inferring tuple type arguments", "labels": ["Bug"]}, {"num": 17873, "title": "Error inferring types of promise function", "labels": ["Bug"]}, {"num": 39751, "title": "Error message for assigning to an imported variable is confusing", "labels": ["Domain: Error Messages", "Experience Enhancement", "GraceHopperOSD", "good first issue", "help wanted"]}, {"num": 10203, "title": "Error message for invalid string literal type could be improved", "labels": ["Domain: Error Messages", "Effort: Moderate", "Experience Enhancement", "Suggestion", "help wanted"]}, {"num": 28363, "title": "Error message on JSX in .ts file should suggest using .tsx", "labels": ["Domain: Error Messages", "Experience Enhancement", "Suggestion"]}, {"num": 29648, "title": "Error message related to JSDoc for non-JSDoc syntax error", "labels": ["Bug", "Domain: Error Messages", "GraceHopperOSD", "good first issue", "help wanted"]}, {"num": 29759, "title": "Error messages should place most relevant information first.", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 33198, "title": "Error on static class members named 'constructor' should be consistent", "labels": ["Awaiting More Feedback", "In Discussion", "Suggestion"]}, {"num": 26996, "title": "Error output: difficult to understand multistorey errors", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 26986, "title": "Error output: Don't deep compare to native objects", "labels": ["Committed", "Domain: Error Messages", "Rescheduled", "Suggestion"]}, {"num": 38589, "title": "Error property-will-be-overwritten-by-spread for non-enumerable properties", "labels": ["Design Limitation"]}, {"num": 13978, "title": "error TS18003: No inputs were found in config file...", "labels": ["Bug", "help wanted"]}, {"num": 27956, "title": "error TS2688: Cannot find type definition file for...random paths.", "labels": ["Bug", "Domain: Error Messages"]}, {"num": 33100, "title": "Error TS4060 gets incorrectly triggered for inferred return types in the presence of global declarations", "labels": ["Needs More Info"]}, {"num": 22423, "title": "error TS5033: Could not write file EEXIST", "labels": ["Bug", "help wanted"]}, {"num": 12405, "title": "error TS5053: Option 'declarationDir' cannot be specified with option 'outFile'.", "labels": ["Suggestion", "help wanted"]}, {"num": 30978, "title": "error TS5071: Option '--resolveJsonModule' can only be specified when module code generation is 'commonjs', 'amd', 'es2015' or 'esNext'", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 40096, "title": "error when a variable is both read as a parameter and written as a result of a function call in an async do while loop", "labels": ["Has Repro"]}, {"num": 13565, "title": "Error when augmenting UMD module", "labels": ["Bug"]}, {"num": 3200, "title": "Error when modules depend on each other", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 41252, "title": "Error when overriding an overloaded method", "labels": ["Working as Intended"]}, {"num": 40065, "title": "Error while trying to run typescript \"Add all missing imports\" quick fix", "labels": ["Bug"]}, {"num": 41328, "title": "Error with advanced types (Record, keyof, Exclude)", "labels": []}, {"num": 20287, "title": "Error with strictNullChecks when destructuring and renaming", "labels": ["Bug"]}, {"num": 29169, "title": "Error,use decorator on ReactComponent ,ComponentClass can't assignable to type 'void | typeof Main'", "labels": ["Design Limitation", "Domain: Decorators"]}, {"num": 33331, "title": "Error: Could not find source file: '%PATH%'. in 'getValidSourceFile' during 'getApplicableRefactors'", "labels": ["Source: Telemetry"]}, {"num": 29622, "title": "Error: Debug Failure getDisplayName for babel project while getting program.getTypeChecker()", "labels": ["API", "Bug", "Crash"]}, {"num": 38062, "title": "Error: Debug Failure. add-name-to-nameless-parameter operates on identifiers, but got a DotDotDotToken in 'makeChange' during 'getCodeFixes'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 35516, "title": "Error: Debug Failure. Did not expect ClassDeclaration to have an Identifier in its trivia in 'addSyntheticNodes' during 'getOutliningSpans'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 32857, "title": "Error: Debug Failure. Did not expect JsxClosingFragment to have an Identifier in its trivia in 'addSyntheticNodes' during 'documentHighlights'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 32876, "title": "Error: Debug Failure. Did not expect JsxClosingFragment to have an Identifier in its trivia in 'addSyntheticNodes' during 'getApplicableRefactors'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 38317, "title": "Error: Debug Failure. Did not expect JsxClosingFragment to have an Identifier in its trivia in 'addSyntheticNodes' during 'getCodeFixes'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 32850, "title": "Error: Debug Failure. Did not expect JsxClosingFragment to have an Identifier in its trivia in 'addSyntheticNodes' during 'jsxClosingTag'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 32861, "title": "Error: Debug Failure. Did not expect JsxClosingFragment to have an Identifier in its trivia in 'addSyntheticNodes' during 'signatureHelp'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 32871, "title": "Error: Debug Failure. Did not expect JsxExpression to have an Identifier in its trivia in 'addSyntheticNodes' during 'completions'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 36711, "title": "Error: Debug Failure. Did not expect JsxSelfClosingElement to have an Identifier in its trivia in 'addSyntheticNodes' during 'documentHighlights'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 33315, "title": "Error: Debug Failure. Expected 1941 <= 1559 in 'Object.assertLessThanOrEqual' during 'getApplicableRefactors'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 38057, "title": "Error: Debug Failure. Expected 3089 <= 3085 in 'Object.assertLessThanOrEqual' during 'completionEntryDetails'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 37532, "title": "Error: Debug Failure. Expected export symbol to have a parent in 'Object.assertDefined' during 'documentHighlights'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 33720, "title": "Error: Debug Failure. Expected export symbol to have a parent in 'Object.assertDefined' during 'documentHighlights'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 34857, "title": "Error: Debug Failure. False expression.", "labels": ["Needs More Info"]}, {"num": 38060, "title": "Error: Debug Failure. False expression. in 'consumeTokenAndAdvanceScanner' during 'getCodeFixes'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 32856, "title": "Error: Debug Failure. False expression. in 'doChange' during 'getCodeFixes'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 38316, "title": "Error: Debug Failure. False expression. in 'getChildListThatStartsWithOpenerToken' during 'signatureHelp'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 22078, "title": "Error: Debug Failure. False expression. in 'getClass' during 'getCodeFixes'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 35444, "title": "Error: Debug Failure. False expression. in 'getPos' during 'getCodeFixes'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 38320, "title": "Error: Debug Failure. False expression. in 'NodeTypingsInstaller.installPackage' during 'applyCodeActionCommand'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 37685, "title": "Error: Debug Failure. False expression. in 'Object.createRange' during 'getEditsForFileRename'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 32853, "title": "Error: Debug Failure. False expression. in 'Object.getImportCompletionAction' during 'completionEntryDetails'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 21804, "title": "Error: Debug Failure. False expression. in 'symbolToParameterDeclaration' during 'getCodeFixes'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 22182, "title": "Error: Debug Failure. False expression. in 'tryDeleteIdentifier' during 'getCodeFixes'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 38063, "title": "Error: Debug Failure. False expression. in 'tryReuseStructureFromOldProgram' during 'getApplicableRefactors'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 33722, "title": "Error: Debug Failure. False expression. in 'unknown' during 'documentHighlights'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 33312, "title": "Error: Debug Failure. False expression. in 'unknown' during 'documentHighlights'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 21815, "title": "Error: Debug Failure. False expression: `JsxText` tokens should not be the first child of `JsxElement | JsxSelfClosingElement` in 'findRightmostChildNodeWithTokens' during 'quickinfo'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 36977, "title": "Error: Debug Failure. False expression: Expected line to be non-zero in 'failIfInvalidLocation' during 'navtree'", "labels": ["Bug", "Rescheduled", "Source: Telemetry"]}, {"num": 38071, "title": "Error: Debug Failure. False expression: Some exportInfo should match the specified moduleSymbol in 'Object.getImportCompletionAction' during 'getCodeFixes'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 32868, "title": "Error: Debug Failure. False expression: This failure could trigger https://github.com/Microsoft/TypeScript/issues/20809 in 'getErrorSpanForNode' during 'getApplicableRefactors'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 36719, "title": "Error: Debug Failure. False expression: Token end is child end in 'processChildNode' during 'getCodeFixes'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 37684, "title": "Error: Debug Failure. False expression: token should be at the constructor keyword in 'getNode' during 'getCodeFixes'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 33851, "title": "Error: Debug Failure. in 'Object.assertDefined' during 'completionEntryDetails'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 33188, "title": "Error: Debug Failure. in 'Object.assertDefined' during 'documentHighlights'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 33556, "title": "Error: Debug Failure. in 'Object.assertDefined' during 'getApplicableRefactors'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 32863, "title": "Error: Debug Failure. in 'Object.assertDefined' during 'getApplicableRefactors'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 33077, "title": "Error: Debug Failure. in 'Object.assertDefined' during 'getCodeFixes'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 32873, "title": "Error: Debug Failure. in 'Object.assertDefined' during 'getCodeFixes'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 32872, "title": "Error: Debug Failure. in 'Object.assertDefined' during 'getCodeFixes'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 38066, "title": "Error: Debug Failure. in 'resolveAlias' during 'quickinfo'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 33721, "title": "Error: Debug Failure. Invalid cast. The supplied value [object Object] did not pass the test 'isCallExpression'. in 'Object.cast' during 'getCodeFixes'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 36715, "title": "Error: Debug Failure. Invalid cast. The supplied value [object Object] did not pass the test 'isCaseClause'. in 'Object.cast' during 'completionEntryDetails'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 36581, "title": "Error: Debug Failure. Invalid cast. The supplied value [object Object] did not pass the test 'isDeclarationWithTypeParameterChildren'. in 'Object.cast' during 'getCodeFixes'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 33316, "title": "Error: Debug Failure. Invalid cast. The supplied value [object Object] did not pass the test 'isIdentifier'. in 'Object.cast' during 'getCodeFixes'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 32852, "title": "Error: Debug Failure. Invalid cast. The supplied value [object Object] did not pass the test 'isParameter'. in 'Object.cast' during 'getCodeFixes'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 32867, "title": "Error: Debug Failure. Invalid cast. The supplied value [object Object] did not pass the test 'isStringLiteral'. in 'Object.cast' during 'getCodeFixes'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 38059, "title": "Error: Debug Failure. Invalid cast. The supplied value [object Object] did not pass the test 'isTypeAliasDeclaration'. in 'Object.cast' during 'getCodeFixes'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 38322, "title": "Error: Debug Failure. Invalid cast. The supplied value [object Object] did not pass the test 'isTypeParameterDeclaration'. in 'Object.cast' during 'getApplicableRefactors'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 38321, "title": "Error: Debug Failure. Invalid cast. The supplied value [object Object] did not pass the test 'isTypeParameterDeclaration'. in 'Object.cast' during 'getApplicableRefactors'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 32860, "title": "Error: Debug Failure. Invalid cast. The supplied value [object Object] did not pass the test 'isTypeParameterDeclaration'. in 'Object.cast' during 'getApplicableRefactors'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 33309, "title": "Error: Debug Failure. Special property assignment kind does not have a module as its parent. Assignment is { name: exports; flags: Property|Transient; declarations: PropertySignature,PropertySignature }, parent is { name: NodeModule; flags: Interface; declarations: InterfaceDeclaration } in 'getSpecialPropertyExport' during 'documentHighlights'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 36717, "title": "Error: length < 0 in 'createTextSpan' during 'getCodeFixes'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 33186, "title": "Error: No Project. in 'Object.ThrowNoProject' during 'getApplicableRefactors'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 33553, "title": "Error: No Project. in 'Object.ThrowNoProject' during 'getOutliningSpans'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 33554, "title": "Error: No Project. in 'Object.ThrowNoProject' during 'navtree'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 38068, "title": "Error: No Project. in 'Object.ThrowNoProject' during 'references'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 36452, "title": "Error: Not supported in 'Object.get yieldType [as yieldType]' during 'encodedSemanticClassifications-full'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 28833, "title": "Error: TS2393: Duplicate function implementation.", "labels": ["Needs More Info"]}, {"num": 21760, "title": "Error: Type cannot be used to index type after two indexes", "labels": ["Bug"]}, {"num": 29256, "title": "Error:(6, 21) TS2307: Cannot find module 'normalize-num'.", "labels": ["Needs More Info"]}, {"num": 29013, "title": "Errors on non-callable unions should be more specific", "labels": ["Domain: Error Messages", "Experience Enhancement", "Suggestion"]}, {"num": 36180, "title": "ES3 is a poor default for typescript", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 29347, "title": "ES5 + downlevelIteration on spread operator disables strictNullChecks ", "labels": ["Bug"]}, {"num": 16132, "title": "es5.d.ts lib does not match the ECMAScript 5.1 Spec", "labels": ["Discussion"]}, {"num": 14069, "title": "ES6 class extension not working the same as in native ES6.", "labels": ["Bug", "ES6"]}, {"num": 33044, "title": "ES6 export variable binding incorrect post increment", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 27329, "title": "ES6 module declarations should be marked to exclude them from `allowSyntheticDefaultImports`", "labels": ["In Discussion", "Suggestion"]}, {"num": 33043, "title": "ES6 module immediately exported var clash with local \"exports\" variable", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 8559, "title": "ES6 modules cannot use \"await\" as an identifier", "labels": ["Bug", "ES6"]}, {"num": 28890, "title": "es6 modules without imports or nontrivial exports compile to ambiguous output", "labels": ["Bug", "Domain: ES Modules"]}, {"num": 32191, "title": "escape() function not marked as deprecated in lib.es5.d.ts", "labels": ["Bug", "Domain: lib.d.ts"]}, {"num": 36149, "title": "esModuleInterop + named export evaluated differently depends on usage", "labels": ["Needs More Info"]}, {"num": 21872, "title": "esModuleInterop causes is not a constructor function type", "labels": ["In Discussion", "Suggestion"]}, {"num": 39464, "title": "esModuleInterop doesn't affect reexports", "labels": ["Needs Investigation"]}, {"num": 22851, "title": "esModuleInterop should work even when compiling to esnext modules", "labels": ["Domain: ES Modules", "In Discussion", "Suggestion"]}, {"num": 21656, "title": "esmoduleinterop: Improve error message when calling static method on class", "labels": ["Domain: Error Messages", "Suggestion", "help wanted"]}, {"num": 40991, "title": "esModuleInterop:true breaks intellisense", "labels": ["Needs More Info"]}, {"num": 31794, "title": "esnext conflicts with other versions specified with lib field", "labels": ["Needs More Info"]}, {"num": 31352, "title": "Evaluate compile-time constants", "labels": ["Suggestion", "Too Complex"]}, {"num": 30669, "title": "event argument has no target.result property on  IDBRequest: success event", "labels": ["Bug", "Domain: lib.d.ts"]}, {"num": 14196, "title": "EventTarget.removeEventListener's second argument is incorrectly optional", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 36892, "title": "every does not respect typeguard ", "labels": ["Design Limitation"]}, {"num": 38083, "title": "Evolving any behavior for local function variables", "labels": ["In Discussion", "Suggestion"]}, {"num": 35899, "title": "Exact generic constraints", "labels": ["Discussion"]}, {"num": 12936, "title": "Exact Types", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 32000, "title": "Excess property allowed in union, even if it's invalid for each part of the union", "labels": ["Bug"]}, {"num": 20060, "title": "Excess property check misses an error with union+string indexer", "labels": ["Bug"]}, {"num": 28926, "title": "Excess property checking on nested objects doesn't work in JSX as of TS 3.2", "labels": ["Bug", "Domain: JSX/TSX"]}, {"num": 27564, "title": "Excess property errors reported on overloads report errors on the wrong overload", "labels": ["Bug", "Domain: Error Messages"]}, {"num": 29112, "title": "Excessive stack depth comparing types with TS 3.2 ", "labels": ["Bug", "Domain: Mapped Types"]}, {"num": 21592, "title": "Excessive Stack Depth from DeepPartial/RecursivePartial in 2.7.x", "labels": ["Bug", "Crash"]}, {"num": 18472, "title": "exclude not working for subdirectories", "labels": ["Bug", "help wanted"]}, {"num": 35395, "title": "Exclude specific files from auto import suggestions", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 37768, "title": "Exclude<keyof T, 'x'> should be assignable to Exclude<Exclude<keyof T, 'x'>, 'x'>", "labels": ["Bug"]}, {"num": 31669, "title": "Exclude<keyof this , ... > not working", "labels": ["Design Limitation"]}, {"num": 38254, "title": "Exclude<string, \"foo\"> is not working", "labels": ["Design Limitation"]}, {"num": 23572, "title": "Exhaustiveness checking against an enum only works when the enum has >1 member.", "labels": ["Bug"]}, {"num": 14466, "title": "Existential type?", "labels": ["In Discussion", "Suggestion"]}, {"num": 37030, "title": "Expand Selection in function and arrow function skips body block", "labels": ["Bug"]}, {"num": 39033, "title": "Expand when `isNewIdentifierLocation` is set in the syntax server", "labels": ["In Discussion", "Suggestion"]}, {"num": 31778, "title": "expando fields not added to symbol exports ", "labels": ["Needs Investigation"]}, {"num": 28010, "title": "Expected at least x arguments, but got x or more", "labels": ["Domain: Related Error Spans", "Experience Enhancement", "Suggestion"]}, {"num": 23911, "title": "Experiment with always using parameters from base types for derived methods", "labels": ["In Discussion", "Suggestion"]}, {"num": 22854, "title": "Experiment with trailing comma insertion text for object literal completions", "labels": ["Domain: Completion Lists", "Needs Proposal", "Suggestion"]}, {"num": 39596, "title": "Experimental Decorators don't work in `export` statements", "labels": ["Suggestion", "Waiting for TC39"]}, {"num": 31660, "title": "Experimental file watcher (or something else) doesn't seem to handle d.ts files properly.", "labels": ["Needs More Info"]}, {"num": 18499, "title": "Explain why private and protected members in a class affect their compatibility", "labels": ["Docs"]}, {"num": 3500, "title": "Explicit any type in for..in loop", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 32937, "title": "Explicit generic type argument gets lost when attempting to carry through member expression", "labels": ["Needs More Info"]}, {"num": 33437, "title": "Explicit module resolution", "labels": ["In Discussion", "Suggestion"]}, {"num": 33394, "title": "explicit return function type produces error when generic function result is returned directly", "labels": ["Needs More Info"]}, {"num": 25053, "title": "explicit type assignment modifier keyword for function/constructor parameters typically", "labels": ["Discussion"]}, {"num": 29350, "title": "Exponential compilation slowdown with property accessors and conditional types", "labels": ["Bug", "Domain: Conditional Types", "Domain: Performance"]}, {"num": 6377, "title": "export = {class expression} does not correctly export the type", "labels": ["In Discussion", "Suggestion"]}, {"num": 28514, "title": "Export a object with comment ,but the comment is missing after build a *.d.ts file", "labels": ["Domain: Comment Emit", "Revisit", "Suggestion"]}, {"num": 41316, "title": "export access modifiers", "labels": []}, {"num": 30897, "title": "Export an interface for JSON `CompilerOptions`", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 20990, "title": "export as namespace doesn't support nesting namespaces", "labels": ["In Discussion", "Suggestion"]}, {"num": 35905, "title": "export binding destructuring downleveling changes runtime semantics", "labels": ["Bug", "Rescheduled"]}, {"num": 38899, "title": "Export Typescript libraries as individual interfaces as well", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 8015, "title": "Exported ambient variables are neither emitted nor an error", "labels": ["Bug"]}, {"num": 18195, "title": "exported definitions for mix-in lack proper return type for functions returning \"this\"", "labels": ["Bug"]}, {"num": 36792, "title": "Exported type merged with 'export * as namespace...' only exports type meaning.", "labels": ["Bug"]}, {"num": 35348, "title": "exporting object and importing object property declared with jsdoc @enum leads to 'declared but its value is never read' ", "labels": ["Bug", "Rescheduled"]}, {"num": 29581, "title": "Expose \"getNewLineCharacter\" function", "labels": ["API", "In Discussion", "Suggestion"]}, {"num": 4466, "title": "Expose `--init` functionality in a tsserver command", "labels": ["Suggestion", "help wanted"]}, {"num": 37365, "title": "Expose `getImmediateAliasedSymbol()` in Type Checker API", "labels": ["In Discussion", "Suggestion"]}, {"num": 26410, "title": "Expose `getOutputJavaScriptFileName` from tsbuild", "labels": ["Committed", "Suggestion", "help wanted"]}, {"num": 37711, "title": "Expose `isArrayType`, `isTupleType`, `isArrayLikeType` in TypeChecker", "labels": ["In Discussion", "Suggestion"]}, {"num": 33994, "title": "Expose `resolvedModules` property of `SourceFile`", "labels": ["API", "Awaiting More Feedback", "Suggestion"]}, {"num": 7393, "title": "Expose API for getting JSDoc nodes in TypeScript files", "labels": ["API", "In Discussion", "Suggestion"]}, {"num": 28447, "title": "Expose compiler option allowNonTsExtensions", "labels": ["In Discussion", "Suggestion"]}, {"num": 18896, "title": "Expose configuration hook for custom module resolution", "labels": ["In Discussion", "Suggestion"]}, {"num": 35052, "title": "Expose emitted module specifiers on AMD outfile emit", "labels": ["In Discussion", "Suggestion"]}, {"num": 27997, "title": "Expose getDiagnosticsProducingTypeChecker to avoid duplicate type instantiations", "labels": ["API", "In Discussion", "Suggestion"]}, {"num": 33480, "title": "Expose inferred type for use in type annotations", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 39248, "title": "Expose isTypeReference function in public API", "labels": ["In Discussion", "Suggestion"]}, {"num": 29521, "title": "Expose JsDoc default value for optional parameters in AST", "labels": ["API", "Domain: JSDoc", "In Discussion", "Suggestion"]}, {"num": 36252, "title": "Expose more internal api for making language service plugins.", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 17516, "title": "Expose serializers from TypeScript transformer (ts.ts)", "labels": ["API", "Needs Proposal", "Suggestion"]}, {"num": 38212, "title": "expose textChanges API", "labels": ["In Discussion", "Suggestion"]}, {"num": 13793, "title": "Expose ts.matchFiles as public API to make implementing readDirectory easier.", "labels": ["API", "Experience Enhancement", "Suggestion", "help wanted"]}, {"num": 41210, "title": "Expose type level api ", "labels": []}, {"num": 34545, "title": "Expose TypeScript-specific globbing behavior", "labels": ["API", "In Discussion", "Rescheduled", "Suggestion"]}, {"num": 37772, "title": "Exposing canonical filename logic", "labels": ["API"]}, {"num": 35959, "title": "Extend createMethodSignature and updateMethodSignature with 'modifiers' argument", "labels": ["API", "In Discussion", "Suggestion"]}, {"num": 26732, "title": "Extend external modules not work", "labels": ["Bug"]}, {"num": 28410, "title": "Extend tsserver interface to allow refactoring failure reporting", "labels": ["API", "Domain: TSServer", "In Discussion", "Suggestion"]}, {"num": 24828, "title": "Extended Numeric Literals", "labels": ["ES Next", "Suggestion", "Waiting for TC39"]}, {"num": 17592, "title": "Extending string-based enums", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 27602, "title": "Extending wrapper objects (e.g. Number, String, etc.)", "labels": ["Design Limitation"]}, {"num": 243, "title": "External interfaces included in IDE symbol space", "labels": ["API", "Suggestion", "help wanted"]}, {"num": 669, "title": "External modules with AMD always requires \"exports\" even when it is not used", "labels": ["Suggestion", "help wanted"]}, {"num": 17904, "title": "Extra arguments with defaults get implicit any even with noImplicitAny", "labels": ["Bug"]}, {"num": 13212, "title": "Extra checks with -d not executed with --noEmit", "labels": ["Bug"]}, {"num": 15679, "title": "Extra entries for JavaScript auto complete(intellisense) make no sense", "labels": ["Committed", "Domain: Completion Lists", "Domain: JavaScript", "Suggestion"]}, {"num": 32202, "title": "Extra slashes allowed in import paths", "labels": ["Bug"]}, {"num": 35349, "title": "Extract Constant Refactoring: Add way to extract all instances of selected expression", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 24068, "title": "Extract function parameters or change function return type in mapped types", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 18147, "title": "Extract function should remove uncessary parenthesis", "labels": ["Domain: Refactorings", "Experience Enhancement", "Suggestion"]}, {"num": 18145, "title": "Extract method / function should generate signature with return type", "labels": ["Awaiting More Feedback", "Domain: Refactorings", "Suggestion"]}, {"num": 40423, "title": "Extract to constant refactor does not preserve type of context-sensitive function calls", "labels": ["Bug", "Domain: Refactorings"]}, {"num": 40723, "title": "Extract to function in upper scope", "labels": ["Awaiting More Feedback", "Domain: Refactorings", "Suggestion"]}, {"num": 38074, "title": "Extract to function should include leading line comment if it is part of user's selection", "labels": ["Bug", "Domain: Refactorings"]}, {"num": 24879, "title": "Extract to method in class should use static method if possible", "labels": ["Awaiting More Feedback", "Domain: Refactorings", "Suggestion"]}, {"num": 20509, "title": "Extract to method should preserve newlines", "labels": ["Bug", "Domain: Refactorings", "help wanted"]}, {"num": 39841, "title": "Extract types from definition file", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 33428, "title": "F12 go to definition get 2 same result", "labels": ["Bug", "Domain: Symbol Navigation"]}, {"num": 25221, "title": "factory: createBinary doesn't parenthesise unary expression as LHS of exponentiation", "labels": ["API", "Bug", "help wanted"]}, {"num": 25224, "title": "factory: doesn't always parenthesise 'yield'", "labels": ["API", "Bug", "help wanted"]}, {"num": 38503, "title": "Fail to short circuit an undefined private class field with optional chaining", "labels": ["Bug", "Fix Available", "Rescheduled"]}, {"num": 13345, "title": "Fail when JSX.IntrinsicElements is an intersection type", "labels": ["Bug", "Domain: JSX/TSX"]}, {"num": 32586, "title": "Fails for simple type inference", "labels": ["Design Limitation"]}, {"num": 29248, "title": "Fails to calculate arguments length, when combining tuple spread with extra arguments", "labels": ["In Discussion", "Suggestion"]}, {"num": 37675, "title": "Fails to infer the value at a given key for concrete types", "labels": ["Design Limitation"]}, {"num": 39133, "title": "Fails type check for type unions as keys to the Map constructor", "labels": ["Bug"]}, {"num": 24090, "title": "False positive 'Expression expected' error in async generator", "labels": ["Bug", "help wanted"]}, {"num": 32263, "title": "False positive error report for interface type missing index signature, thus not assignable to object type with `unknown` values.", "labels": ["Docs"]}, {"num": 40440, "title": "False positive in \"variable is never read\" when using object.defineProperty", "labels": ["Design Limitation"]}, {"num": 25891, "title": "Feat: Extract function with jsx selection should be replaced with jsx sfc", "labels": ["Awaiting More Feedback", "Domain: Refactorings", "Suggestion"]}, {"num": 36701, "title": "Feat: Non-Detail view for Error Messages", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 27808, "title": "Feature Request: \"extends oneof\" generic constraint; allows for narrowing type parameters", "labels": ["In Discussion", "Suggestion"]}, {"num": 41165, "title": "Feature Request: `Documented` Utility Type", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 30756, "title": "Feature Request: access inherited protected member in subclasses branched from a base class where the protected member is defined in the base class", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 12964, "title": "Feature request: Add Node.js integration tutorial", "labels": ["Docs"]}, {"num": 20221, "title": "Feature Request: add TypeChecker API to query if identifier is definitely assigned", "labels": ["API", "In Discussion", "Suggestion"]}, {"num": 30511, "title": "Feature Request: allow exclusion of node_modules when skipLibCheck is false", "labels": ["In Discussion", "Suggestion"]}, {"num": 20110, "title": "Feature request: allow user to merge extended arrays in tsconfig files", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 30322, "title": "feature request: change indentation of multi-line variable declarations", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 39825, "title": "Feature Request: Collapsible chained methods.", "labels": ["Awaiting More Feedback", "Domain: Outlining", "Suggestion"]}, {"num": 3279, "title": "Feature request: Decorators on enum members", "labels": ["Domain: Decorators", "Needs Proposal", "Suggestion"]}, {"num": 20108, "title": "Feature request: exclude outDir by default in tsconfig.json", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 30774, "title": "Feature Request: expose getPromisedTypeOfPromise", "labels": ["API", "Needs Investigation"]}, {"num": 3136, "title": "Feature Request: F# style Type Provider support?", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 25105, "title": "Feature request: how to fail a build for particular code fixes?", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 38056, "title": "Feature Request: In JS, check if the non-widened type of an object property satisfies type constraints", "labels": ["In Discussion", "Suggestion"]}, {"num": 29706, "title": "Feature Request: LanguageServiceHost plugin", "labels": ["In Discussion", "Suggestion"]}, {"num": 7468, "title": "Feature Request: Line Breaks in Assignments in Compiled Javascript", "labels": ["Suggestion", "help wanted"]}, {"num": 15589, "title": "Feature Request: Linting should be a core feature of the language server", "labels": ["In Discussion", "Suggestion"]}, {"num": 4892, "title": "Feature Request: Macros", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 16170, "title": "Feature Request: Make \"loaders\" a first class citizen of the language", "labels": ["Needs Investigation"]}, {"num": 32423, "title": "Feature Request: Make ES module exports conform to an interface using triple slash directive", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 36733, "title": "feature request: public the TransformationContext.addDiagnostic and read them in the compiler and transpileModule", "labels": ["In Discussion", "Suggestion"]}, {"num": 35313, "title": "Feature Request: Readonly<T> should remove mutable methods", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 32492, "title": "Feature Request: Split out JsDoc comments for constructor function when convert function to ES2015 class", "labels": ["Awaiting More Feedback", "Domain: Refactorings", "Suggestion"]}, {"num": 34674, "title": "Feature request: support `static enum`", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 32080, "title": "feature request: support for mixins composed from other mixins.", "labels": ["Needs More Info"]}, {"num": 28459, "title": "Feature Request: type for Arguments OF Function", "labels": ["In Discussion", "Suggestion"]}, {"num": 36967, "title": "Feature request: typed yield expression", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 32917, "title": "feature: ability to extract union of valid index numbers for tuple", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 31329, "title": "Feature: Analyze @throws tags", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 17061, "title": "Feature: Composing spread operator on Union types and static_key function to enable generic capability", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 28288, "title": "Feature: disable extensionless imports", "labels": ["Domain: ES Modules", "In Discussion", "Needs Proposal", "Suggestion"]}, {"num": 28503, "title": "Feature: Lazy object initialization", "labels": ["In Discussion", "Suggestion"]}, {"num": 35656, "title": "Feature: triple-slash directive to override \"target\" compiler option", "labels": ["In Discussion", "Suggestion"]}, {"num": 17630, "title": "Feedback to improve compileOnSave with tsserver.", "labels": ["API", "Suggestion", "VS Code Tracked", "help wanted"]}, {"num": 17552, "title": "File altered by before transform does not remove new unused imports", "labels": ["API", "Bug", "Domain: Transforms"]}, {"num": 26247, "title": "File path suggestion doesn't work without inputting delimiters", "labels": ["Bug"]}, {"num": 18232, "title": "files are not scoped if they don't contain at least one export or import statement", "labels": ["Awaiting More Feedback", "Domain: ES Modules", "Suggestion"]}, {"num": 10909, "title": "Filesystem race when creating directories", "labels": ["Bug", "help wanted"]}, {"num": 15562, "title": "Filling in an implementation using VS Code will expand types", "labels": ["Bug", "Domain: Quick Fixes", "VS Code Tracked"]}, {"num": 39553, "title": "Filter function in lodash makes the compiler run out of memory and barf", "labels": ["Needs More Info"]}, {"num": 532, "title": "Filter getCompletions results based on location", "labels": ["Bug", "help wanted"]}, {"num": 38646, "title": "Filter object properties by type", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 22222, "title": "Find All Reference from requiring file to module file works only if not default CommonJS exports", "labels": ["Bug", "VS Code Tracked"]}, {"num": 34908, "title": "Find all references doesn't find all results and crashes tsserver if `type S = import().S` syntax is used", "labels": ["Domain: Symbol Navigation"]}, {"num": 9077, "title": "Find all references for ambient module", "labels": ["API", "Suggestion", "help wanted"]}, {"num": 36988, "title": "Find all references for module.exports expandoes differ depending on expandoes members are calculated or not", "labels": ["Bug", "Domain: Symbol Navigation"]}, {"num": 37878, "title": "Find all references on overridden subclass method includes references to the parent class", "labels": ["Awaiting More Feedback", "Domain: Symbol Navigation", "Suggestion"]}, {"num": 1507, "title": "Find references for shorthand properties", "labels": ["Bug"]}, {"num": 9267, "title": "Find-all-references for `this` type", "labels": ["Bug"]}, {"num": 27284, "title": "findAllReferences broken when immediately looping over array literal of object literals", "labels": ["Bug", "Fix Available", "Fixed"]}, {"num": 27617, "title": "findAllRefs doesn't work for property of `typeof import(\"./foo\")`", "labels": ["Bug"]}, {"num": 24895, "title": "Finding definitions exported by string key does not work", "labels": ["Bug", "Domain: JavaScript", "VS Code Tracked"]}, {"num": 40520, "title": "Finding export references is slow", "labels": ["Needs Investigation"]}, {"num": 1853, "title": "findReferences doesn't give results in the right order", "labels": ["Bug", "Visual Studio", "help wanted"]}, {"num": 27130, "title": "First class mapped (folded, appended, traversed, etc.) types", "labels": ["In Discussion", "Suggestion"]}, {"num": 35816, "title": "First class type", "labels": ["Needs More Info"]}, {"num": 19635, "title": "Fix setTimeout/setInterval/setImmediate functions", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 40599, "title": "Fix/fix all to remove TS-specific constructs in JS files", "labels": ["Domain: Quick Fixes", "Effort: Moderate", "Needs Proposal", "Suggestion", "help wanted"]}, {"num": 20331, "title": "fixAddMissingMember should create a constructor if not present", "labels": ["Awaiting More Feedback", "Domain: Quick Fixes", "Suggestion"]}, {"num": 27615, "title": "fixAddMissingMember should work for type literal", "labels": ["Domain: Quick Fixes", "Experience Enhancement", "Suggestion"]}, {"num": 1360, "title": "fixed params last in variable argument functions", "labels": ["Needs More Info", "Suggestion"]}, {"num": 23970, "title": "fixUnusedIdentifier may remove a used side-effect", "labels": ["Domain: Quick Fixes", "Needs Proposal", "Suggestion"]}, {"num": 32801, "title": "Flag 'instanceof' expressions that are provably always true or false", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 15506, "title": "Flag boolean in comparison operator operands as errors", "labels": ["Suggestion", "good first issue", "help wanted"]}, {"num": 7968, "title": "Flag for strict default function `this` types for call-site and assignability checking (`--strictThis`)", "labels": ["Add a Flag", "Awaiting More Feedback", "Suggestion"]}, {"num": 41016, "title": "Flag to type 'catch' variables as 'unknown'.", "labels": ["In Discussion", "Suggestion"]}, {"num": 31033, "title": "flatMap errors when callback returns certain union types", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 13086, "title": "Flow analysis doesn't work with es6 collections 'has' method", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 2710, "title": "Flow type helpers", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 37802, "title": "Flow-sensitive type narrowing does not extend into closures that are created after the narrowing is applied", "labels": ["Design Limitation"]}, {"num": 37958, "title": "Folders from typesRoot should be used in looking up for types for imports as well as `@types` folder", "labels": ["Needs Investigation"]}, {"num": 40242, "title": "Folding function calls folds closing parenthesis", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 25596, "title": "Folding ranges not returned for highly nested functions", "labels": ["Domain: Outlining", "Needs Proposal", "Suggestion", "VS Code Tracked"]}, {"num": 22208, "title": "foo.ts is resolved before foo.d.ts even if the latter is in files[]", "labels": ["Committed", "Suggestion", "help wanted"]}, {"num": 18538, "title": "For object type C, type parameter T and mapped type { [K in keyof T & C]: any }, keyof C isn't assignable to K", "labels": ["Bug"]}, {"num": 29391, "title": "for() not compiled correctly in 3.2.2", "labels": ["Bug", "Domain: JS Emit"]}, {"num": 39693, "title": "for-of loop with intersection of array types produces a union of element types", "labels": ["In Discussion", "Suggestion"]}, {"num": 37466, "title": "for..of transform when targetting ES6< [Compiler option]", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 36146, "title": "Force Override Declarations Types", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 7327, "title": "forceConsistentCasingInFileNames error message doesn't contain enough information", "labels": ["Bug", "Domain: Error Messages", "help wanted"]}, {"num": 12327, "title": "Format selection inconsistencies", "labels": ["Awaiting More Feedback", "Domain: Formatter", "Suggestion", "VS Code Tracked"]}, {"num": 10126, "title": "Formatter fails to format uglified files", "labels": ["Domain: Formatter", "Suggestion", "VS Code Tracked", "help wanted"]}, {"num": 16711, "title": "Formatter indents interface to align with comment asterisks", "labels": ["Bug", "Domain: Formatter", "help wanted"]}, {"num": 25771, "title": "Formatter should convert object literal to multiple lines / one line", "labels": ["Domain: Formatter", "Suggestion", "help wanted"]}, {"num": 1991, "title": "Formatter: allow continuation indent different from nested indent", "labels": ["Suggestion", "help wanted"]}, {"num": 18682, "title": "formatter: allow custom switch-case indentation", "labels": ["Awaiting More Feedback", "Domain: Formatter", "Suggestion", "VS Code Tracked"]}, {"num": 19037, "title": "Formatter: Indent of newline after statement should be based on last statement, not last line", "labels": ["Bug", "Domain: Formatter", "help wanted"]}, {"num": 21124, "title": "Formatter: Place JSX closing tag on new line", "labels": ["Domain: Formatter", "Suggestion", "help wanted"]}, {"num": 24319, "title": "Formatting conditional type in property missing indent", "labels": ["Bug", "Domain: Formatter", "help wanted"]}, {"num": 5280, "title": "Formatting multiple-line comment doesn't normalize leading whitespaces", "labels": ["Bug", "help wanted"]}, {"num": 3028, "title": "Formatting of unary operands is missing some cases", "labels": ["Bug", "help wanted"]}, {"num": 15895, "title": "Formatting with multi-line if condition", "labels": ["Bug", "Domain: Formatter", "help wanted"]}, {"num": 10614, "title": "Formatting with the conditional operator", "labels": ["Bug", "help wanted"]}, {"num": 14085, "title": "FormData should be exposed in a webworkers", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 40643, "title": "forof after transform will execute error if target is es5", "labels": ["High Priority", "Needs Investigation"]}, {"num": 26181, "title": "Forward compatible type definitions regarding compiler warnings", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 33019, "title": "Fourslash server tests silently ignore compiler option directives", "labels": ["Infrastructure"]}, {"num": 25812, "title": "fourslash test breaks when setting \"@lib\"", "labels": ["Infrastructure"]}, {"num": 33661, "title": "From debian : please support multiple system dir", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 26591, "title": "Function argument inference only handles one overload", "labels": ["Design Limitation"]}, {"num": 31716, "title": "Function argument Type-assertion does not work correctly", "labels": ["Design Limitation"]}, {"num": 33743, "title": "Function body is not checked against assertion signature", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 10247, "title": "Function composition challenge for type system", "labels": ["In Discussion", "Suggestion"]}, {"num": 36436, "title": "Function declarations inside function expressions should inherit control flow narrowings of the parent function expression", "labels": ["Bug"]}, {"num": 6757, "title": "function definitions in object shorthand should generate named function definitions rather than anonymous functions", "labels": ["Bug", "ES6"]}, {"num": 37720, "title": "Function expressions in a property assignment of a prototype object should be methods, not nested classes", "labels": ["Bug"]}, {"num": 37394, "title": "Function implementation that returns literal types is not assignable to widened overload", "labels": ["Bug"]}, {"num": 38246, "title": "Function name not preserved when exported on definition", "labels": ["Bug"]}, {"num": 34977, "title": "Function names in source maps in async functions broken", "labels": ["Bug", "Rescheduled"]}, {"num": 40452, "title": "Function parameter names are incorrectly inferred from variadiac tuples", "labels": ["Needs Investigation"]}, {"num": 38748, "title": "Function parameter that has inferred type has no intellisense in the return , while it has in the rest of the function body", "labels": ["Bug"]}, {"num": 38182, "title": "Function parameters and return type inference with infer keyword", "labels": ["In Discussion", "Suggestion"]}, {"num": 30262, "title": "Function return type is not implied conditionally based on type of parameter", "labels": ["Design Limitation"]}, {"num": 33158, "title": "Function return type with array", "labels": ["Design Limitation"]}, {"num": 20007, "title": "Function should be assignable to (...args: any[]) => any", "labels": ["In Discussion", "Suggestion"]}, {"num": 29340, "title": "Function signatures not inferred on JSX prop with complex union", "labels": ["Bug"]}, {"num": 37598, "title": "Function truthy check doesn't apply if the function is in a boolean expression", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 40438, "title": "Function using Generics with destructuring args and defaults, casts the wrong types", "labels": ["Needs More Info"]}, {"num": 37207, "title": "function with properties type interface is not type safe", "labels": ["Design Limitation"]}, {"num": 18757, "title": "Functions are compatible with ArrayLike<any>", "labels": ["Committed", "Suggestion"]}, {"num": 2584, "title": "Functions in default parameters should have separate scope", "labels": ["Breaking Change", "Bug", "ES6"]}, {"num": 39692, "title": "Functions union type or interface won't infer the correct argument types", "labels": ["Design Limitation"]}, {"num": 38625, "title": "Functions with overloads don't automatically get types for their parameters", "labels": ["Design Limitation"]}, {"num": 32442, "title": "Functions with same intersection and conditional type in parameter list not assignable to each other", "labels": ["Needs Investigation"]}, {"num": 35420, "title": "Functions wrapped in `__importDefault` with allowSyntheticDefaultImports emit incorrect function calls", "labels": ["Bug", "Rescheduled"]}, {"num": 26190, "title": "Further improve mapped type support for tuples and arrays (almost complete Promisify<T> inside!)", "labels": ["In Discussion", "Suggestion"]}, {"num": 29594, "title": "Future proof union to intersection type conversion", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 34556, "title": "Future-proof non-aliasing of mapped/intersection/union/etc. types", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 2049, "title": "General indexer type", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 12825, "title": "Generalize `never` type handling for control flow analysis based type guard", "labels": ["In Discussion", "Suggestion"]}, {"num": 35597, "title": "Generalize missing token hints to more constructs", "labels": ["Domain: Error Messages", "Domain: Related Error Spans", "Experience Enhancement", "GraceHopperOSD", "Suggestion", "good first issue", "help wanted"]}, {"num": 22395, "title": "generate function declaration from function type in TypeScript", "labels": ["Domain: Quick Fixes", "Experience Enhancement", "In Discussion", "Suggestion", "VS Code Tracked"]}, {"num": 29186, "title": "generate necessary .d.ts files", "labels": ["Needs More Info"]}, {"num": 41258, "title": "Generated .d.ts files from JS project are invalid", "labels": []}, {"num": 35701, "title": "Generated code when re-exporting a const enum inside a namespace using \"preserveConstEnums\": true leads to a runtime error", "labels": ["Bug"]}, {"num": 17744, "title": "Generating type definitions for mixin classes with protected members", "labels": ["Bug", "Domain: Declaration Emit"]}, {"num": 33533, "title": "generator contextual typing problem", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 34984, "title": "Generator functions which have a return type of a union of Iterator/AsyncIterator have a yield type of never", "labels": ["Needs Investigation"]}, {"num": 35833, "title": "Generator helper should include [Symbol.toStringTag]", "labels": ["Needs Investigation"]}, {"num": 36086, "title": "Generator prototype ignored", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 33430, "title": "Generator that never returns should have return type 'never'", "labels": ["Needs Investigation"]}, {"num": 32523, "title": "Generator: infer the type of yield expression based on yielded value", "labels": ["Design Limitation"]}, {"num": 40044, "title": "Generators with extended unions, null and undefined produces compiler errors", "labels": ["Needs Investigation"]}, {"num": 33357, "title": "Generators/Async Generators with TReturn type argument which extends undefined have a return method with a non-optional argument in 3.6.2", "labels": ["Needs Investigation"]}, {"num": 39080, "title": "Generic argument inference no longer working for specific case", "labels": ["Fix Available", "Needs Investigation", "Rescheduled"]}, {"num": 32330, "title": "Generic bounds not enforced on generic argument", "labels": ["Breaking Change", "Bug", "Fix Available", "Rescheduled"]}, {"num": 32907, "title": "Generic class's type param `T` errors if class contains a `keyof T` method", "labels": ["Design Limitation"]}, {"num": 36852, "title": "Generic constraint generates a TS2344 ", "labels": ["Needs Investigation"]}, {"num": 28802, "title": "Generic Constraint using implements or equals ", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 2607, "title": "Generic decorators - could they receive some default type arguments?", "labels": ["Domain: Decorators", "In Discussion", "Suggestion"]}, {"num": 6173, "title": "Generic decorators...", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 28597, "title": "Generic derived value type", "labels": ["Domain: Conditional Types", "Experience Enhancement", "Suggestion"]}, {"num": 24085, "title": "Generic enumerated type parameter narrowing (conditional types)", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 36117, "title": "Generic forwarding from `keyof typeof Record<T, any>`", "labels": ["Needs More Info"]}, {"num": 27399, "title": "Generic function argument not assignable when called in a generic function; okay if not called generically", "labels": ["Design Limitation"]}, {"num": 29400, "title": "generic function parameter infers boolean as true", "labels": ["Domain: Type Inference", "Needs Proposal", "Suggestion"]}, {"num": 6160, "title": "Generic function types cannot merge using union types", "labels": ["In Discussion", "Suggestion"]}, {"num": 16791, "title": "Generic functon doesn't resolve type property  when accept this as  a parameter ?", "labels": ["Bug"]}, {"num": 26773, "title": "Generic inference fails when parameter is supertype of union", "labels": ["In Discussion", "Suggestion"]}, {"num": 39688, "title": "Generic inference from return type", "labels": ["Design Limitation"]}, {"num": 31570, "title": "Generic interface callback return type validation issue", "labels": ["Needs Investigation"]}, {"num": 38145, "title": "Generic interface confuses parameter identifier with symbolic property identifier", "labels": ["Bug"]}, {"num": 39612, "title": "Generic keyof deduction does not use Interface", "labels": ["Design Limitation"]}, {"num": 36349, "title": "Generic mapping returns union type", "labels": ["Design Limitation"]}, {"num": 25373, "title": "Generic methods with type parameters in generic constraints cannot be overridden", "labels": ["Bug"]}, {"num": 29479, "title": "Generic not inferred inside mapped type parameter", "labels": ["Bug", "Domain: Type Inference"]}, {"num": 39180, "title": "Generic of abstract class should be inferrable from abstract property implemented in subclass", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 28636, "title": "Generic rest of intersection should be assignable to its type parameter constituents", "labels": ["In Discussion", "Suggestion"]}, {"num": 38134, "title": "Generic rest parameters can't be combined with additional arguments", "labels": ["Design Limitation"]}, {"num": 31892, "title": "Generic return type inferred only with explicitly typed (not inferred) parameter", "labels": ["Design Limitation"]}, {"num": 10990, "title": "Generic symbols without an actual generic type now 'infer' {} instead of any", "labels": ["Bug", "VS Code Tracked"]}, {"num": 39526, "title": "Generic Type Alias Overloading", "labels": ["In Discussion", "Suggestion"]}, {"num": 31006, "title": "Generic type alias produces erroneously compatible types", "labels": ["Bug", "Fix Available", "Fixed", "Rescheduled"]}, {"num": 9659, "title": "Generic type argument cannot be inferred by a callback parameter return type if the same type was used for the callback's parameter", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 37235, "title": "generic type arguments set as types of optional properties become \"any\" when not set", "labels": ["Needs More Info"]}, {"num": 32198, "title": "Generic type can't be assigned to the same DeepReadonly type", "labels": ["Bug"]}, {"num": 28800, "title": "Generic Type constraint from base classes, interfaces (Pass through)", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 32418, "title": "Generic type infer in overloaded function", "labels": ["Design Limitation"]}, {"num": 29471, "title": "Generic type inference failure in a union.", "labels": ["Bug", "Domain: Type Inference"]}, {"num": 19896, "title": "generic type inference for boolean literals fails", "labels": ["In Discussion", "Suggestion"]}, {"num": 36851, "title": "Generic type is lost inside an async function", "labels": ["Bug"]}, {"num": 38635, "title": "Generic type not assignable if extends type with optional field and passed object does not include the optional field", "labels": ["In Discussion", "Suggestion"]}, {"num": 20348, "title": "Generic type of superclass cannot be inferred from function call on a subclass", "labels": ["Bug"]}, {"num": 11584, "title": "Generic type parameter is lost after generic member call", "labels": ["Bug"]}, {"num": 28080, "title": "Generic type union assignment via Pick throws TS2322", "labels": ["Bug", "Domain: Conditional Types"]}, {"num": 37051, "title": "Generic Type: return type from callback as T incorrect", "labels": ["Design Limitation"]}, {"num": 26841, "title": "Generic TypeLiteral inference for T extends Array<Array<string>>, which allows type relationship extraction for projects", "labels": ["Needs More Info", "Suggestion"]}, {"num": 26883, "title": "Generic types from JSDoc aren't really generic", "labels": ["Bug", "Domain: JSDoc", "Domain: JavaScript"]}, {"num": 28788, "title": "Generic TypeSection for specialization of nested Record<string,.. Capturing... mechanics", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 30808, "title": "Generic typing inference composition work as variable not as function", "labels": ["Design Limitation"]}, {"num": 17574, "title": "Generic values", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 30989, "title": "Generics - Difference between instantiation (and change afterwards) and direct instantiation of Partial<T>", "labels": ["Design Limitation"]}, {"num": 13995, "title": "Generics extending unions cannot be narrowed", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 25413, "title": "Generics: False negative on type constraint validation involving a conditional type", "labels": ["Bug", "Domain: Conditional Types", "Fix Available", "Rescheduled"]}, {"num": 24277, "title": "Generics; ReturnType<Foo> != ReturnType<typeof foo>", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 29357, "title": "getCodeFixes \u2014\u00a0Cannot read property 'parent' of undefined", "labels": ["Bug", "Crash", "Domain: Quick Fixes"]}, {"num": 22467, "title": "getDefinitionAtPosition doesn't distinguish different kinds in a merged declaration", "labels": ["Bug", "GraceHopperOSD", "good first issue", "help wanted"]}, {"num": 15658, "title": "getDefinitionAtPosition() on import alias returns incorrect containerName", "labels": ["Needs More Info"]}, {"num": 40615, "title": "getEditsForFileRename slow (update tsimports after file move)", "labels": ["Needs More Info"]}, {"num": 13297, "title": "getElementsByTagName should return HTMLCollection", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 4262, "title": "Getting completions when writing out a dot in a parameter should suggest the splat operator", "labels": ["Suggestion", "help wanted"]}, {"num": 29625, "title": "getTrailingCommentRanges returns comments at the start of the file", "labels": ["API", "In Discussion", "Suggestion"]}, {"num": 35233, "title": "getTypeAtLocation fails for import specifiers that resolve to a type alias", "labels": ["API", "Bug"]}, {"num": 39783, "title": "getTypeFromJSDocValueReference leads to stack overflow", "labels": ["Bug", "Needs More Info"]}, {"num": 30012, "title": "Give 'this' keyword suggestion the same `sortText` as class properties if inside a class", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 37931, "title": "Give `{}` some other type than `{}` so it doesn't cause subtype reduction problems with primitives", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 10464, "title": "Give a better error message when an import isn't found but a namespace of the same name exists", "labels": ["Bug", "Domain: Error Messages", "Effort: Moderate", "help wanted"]}, {"num": 5062, "title": "Give an error indicating that the triple slash has syntax error", "labels": ["Suggestion", "help wanted"]}, {"num": 6248, "title": "Give better error messages down the line when generic merged interfaces have different type parameters", "labels": ["Bug", "Effort: Moderate", "help wanted"]}, {"num": 17220, "title": "Give better error messages for reserved words used as parameter names", "labels": ["Domain: Error Messages", "Experience Enhancement", "Suggestion"]}, {"num": 33907, "title": "Give better error messages when properties are accessed on global empty DOM interfaces", "labels": ["Domain: Error Messages", "Effort: Moderate", "Experience Enhancement", "help wanted"]}, {"num": 11648, "title": "Give better error messages when reserved names are used for binding identifiers", "labels": ["Domain: Error Messages", "Effort: Moderate", "Suggestion", "help wanted"]}, {"num": 35901, "title": "Give better error when using private identifier in parameter property", "labels": ["Bug"]}, {"num": 39395, "title": "Give better errors comparing massive singleton union types", "labels": ["Domain: Error Messages", "Needs Proposal", "Suggestion"]}, {"num": 32767, "title": "Give more information in --extendedDiagnostics", "labels": ["Experience Enhancement", "Rescheduled", "Suggestion"]}, {"num": 16022, "title": "Given better error messages for iterated entities when not using --downlevelIteration", "labels": ["Bug", "Domain: Error Messages", "Effort: Moderate", "help wanted"]}, {"num": 14282, "title": "Glob Paths From tsconfig Paths Should Not be Suggested as Module Names", "labels": ["Bug", "Domain: Quick Fixes", "VS Code Tracked"]}, {"num": 21951, "title": "Glob support for per pattern tsconfig configuration", "labels": ["In Discussion", "Suggestion"]}, {"num": 28013, "title": "Global variable of non-null type, never assigned, no error if used in function", "labels": ["Design Limitation"]}, {"num": 40978, "title": "Go to definition broken by existance of tsconfig.json in JavaScript project.", "labels": ["In Discussion", "Suggestion"]}, {"num": 31632, "title": "go to definition does not work for implicit index.js files", "labels": ["Domain: Symbol Navigation", "Needs More Info"]}, {"num": 31765, "title": "Go to definition enhancements", "labels": ["Domain: Symbol Navigation", "Needs More Info"]}, {"num": 36335, "title": "Go to Definition for Angular (9.0.0-rc.9) project breaks", "labels": ["Needs Investigation"]}, {"num": 35406, "title": "Go to definition for class members hidden with Symbols takes to symbol itself", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 38474, "title": "Go to definition for nodejs javascript file broken by existance of `.d.ts`", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 15146, "title": "Go to Definition for Non JS/TS File Imports", "labels": ["Awaiting More Feedback", "Domain: JavaScript", "Domain: Symbol Navigation", "Suggestion", "VS Code Tracked"]}, {"num": 1932, "title": "Go to definition includes results from other entity spaces", "labels": ["Bug", "Domain: Symbol Navigation", "help wanted"]}, {"num": 39215, "title": "Go to definition not working as expected when typescript definitions are included", "labels": ["Bug"]}, {"num": 28510, "title": "Go to definition on @constructor type fails", "labels": ["Bug", "Domain: JSDoc", "Domain: Symbol Navigation"]}, {"num": 31559, "title": "Go To Definition on call expression of union signature only shows one constituent signature", "labels": ["Bug", "Domain: Symbol Navigation"]}, {"num": 30038, "title": "Go to definition should still work for shorthand property declaration with no local binding", "labels": ["Domain: Symbol Navigation", "Experience Enhancement", "Suggestion"]}, {"num": 37174, "title": "Go to definition shouldn't go to the import/require/aliased statement", "labels": ["Bug"]}, {"num": 31041, "title": "Go to definition unnecessary shows export along true definition", "labels": ["Bug", "Domain: Symbol Navigation"]}, {"num": 11788, "title": "Go to implementation misses some implementations", "labels": ["Bug"]}, {"num": 14148, "title": "Go To Type Definition on arrays", "labels": ["Bug", "Domain: Symbol Navigation", "help wanted"]}, {"num": 11504, "title": "Go-to-Implementation & class names", "labels": ["API", "Suggestion", "help wanted"]}, {"num": 24353, "title": "go-to-type-definition, and find-all-refs not working for `import.meta`", "labels": ["Bug", "Domain: Symbol Navigation", "GraceHopperOSD", "good first issue", "help wanted"]}, {"num": 23216, "title": "Goto definition after field exclusion should go to prop signature", "labels": ["Domain: Symbol Navigation", "Experience Enhancement", "Suggestion"]}, {"num": 33653, "title": "Goto implementation return different results between bindingElement and PropertyAccessExpression", "labels": ["Needs More Info"]}, {"num": 35115, "title": "Grace period strategy for unloading projects", "labels": ["Domain: Performance"]}, {"num": 1057, "title": "Gracefully handle template literal properties in the parser", "labels": ["Domain: Error Messages", "Effort: Moderate", "Experience Enhancement", "help wanted"]}, {"num": 17416, "title": "Gracefully parse `abstract class` in expression position", "labels": ["Bug", "Domain: Error Messages", "help wanted"]}, {"num": 6107, "title": "Grammar checking errors should be reported during binding phases instead of type-checking phase", "labels": ["Committed", "Suggestion", "VS Code Tracked"]}, {"num": 29213, "title": "grammar errors should be reported as syntactic diagnostics", "labels": ["In Discussion", "Suggestion"]}, {"num": 20122, "title": "Granular inference for generic function type arguments", "labels": ["In Discussion", "Suggestion"]}, {"num": 31315, "title": "GTD not working between ES5-style classes", "labels": ["Awaiting More Feedback", "Domain: JavaScript", "Suggestion"]}, {"num": 12473, "title": "Guidance on migrating away from global namespaces to file modules", "labels": ["Discussion"]}, {"num": 37214, "title": "Guidance on reducing heap usage of large typings?", "labels": ["Docs"]}, {"num": 33364, "title": "gulp baseline-accept does not update a few files", "labels": ["Infrastructure"]}, {"num": 33270, "title": "Handle CompileOnSave on projects that contain project references.", "labels": ["Bug"]}, {"num": 17345, "title": "Handle computed property names in overloads", "labels": ["Bug", "help wanted"]}, {"num": 4048, "title": "Handle default constructor when extending null", "labels": ["Bug"]}, {"num": 33569, "title": "Handle element access expressions in JS/TS with late-bound names", "labels": ["Bug", "Fix Available", "Rescheduled"]}, {"num": 36407, "title": "Handle inlined sources in d.ts maps to support goto definition and other such functionalities", "labels": ["Needs Investigation"]}, {"num": 20801, "title": "Handle JSDoc @param with hyphen", "labels": ["Domain: JSDoc", "Experience Enhancement", "Suggestion", "VS Code Tracked"]}, {"num": 31713, "title": "Handling AssemblyScript input files", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 18893, "title": "Hard-to-diagnose \"Cannot find global type 'Symbol'.\" error", "labels": ["Bug", "Domain: Error Messages", "good first issue", "help wanted"]}, {"num": 23642, "title": "Have QuickInfo use import types to display type aliases that are not in scope", "labels": ["Awaiting More Feedback", "Domain: Quick Info", "Suggestion"]}, {"num": 39520, "title": "Head comments are removed in some cases for next `import` line", "labels": ["Bug"]}, {"num": 35776, "title": "Heap of out memory for recursive type", "labels": ["Bug"]}, {"num": 6401, "title": "Help people who confuse `export = ` with `export default`", "labels": ["Domain: Error Messages", "Suggestion", "help wanted"]}, {"num": 5334, "title": "Heuristic/loose completions for the 'any' type", "labels": ["In Discussion", "Suggestion"]}, {"num": 28722, "title": "Hide certain suggestions for Javascript/Typescript", "labels": ["Domain: Completion Lists", "Domain: TSServer", "Experience Enhancement", "Suggestion"]}, {"num": 4289, "title": "Hierarchy with getNavigationBarItems with modules", "labels": ["API", "Bug", "help wanted"]}, {"num": 31756, "title": "High memory consumption with typesafe-actions", "labels": ["Needs More Info"]}, {"num": 30369, "title": "Higher order function inference breaks with multiple overloads", "labels": ["Design Limitation"]}, {"num": 33594, "title": "Higher order type inference doesn't work with overloads", "labels": ["Suggestion"]}, {"num": 28938, "title": "HOC returned component props can not differ from HOC generic props", "labels": ["Bug", "Domain: JSX/TSX"]}, {"num": 39853, "title": "Hoisted\u00a0function\u00a0declarations should\u00a0be\u00a0assigned to\u00a0`exports` before\u00a0any\u00a0`require`\u00a0calls", "labels": ["Bug"]}, {"num": 4556, "title": "Honor compilation target when checking JavaScript", "labels": ["Domain: JavaScript", "Needs Proposal", "Suggestion", "VS Code Tracked"]}, {"num": 19584, "title": "hook into `tsc --watch` using stdout -- the unix way", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 11973, "title": "Host @types packages individually on GitHub", "labels": ["Discussion"]}, {"num": 34399, "title": "hourCycle option not recognized for Date.toLocaleString", "labels": ["Bug", "Domain: lib.d.ts"]}, {"num": 38829, "title": "Hover hint is invalid if there are multiple type aliases with same parameters", "labels": ["Design Limitation"]}, {"num": 37879, "title": "Hover over property accessed using ?. shows T | undefined", "labels": ["Bug"]}, {"num": 39397, "title": "Hovering on imported module shows path from TypeScript folder. ", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 32845, "title": "Hovering over JSDoc annotation resolves differently to Intellisense", "labels": ["Bug", "Domain: JSDoc", "Domain: Quick Info"]}, {"num": 9911, "title": "how can i implement ts.CompilerOptions in a class?", "labels": ["Docs"]}, {"num": 26637, "title": "How can the parent class get the template hypothesis of the subclass?", "labels": ["Needs More Info"]}, {"num": 19123, "title": "How to constraint parameters to be the same type?", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 32291, "title": "How to find/debug what file(s) included given file during typescript compilation", "labels": ["In Discussion", "Suggestion"]}, {"num": 29964, "title": "How to import generic function type declaration from one javascript file to another?", "labels": ["Bug", "help wanted"]}, {"num": 33628, "title": "How to pass along .d.ts comment on function that returns a class extending React.Component", "labels": ["Bug", "Domain: Quick Info"]}, {"num": 463, "title": "How to print anonymous recursive types", "labels": ["Bug", "help wanted"]}, {"num": 13435, "title": "How to register custom CodeAction?", "labels": ["Bug"]}, {"num": 12824, "title": "How tsconfig exclude pattern should actually work", "labels": ["Suggestion", "help wanted"]}, {"num": 16860, "title": "HTMLCanvasElement.getContext() wrong typings when used with attributes.", "labels": ["Bug"]}, {"num": 19437, "title": "HTMLCollection should be string indexable", "labels": ["Awaiting More Feedback", "Domain: lib.d.ts", "Suggestion"]}, {"num": 39003, "title": "HTMLFormControlsCollection namedItem should return only form input elements", "labels": ["Bug", "Domain: lib.d.ts", "GraceHopperOSD", "help wanted"]}, {"num": 39234, "title": "HTMLFrameElement deprecated or not?", "labels": ["Needs Investigation"]}, {"num": 39829, "title": "HTMLImageElement#crossOrigin should use literal union type from allowable values", "labels": ["Bug", "Domain: lib.d.ts"]}, {"num": 15047, "title": "HTMLOptionElement gives error Property 'value' does not exist on type 'Element'.", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 28098, "title": "HTMLStyleElement.sheet DOM definition", "labels": ["Bug", "Domain: lib.d.ts"]}, {"num": 36204, "title": "HTMLVideoElement is missing 'playsinline' attribute", "labels": ["Bug", "Domain: lib.d.ts"]}, {"num": 31550, "title": "Huge memory consumption due to default setup of tsconfig.json", "labels": ["Needs More Info"]}, {"num": 7765, "title": "Idea: 'rest' index signatures and the 'error' type", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 25658, "title": "Ideas for faster cold compiler start-up", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 19833, "title": "Identifier suggestion algorithm could be improved", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 28534, "title": "identifierCount may not be correct", "labels": ["Infrastructure"]}, {"num": 33757, "title": "If all values used in a template literal have a literal type, then the template should have a literal type", "labels": ["In Discussion", "Suggestion"]}, {"num": 39690, "title": "If autoimporting import that is commented out - uncomment it instead of adding new one", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 39022, "title": "If exported variable is renamed, tsc will generate code with a syntax error", "labels": ["Bug", "Fix Available", "Rescheduled"]}, {"num": 30632, "title": "If node_modules is excluded by default, it should not be part of a confusing documentation example", "labels": ["Docs"]}, {"num": 30693, "title": "If not all sources are under rootDir, you only get an error message when combined with outDir, not with outFile", "labels": ["Bug"]}, {"num": 36930, "title": "If you pass a generic type argument to another generic type, constraints cannot be inferred correctly.", "labels": ["Bug"]}, {"num": 13933, "title": "Ignore __proto__", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 38409, "title": "Ignore Specific Error [AGAIN]", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 28144, "title": "Ignored check result of typeof a === typeof b", "labels": ["In Discussion", "Suggestion"]}, {"num": 36268, "title": "Ignored error in class constructor causes method usage errors to be ignored", "labels": ["Bug"]}, {"num": 39709, "title": "ignoring custom typescript dts type definition files for javascript modules", "labels": ["Needs More Info"]}, {"num": 30907, "title": "IIFEs should not be CFA-inlined if the FE is a generator function", "labels": ["Bug"]}, {"num": 32758, "title": "Immutable-By-Default Flags", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 22160, "title": "Implement a JSDoc @import tag", "labels": ["Awaiting More Feedback", "Domain: JSDoc", "Domain: JavaScript", "Suggestion"]}, {"num": 40694, "title": "Implement Import Assertions (stage 3)", "labels": ["ES Next", "Fix Available", "Needs Investigation", "Suggestion"]}, {"num": 22770, "title": "Implement interface should not add optional properties", "labels": ["Awaiting More Feedback", "Domain: Quick Fixes", "Suggestion"]}, {"num": 14105, "title": "Implement missing members sometimes writes out inaccessible types", "labels": ["Bug", "Domain: Quick Fixes"]}, {"num": 17024, "title": "Implement package validator as a compiler flag", "labels": ["Awaiting More Feedback", "Community Tooling", "Suggestion"]}, {"num": 38643, "title": "Implemented method JSDocs not behaving correctly for @param", "labels": ["Bug", "Domain: JSDoc"]}, {"num": 19598, "title": "Implicit any quick fix should infer from JSX component usage", "labels": ["Bug", "Domain: Quick Fixes"]}, {"num": 38388, "title": "Implicit Symbol.iterator call in for..of loops / spread destructuring doesn't infer `this` generic type parameter", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 29311, "title": "Implicit type conversion of tuple [...T[]] to array T[]", "labels": ["Bug", "Domain: Contextual Types"]}, {"num": 13175, "title": "Import aliases are not permitted in a global augmentation", "labels": ["Bug", "help wanted"]}, {"num": 24992, "title": "Import assignment should work with esnext targets", "labels": ["Needs Proposal"]}, {"num": 20683, "title": "Import code fix hard to distinguish when module shares name with its export", "labels": ["Awaiting More Feedback", "Domain: Quick Fixes", "Suggestion"]}, {"num": 32222, "title": "Import codefix uses too-deep path", "labels": ["Needs More Info"]}, {"num": 32063, "title": "import ConstJson from './config.json' as const;", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 36134, "title": "import fix / autocomplete requires type checking JS/JSX", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 32431, "title": "import helpers from tslib.es6.js when module is >= es6 and moduleResolution = node", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 31178, "title": "Import Interfaces and/or definitions from URL's pointing to Servers (Not local to machine)", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 35886, "title": "import is cut after \"transpileModule\" compilation when object spread is used (TypeScript 3.7)", "labels": ["Bug", "Rescheduled"]}, {"num": 40572, "title": "Import path autocomplete with tsconfig path containing \"/\"", "labels": ["Bug", "Domain: Completion Lists", "help wanted"]}, {"num": 40919, "title": "Import refactoring results in broken code", "labels": ["Needs Investigation"]}, {"num": 38306, "title": "Import star should work with export type", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 25236, "title": "Import suggestions and individual Lodash modules", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 38907, "title": "import type from from \"./specifier\" fails to parse correctly", "labels": ["Bug"]}, {"num": 26972, "title": "Import type is escaped", "labels": ["Bug", "Domain: Declaration Emit"]}, {"num": 31090, "title": "Import type over generic argument", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 16671, "title": "Imported const enum is not inlined in generated code", "labels": ["Bug"]}, {"num": 32808, "title": "Imported values don't conflict with global module declarations (regression?)", "labels": ["Bug"]}, {"num": 10988, "title": "Importing modules with loaders extension", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 22159, "title": "Importing types doesn't trigger an error in checkJs", "labels": ["Bug", "Domain: JavaScript", "help wanted"]}, {"num": 28660, "title": "Importing types from a js module doesn't work", "labels": ["Bug", "Domain: JavaScript"]}, {"num": 39155, "title": "importModuleSpecifierEnding does not apply for module specifier completions (manual imports)", "labels": ["Bug", "Domain: Completion Lists"]}, {"num": 28488, "title": "Imports  auto-update replaces relative path with alias-path", "labels": ["Needs More Info"]}, {"num": 29263, "title": "Imports are not elided when they are used in computed properties in interfaces", "labels": ["Bug"]}, {"num": 28097, "title": "Imports in .d.ts files break wildcard modules declarations", "labels": ["Bug", "Domain: Related Error Spans", "help wanted"]}, {"num": 39339, "title": "importsNotUsedAsValues = error should apply to export statements", "labels": ["In Discussion", "Suggestion"]}, {"num": 38922, "title": "Improper `@example` parsing when an at-sign `@` is used in the code-block.", "labels": ["Bug"]}, {"num": 39114, "title": "improper declared type cause narrow type not work when its computed type is not union.", "labels": ["Bug", "Has Repro"]}, {"num": 30113, "title": "Improve 'convert to named parameters' refactor", "labels": ["Needs Investigation"]}, {"num": 27859, "title": "Improve `Array.from(tuple)` and `[...tuple]`", "labels": ["Domain: lib.d.ts", "In Discussion", "Suggestion"]}, {"num": 25931, "title": "Improve completions with --checkJs turned off", "labels": ["Awaiting More Feedback", "Domain: Completion Lists", "Suggestion"]}, {"num": 17827, "title": "Improve CSSStyleDeclaration typings", "labels": ["Domain: lib.d.ts", "In Discussion", "Suggestion"]}, {"num": 38638, "title": "Improve declare module wildcards so that they can match parts of a path more like a glob", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 11466, "title": "Improve decorator callstack information to reflect location of decorator", "labels": ["Bug"]}, {"num": 26413, "title": "Improve diagnostic when string from property is not assignable to string literal.", "labels": ["Domain: Error Messages", "Effort: Moderate", "Suggestion", "help wanted"]}, {"num": 17147, "title": "improve docs of compiler APIs", "labels": ["Docs"]}, {"num": 16398, "title": "Improve error message \"Cannot compile namespaces when the '--isolatedModules' flag is provided\"", "labels": ["Bug", "Domain: Error Messages", "help wanted"]}, {"num": 4534, "title": "Improve error message for decorator type mismatches", "labels": ["Bug", "Domain: Error Messages", "good first issue", "help wanted"]}, {"num": 27422, "title": "Improve error message for incompatible signatures in union type from typed/untyped function call", "labels": ["Domain: Error Messages", "Experience Enhancement", "Suggestion"]}, {"num": 529, "title": "Improve error messages for duplicate identifiers", "labels": ["Bug", "help wanted"]}, {"num": 40163, "title": "Improve error messages for return values within annotated arrow functions.", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 32795, "title": "Improve error on non-ambient class and function merge", "labels": ["Domain: Error Messages", "Experience Enhancement", "Suggestion", "help wanted"]}, {"num": 22203, "title": "Improve error when parameter is missing a name", "labels": ["Domain: Error Messages", "Suggestion", "help wanted"]}, {"num": 25898, "title": "Improve errors for potential arrow functions", "labels": ["Bug", "Domain: Error Messages", "Effort: Moderate", "help wanted"]}, {"num": 29114, "title": "Improve exception reporting", "labels": ["Bug", "Crash"]}, {"num": 14802, "title": "Improve feedback for abstract class instantiation error messages", "labels": ["Effort: Moderate", "Experience Enhancement", "Suggestion", "help wanted"]}, {"num": 39830, "title": "Improve intellisense for classes that have static methods", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 23730, "title": "Improve intellisense for functions like addEventListener", "labels": ["Domain: Signature Help", "Needs Proposal", "Suggestion"]}, {"num": 34074, "title": "Improve Intellisense for String Enums", "labels": ["Bug"]}, {"num": 16163, "title": "Improve Javascript intellisense type inference for cases where Object.assign(this, ...) is used with an object with known type information", "labels": ["Awaiting More Feedback", "Domain: JavaScript", "Suggestion", "VS Code Tracked"]}, {"num": 32254, "title": "Improve Promise constructor return type", "labels": ["Design Limitation"]}, {"num": 24025, "title": "Improve references for import type of JS modules", "labels": ["Bug"]}, {"num": 25660, "title": "Improve rest Generics in 3.0 RC sufficiently to support RxJS Observable.prototype.pipe", "labels": ["Suggestion", "Too Complex"]}, {"num": 29041, "title": "Improve signature help when completing object argument", "labels": ["Domain: Signature Help", "Needs Proposal", "Suggestion"]}, {"num": 29059, "title": "Improve structure, formatting, (human) parsability and readabiliy of errors", "labels": ["Committed", "Domain: Error Messages", "Suggestion"]}, {"num": 4538, "title": "Improve support for Symbol.toPrimitive", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 19377, "title": "Improve ts.d documentation of Decomposition/Augmentation", "labels": ["Docs"]}, {"num": 29283, "title": "Improve Type guards to correctly work with for-of loops", "labels": ["Bug", "Domain: Control Flow"]}, {"num": 31812, "title": "Improve TypeScript experience when dependencies are missing.", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 28167, "title": "Improve typing of arguments with a function (with respect to overloads)", "labels": ["In Discussion", "Suggestion"]}, {"num": 29841, "title": "Improve typings of Array.map when called on tuples", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 40183, "title": "Improvement for Reflection / Returntype (instantiatable types)", "labels": ["Declined", "Suggestion"]}, {"num": 12626, "title": "Improvement: Design metadata should contain property names and types", "labels": ["Domain: Decorators", "Revisit", "Suggestion"]}, {"num": 4993, "title": "Improvements to \"Upgrade project's Tools Version\" dialog in VS", "labels": ["Bug", "Visual Studio"]}, {"num": 40024, "title": "Improving documentation for built-in type declarations", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 34930, "title": "Improving refactoring discoverability and UX", "labels": ["Committed", "Rescheduled", "Suggestion"]}, {"num": 28155, "title": "In dom.d.ts, caretPositionFromPoint and caretRangeFromPoint should go on DocumentOrShadowRoot, not Document", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 22453, "title": "In Javascript, `typeof x !== undefined ? t : f` should act like a declaration of `x` in the true branch", "labels": ["Bug", "Domain: JavaScript"]}, {"num": 11492, "title": "In JS, @template doesn't work on prototype methods", "labels": ["Bug", "Domain: JSDoc", "VS Code Tracked"]}, {"num": 25624, "title": "In JS, `object` is treated as 'any'", "labels": ["Awaiting More Feedback", "Domain: JSDoc", "Domain: JavaScript", "Domain: lib.d.ts", "Suggestion", "checkJs"]}, {"num": 22640, "title": "In JS, aliasing of C.prototype should cause property assignments to add to the instance", "labels": ["Domain: JavaScript", "Needs Proposal", "Suggestion", "checkJs"]}, {"num": 22619, "title": "In JS, aliasing property assignments to JS containers should work", "labels": ["Bug", "Domain: JavaScript"]}, {"num": 26748, "title": "In JS, assignment to property of class has no contextual type", "labels": ["Bug", "Domain: JSDoc", "Domain: JavaScript", "checkJs"]}, {"num": 23141, "title": "In JS, auto type assignments don't add string index to literal types", "labels": ["Bug", "Domain: JavaScript"]}, {"num": 23140, "title": "In JS, auto types don't narrow with `if`", "labels": ["Bug", "Domain: JavaScript"]}, {"num": 26097, "title": "In JS, bogus noImplicitAny error on some this-property assignments", "labels": ["Bug", "checkJs"]}, {"num": 28702, "title": "In JS, don't complain about a better inferred type if there's no code action", "labels": ["Domain: JavaScript", "Experience Enhancement", "Fix Available", "Fixed", "Suggestion"]}, {"num": 23788, "title": "In JS, export assignments should bind as types, not just values", "labels": ["Bug", "Domain: JavaScript", "checkJs"]}, {"num": 26268, "title": "In JS, extra circular reference errors when referring to a missing property on `module`", "labels": ["Bug"]}, {"num": 26278, "title": "In JS, JS containers can't be augmented inside an IIFE", "labels": ["Bug"]}, {"num": 25590, "title": "In JS, jsdoc should be able to declare functions as overloaded", "labels": ["Bug", "Domain: JavaScript", "checkJs"]}, {"num": 26644, "title": "In JS, module.exports assignment doesn't make types available", "labels": ["Bug", "Domain: JavaScript"]}, {"num": 22462, "title": "In JS, module.exports should support \"defaulted assignment\" declarations", "labels": ["Bug", "Domain: JavaScript", "checkJs"]}, {"num": 22459, "title": "In JS, module.exports should support property assignments as declaration", "labels": ["Bug", "Domain: JavaScript", "checkJs"]}, {"num": 23172, "title": "In JS, multiple prototype assignments give duplicate identifier error", "labels": ["Bug", "Domain: JavaScript"]}, {"num": 24232, "title": "In JS, prototype-assignment methods can't find method-local type parameters", "labels": ["Bug", "Domain: JSDoc", "Domain: JavaScript"]}, {"num": 22485, "title": "In JS, reassignment of a constructor function should work. ", "labels": ["Bug", "Domain: JavaScript", "checkJs"]}, {"num": 23217, "title": "In JS, there's no way to assert that a property is definitely assigned", "labels": ["Domain: JavaScript", "Needs Proposal", "Suggestion"]}, {"num": 23472, "title": "In JS, type annotations should not block errors from the rest of the program", "labels": ["Awaiting More Feedback", "Domain: JavaScript", "Suggestion"]}, {"num": 25252, "title": "In JS, typedef tags are not bound on non-expression statements", "labels": ["Awaiting More Feedback", "Domain: JavaScript", "Suggestion"]}, {"num": 8302, "title": "In JS, use JSDoc to specify a call's type arguments", "labels": ["Domain: JSDoc", "Domain: JavaScript", "Needs Proposal", "Suggestion"]}, {"num": 39650, "title": "In JSDoc @type is not a type declaration, which it is much more like type conversion.", "labels": ["Bug", "Has Repro"]}, {"num": 27424, "title": "In JSDoc, `?` of conditional is frequently parsed as postfix-`?`", "labels": ["Bug"]}, {"num": 20555, "title": "In JSDocs notation for index signatures, Object and object should be treated as the same", "labels": ["Domain: JSDoc", "In Discussion", "Suggestion"]}, {"num": 26557, "title": "In the generated description file, the module path needs to be modified to a relative path.", "labels": ["Needs Investigation"]}, {"num": 25041, "title": "in typescript 2.8, a common definition of Omit causes declarations that don't compile to be generated", "labels": ["Bug"]}, {"num": 30155, "title": "Inaccurate error or buggy behavior for JSDoc @typedef tags", "labels": ["Bug", "Domain: JSDoc", "Domain: JavaScript"]}, {"num": 37977, "title": "Inaccurate schemastore description for isolatedModules", "labels": ["Infrastructure"]}, {"num": 4804, "title": "Inappropriate indentation between 'else-if' block and subsequent 'else'", "labels": ["Bug", "Effort: Moderate", "help wanted"]}, {"num": 37754, "title": "Include CompilerHost in TransformationContext", "labels": ["In Discussion", "Suggestion"]}, {"num": 16665, "title": "Include Default Parameter Values in Signature Help ", "labels": ["Awaiting More Feedback", "Domain: Quick Info", "Domain: Signature Help", "Suggestion", "VS Code Tracked"]}, {"num": 37876, "title": "Include documentation from a variable's type when you hover the variable", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 36009, "title": "Include new features in handbook instead of referencing \"What's new\".", "labels": ["Docs"]}, {"num": 29408, "title": "Include parameter information in quickInfo on function arguments", "labels": ["Domain: JSDoc", "Domain: Quick Info", "Experience Enhancement", "Suggestion"]}, {"num": 32207, "title": "Include sourcemaps in Typescript NPM package.", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 36829, "title": "Include the version number in the downloadable TypeScript_SDK.exe filename", "labels": ["Rescheduled", "Visual Studio"]}, {"num": 38674, "title": "Include types for TSConfig", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 30433, "title": "Including full error range in TSC output", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 29116, "title": "Incompatible type error in regular js with JSDoc generic type annotations", "labels": ["Bug", "Domain: JSDoc"]}, {"num": 37524, "title": "Incomprehensible incompatibility around Partial, Conditional types and Generics.", "labels": ["Needs Investigation"]}, {"num": 17667, "title": "Inconsistencies in type checking functions with optional destructured parameters", "labels": ["Bug"]}, {"num": 28085, "title": "Inconsistency between import fix and moduleNameResolver for baseUrl + paths behavior", "labels": ["Bug"]}, {"num": 38264, "title": "Inconsistency in generic parameter inference", "labels": ["Needs Investigation"]}, {"num": 24369, "title": "Inconsistency in types after type inference", "labels": ["Design Limitation"]}, {"num": 28635, "title": "Inconsistency of mapped type and `Parameters<T>` between TS and JS", "labels": ["Bug"]}, {"num": 32581, "title": "Inconsistent \"property does not exist\" on F-bounded mapped type with intersection", "labels": ["Bug"]}, {"num": 38929, "title": "Inconsistent assignment analysis for async arrow IIFE's regarding class property declarations (sugar vs constructor assigning)", "labels": ["Bug"]}, {"num": 30223, "title": "Inconsistent behavior of \"export as\" symbols.", "labels": ["Bug", "help wanted"]}, {"num": 14295, "title": "Inconsistent behaviour of Pick<T, keyof T> for readonly attributes.", "labels": ["Bug"]}, {"num": 37755, "title": "Inconsistent behaviour with generic type parameter defaults", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 10091, "title": "Inconsistent DocComment merging for merged declarations", "labels": ["Bug", "VS Code Tracked", "help wanted"]}, {"num": 32621, "title": "Inconsistent enum type merging", "labels": ["Design Limitation"]}, {"num": 27458, "title": "Inconsistent error messages with circular base type argument", "labels": ["In Discussion", "Suggestion"]}, {"num": 30451, "title": "Inconsistent error reporting for duplicate JSDoc tags", "labels": ["Bug"]}, {"num": 12768, "title": "Inconsistent errors for non-module entities", "labels": ["Bug"]}, {"num": 32278, "title": "Inconsistent implicit any when referencing destructured variable more than once", "labels": ["Bug"]}, {"num": 7398, "title": "Inconsistent import behavior would cause `.d.ts` to break.", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 28867, "title": "Inconsistent inferred overloads in conditional types for no-arg signatures with strictFunctionTypes", "labels": ["Domain: Conditional Types", "Needs Investigation", "Rescheduled"]}, {"num": 22186, "title": "Inconsistent JSX whitespace handling", "labels": ["Domain: JSX/TSX", "In Discussion", "Suggestion"]}, {"num": 10122, "title": "Inconsistent multiple export behavior for functions vs vars", "labels": ["Bug"]}, {"num": 5516, "title": "Inconsistent quick info between interface and namespace declaration", "labels": ["Bug", "Domain: Quick Info", "help wanted"]}, {"num": 16662, "title": "Inconsistent quick-fix suggestion messages for importing", "labels": ["Bug", "Domain: Quick Fixes", "good first issue", "help wanted"]}, {"num": 13865, "title": "Inconsistent treatment of non-widening string literal types and `+=`", "labels": ["Bug"]}, {"num": 23226, "title": "Inconsistent type compatibility for a type with a call signature and and index signature", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 39262, "title": "Inconsistent type hover information", "labels": ["Bug", "Domain: Quick Info"]}, {"num": 32634, "title": "Inconsistent type shown in QuickInfo in nested generic call", "labels": ["Bug"]}, {"num": 26391, "title": "Incorrect \"Cannot find name\" when importing default value", "labels": ["Bug"]}, {"num": 11629, "title": "Incorrect (potentially) indentation of function arguments spanning multiple lines", "labels": ["Awaiting More Feedback", "Domain: Formatter", "Suggestion", "VS Code Tracked"]}, {"num": 38986, "title": "Incorrect autocomplete for \"File\" class ", "labels": ["Bug"]}, {"num": 6314, "title": "Incorrect autocomplete suggestion with dots", "labels": ["Bug", "help wanted"]}, {"num": 33191, "title": "Incorrect circularity detection", "labels": ["Bug"]}, {"num": 37301, "title": "Incorrect codegen and error detection for static property used as computed key in instance property of the same class", "labels": ["Bug"]}, {"num": 10498, "title": "Incorrect compilation of template strings containing Unicode characters", "labels": ["Bug", "help wanted"]}, {"num": 12872, "title": "incorrect demo codes in chapter \"/docs/handbook/interfaces.html\" of handbook", "labels": ["Docs"]}, {"num": 4970, "title": "Incorrect dialog box default value for rename of es6 module imports", "labels": ["Bug"]}, {"num": 35447, "title": "Incorrect display of property name in closure inside JavaScript function class", "labels": ["Bug", "Domain: Quick Info"]}, {"num": 30075, "title": "Incorrect docs: type compatibility for functions with overloads", "labels": ["Docs"]}, {"num": 7714, "title": "Incorrect downlevel compilation for block scoped bindings captured in class initializers", "labels": ["Bug"]}, {"num": 8578, "title": "Incorrect emit of defining class expression with static property inside loop", "labels": ["Bug"]}, {"num": 8626, "title": "Incorrect error message for empty config files", "labels": ["Bug", "help wanted"]}, {"num": 33341, "title": "Incorrect error message on export assignment in `.d.ts` file", "labels": ["In Discussion", "Suggestion"]}, {"num": 21992, "title": "Incorrect escaping of unicode character in JSX attribute", "labels": ["Bug", "help wanted"]}, {"num": 25292, "title": "Incorrect extract function when variable with var in for loop is extracted", "labels": ["Bug", "Domain: Refactorings"]}, {"num": 14531, "title": "Incorrect Formatting For Class With Decorator ", "labels": ["Bug", "Domain: Formatter", "VS Code Tracked", "help wanted"]}, {"num": 16043, "title": "Incorrect formatting of expression lists", "labels": ["Bug", "Domain: Formatter", "help wanted"]}, {"num": 13205, "title": "incorrect formatting on javascript", "labels": ["Bug", "Domain: Formatter", "VS Code Tracked", "help wanted"]}, {"num": 33260, "title": "Incorrect function type signature for ParameterDecorator", "labels": ["Bug", "Domain: lib.d.ts"]}, {"num": 4706, "title": "Incorrect imported function `this` context using ES6 module", "labels": ["Bug", "ES6", "help wanted"]}, {"num": 17768, "title": "Incorrect indent of expression arrow functions with multi-line parameter list", "labels": ["Bug", "Domain: Formatter"]}, {"num": 16265, "title": "Incorrect indent with template literal", "labels": ["Bug", "Domain: Formatter", "VS Code Tracked", "help wanted"]}, {"num": 38830, "title": "Incorrect Indenting Behavior in VS", "labels": ["Domain: Smart Indentation", "Needs Investigation", "Visual Studio"]}, {"num": 32664, "title": "Incorrect inference of arrow function with intersected mapped type argument under strictFunctionTypes", "labels": ["Needs Investigation"]}, {"num": 40405, "title": "Incorrect initialization type checking for conditional type", "labels": ["Needs Investigation"]}, {"num": 28070, "title": "incorrect leading(?) comment for variable declaration in loop statement", "labels": ["Bug", "Domain: Comment Emit", "Effort: Moderate", "help wanted"]}, {"num": 38483, "title": "Incorrect lexing of TLA await in try...catch", "labels": ["Bug", "Rescheduled"]}, {"num": 34663, "title": "Incorrect or broken autocomplete suggestions for enum indexed interfaces", "labels": ["Bug", "Domain: Completion Lists"]}, {"num": 38283, "title": "Incorrect parse on static property followed by method", "labels": ["Bug", "Fix Available", "Rescheduled"]}, {"num": 6108, "title": "Incorrect parsing for comma-separated interface/type literal properties with no type annotation", "labels": ["Bug", "help wanted"]}, {"num": 28680, "title": "Incorrect rename of imported declaration", "labels": ["Bug"]}, {"num": 41053, "title": "incorrect result with conditional type and boolean", "labels": ["Needs Investigation"]}, {"num": 38529, "title": "incorrect return type of NodeListOf.item()", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 39205, "title": "Incorrect side effect ordering in destructuring transform", "labels": ["Bug", "Fix Available", "Rescheduled"]}, {"num": 22484, "title": "Incorrect Source Map Generation", "labels": ["Bug"]}, {"num": 13433, "title": "Incorrect text caret position on fourslash tester", "labels": ["Bug"]}, {"num": 39592, "title": "Incorrect type allowed in returned object ", "labels": ["Bug"]}, {"num": 12666, "title": "Incorrect type definition for \"ErrorEvent\" in \"lib.es6.d.ts\"", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 29828, "title": "Incorrect type for `ClassDecorator`", "labels": ["Needs Investigation"]}, {"num": 27212, "title": "Incorrect type inference", "labels": ["Design Limitation"]}, {"num": 21519, "title": "Incorrect type inference for array rest assignment and inability to add annotation", "labels": ["Bug"]}, {"num": 37290, "title": "Incorrect type inference for Record with symbol key", "labels": ["In Discussion", "Suggestion"]}, {"num": 35626, "title": "Incorrect type inference in promise.all", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 39183, "title": "Incorrect type inference inside stateful loop", "labels": ["Design Limitation"]}, {"num": 40330, "title": "Incorrect type inference of Promise.all when spreading Promise arrays", "labels": ["Needs Investigation"]}, {"num": 40215, "title": "Incorrect type inference when destructuring a tuple", "labels": ["Needs Investigation"]}, {"num": 29982, "title": "Incorrect typing for iterables in lib", "labels": ["Needs More Info"]}, {"num": 31789, "title": "Incorrect union type inference for conjunction with strictNullChecks disabled", "labels": ["Bug"]}, {"num": 14670, "title": "Incorrect WebAudio classes constructor arguments declarations in lib.es6.d.ts", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 39131, "title": "Incorrectly inferred object property as string literal value", "labels": ["Needs Investigation"]}, {"num": 37580, "title": "Incorrectly typed argument variant", "labels": ["Bug"]}, {"num": 30602, "title": "Incremental --build, then delete generated js file, then another incremental --build does not recreate js file", "labels": ["Awaiting More Feedback", "Domain: --incremental", "Suggestion"]}, {"num": 38354, "title": "Incremental type checking failure (regression)", "labels": ["Needs Investigation"]}, {"num": 35086, "title": "Incremental type narrowing, enabling gradual object initialization", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 17699, "title": "Indent of function body after multiple params adds extra level of indent", "labels": ["Bug", "Domain: Formatter", "help wanted"]}, {"num": 6281, "title": "Indentation failure with unclosed JSX element", "labels": ["Bug", "Domain: JSX/TSX"]}, {"num": 3676, "title": "Indentation is too aggressive for ternary operator", "labels": ["Bug", "good first issue", "help wanted"]}, {"num": 32652, "title": "Index signature alternative", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 27144, "title": "Index signature is assignable to weak type whose properties don't match the signature type", "labels": ["Bug"]}, {"num": 15300, "title": "Index signature is missing in type (only on interfaces, not on type alias)", "labels": ["In Discussion", "Suggestion"]}, {"num": 22077, "title": "Index signature kills property completions from constraint", "labels": ["Bug", "Domain: Completion Lists"]}, {"num": 40305, "title": "index types not discoverable across files (via find-all-references)", "labels": ["Bug", "Domain: Symbol Navigation"]}, {"num": 24166, "title": "Indexed Access Operator inconsistent handling between language service and compiler", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 36316, "title": "Indexed access operator issue with Omit type", "labels": ["Design Limitation"]}, {"num": 26759, "title": "Indexed this types don't narrow when their referenced property narrows", "labels": ["In Discussion", "Suggestion"]}, {"num": 30784, "title": "Indexing a mapped type does not return the expected type.", "labels": ["Design Limitation"]}, {"num": 12184, "title": "Indirect type narrowing via `const`", "labels": ["Revisit", "Suggestion"]}, {"num": 35534, "title": "Ineffective mark-compacts near heap limit Allocation failed during multi project build", "labels": ["Needs More Info"]}, {"num": 39903, "title": "infer argument types for generic method decorator factory", "labels": ["Declined", "Suggestion"]}, {"num": 38390, "title": "Infer arrow function type guard type for specific simple cases", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 39251, "title": "Infer const-ness of local let bindings that aren't assigned to", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 17473, "title": "Infer constrained generic parameters after instanceof check", "labels": ["In Discussion", "Suggestion"]}, {"num": 41040, "title": "Infer declarations are allowed in generic constraints, but do not infer generic constraint types", "labels": ["Bug"]}, {"num": 17559, "title": "Infer extra parameter types from default values", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 39838, "title": "Infer generic function types from arg by way of mapped type", "labels": ["Design Limitation"]}, {"num": 28655, "title": "Infer generic type from ReturnType", "labels": ["Design Limitation"]}, {"num": 28787, "title": "Infer Generics Types, from Record<string<...> Aggregation for return type constraints ", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 13969, "title": "Infer literal types for string concatenations and similar expressions", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 30102, "title": "Infer method name for parameter decorator", "labels": ["Needs Investigation"]}, {"num": 41081, "title": "Infer never type for getters that don't return (e.g. by throwing an error in all codepaths)", "labels": ["In Discussion", "Suggestion"]}, {"num": 36239, "title": "Infer non returning function to be returning `undefined`, not `void`", "labels": ["In Discussion", "Suggestion"]}, {"num": 10765, "title": "Infer overload signatures from implementation bodies", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 28766, "title": "Infer parameter types from usage quick fix does not work for arrow function in class property initializers", "labels": ["Bug"]}, {"num": 28764, "title": "Infer parameter types from usage quick fix infers to any from React component props", "labels": ["Bug"]}, {"num": 25376, "title": "Infer project references from common monorepo patterns / tools", "labels": ["In Discussion", "Scenario: Monorepos & Cross-Project References", "Suggestion"]}, {"num": 29182, "title": "Infer return type when returning result of overloaded function.", "labels": ["In Discussion", "Suggestion"]}, {"num": 39747, "title": "Infer super function call from super", "labels": ["Out of Scope", "Suggestion"]}, {"num": 27584, "title": "Infer type arguments from 'super()' calls", "labels": ["In Discussion", "Suggestion"]}, {"num": 16069, "title": "Infer type guard => array.filter(x => !!x) should refine Array<T|null> to Array<T>", "labels": ["In Discussion", "Suggestion"]}, {"num": 22617, "title": "Infer type in conditional cannot unify generics", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 35945, "title": "Infer type when object coerced to string if toString explicitly defined", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 28377, "title": "infer-from-usage codefix should mark parameters as optional", "labels": ["Domain: Quick Fixes", "In Discussion", "Suggestion"]}, {"num": 28253, "title": "Infer-from-usage should find references of related tokens", "labels": ["Domain: Quick Fixes", "Experience Enhancement", "Suggestion", "feature-request"]}, {"num": 28320, "title": "infer-from-usage should infer \"truthy\" when only undefined is available", "labels": ["Bug", "Domain: Quick Fixes"]}, {"num": 33369, "title": "Inference failing for conditional types in function parameters", "labels": ["Bug", "Domain: Conditional Types", "Domain: Type Inference", "Rescheduled"]}, {"num": 24900, "title": "Inference fails nondeterministic when callback gets a `typeof` in an object", "labels": ["Bug"]}, {"num": 37141, "title": "Inference for Object.isPrototypeOf()", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 33072, "title": "Inference from arrow function parameters with default initializers is broken when passed to generic function", "labels": ["Bug", "Design Limitation"]}, {"num": 37193, "title": "Inference from rest parameters has strange inconsistent results", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 12846, "title": "Inference isn't working with constructor that contextually types 'this' with intersections of itself", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 31402, "title": "Inference of constrained generic causes open generic to \"escape\"", "labels": ["Bug", "Fix Available", "Rescheduled"]}, {"num": 28747, "title": "Inference of parameter fail", "labels": ["Bug", "Domain: JSX/TSX", "Domain: Refactorings"]}, {"num": 35222, "title": "Inference of \u201cthis\u201d with higher order functions", "labels": ["Design Limitation"]}, {"num": 20861, "title": "Inference problem", "labels": ["Bug"]}, {"num": 29662, "title": "inference problem with constraints involving conditionals and generics ", "labels": ["Needs Investigation"]}, {"num": 35636, "title": "Inference to generic class without explicit constructor fails", "labels": ["Bug", "Domain: Type Inference"]}, {"num": 35641, "title": "Inference to generic overloaded construct signatures fails", "labels": ["Design Limitation"]}, {"num": 39588, "title": "inferFromUsage JSDoc Quick fix breaks return function pattern", "labels": ["Bug", "help wanted"]}, {"num": 33852, "title": "Infering type of optional parameter of lambda function is broken when passed to generic function.", "labels": ["Bug"]}, {"num": 36737, "title": "Inferred generic type gets lost when trying to return value", "labels": ["Design Limitation"]}, {"num": 26942, "title": "Inferred index types on type parameters don't propagate through NonNullable<T>", "labels": ["Design Limitation"]}, {"num": 29183, "title": "Inferred missing properties use resolved generic types rather than staying generic", "labels": ["Domain: Quick Fixes", "Experience Enhancement", "Suggestion"]}, {"num": 28505, "title": "Inferred tuple type rest parameter with intersection seems to place error on wrong argument", "labels": ["Bug", "Domain: Error Messages"]}, {"num": 41196, "title": "Inferreing key of mapped type and embedding into a string template type doesn't work in some cases", "labels": []}, {"num": 31719, "title": "Inferring \"this\" from arrow function is {}", "labels": ["In Discussion", "Suggestion"]}, {"num": 11454, "title": "Inheritance and type narrowing prevent private member access in base class.", "labels": ["Bug"]}, {"num": 26056, "title": "Inheritance nested class from interface contains rxjs reference, breaks constructor type checking", "labels": ["Design Limitation"]}, {"num": 38185, "title": "Inherited interface functions cause compile error when interface extensions are reordered.", "labels": ["Needs Investigation"]}, {"num": 10570, "title": "Inherited typing for class property initializers", "labels": ["In Discussion", "Suggestion"]}, {"num": 26522, "title": "Initializing enum members with another string enum causes incorrect/inconsistent types", "labels": ["Breaking Change", "In Discussion", "Suggestion"]}, {"num": 33335, "title": "Initializing JS/TS Features is extremely slow with WSL and node_modules", "labels": ["Domain: Performance", "Fix Available"]}, {"num": 28199, "title": "inline comments are striped in emitted declaration files", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 27070, "title": "Inline function refactoring", "labels": ["Domain: Refactorings", "In Discussion", "Suggestion"]}, {"num": 31444, "title": "Inline Generics OR Expressing polymorphic relationships in interfaces with conditional types", "labels": ["Suggestion", "Too Complex"]}, {"num": 18459, "title": "Inline local refactoring", "labels": ["Domain: Refactorings", "In Discussion", "Suggestion", "VS Code Tracked"]}, {"num": 39290, "title": "Inline tsdoc comment support", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 9817, "title": "Inlined constrained type using control flow analysis", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 26843, "title": "Input source maps", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 35990, "title": "Insert semicolon on typing fails after typing function block", "labels": ["Bug"]}, {"num": 26970, "title": "Inserting intersections with 'Function' while narrowing breaks code", "labels": ["Awaiting More Feedback", "Breaking Change", "Suggestion"]}, {"num": 16757, "title": "insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets does not correctly add space between } and ]", "labels": ["Bug", "Domain: Formatter", "help wanted"]}, {"num": 37148, "title": "Inspect interface composition hierarchy and its full set of members", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 38496, "title": "Instance member function becomes instance member property in mapped types", "labels": ["Needs Investigation"]}, {"num": 7600, "title": "Instance member not in navigation bar items if it has the same name as a static member", "labels": ["Bug", "help wanted"]}, {"num": 28936, "title": "instanceof AbstractClass.constructor should narrow to typeof AbstracClass", "labels": ["In Discussion", "Suggestion"]}, {"num": 28560, "title": "instanceof narrowing should preserve generic types from super to child type", "labels": ["Domain: Control Flow", "In Discussion", "Suggestion"]}, {"num": 27276, "title": "instanceof type guard fails with a static `toString` method", "labels": ["Bug"]}, {"num": 32188, "title": "int32 type returned by bitwise operators", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 40560, "title": "Intellisence Import Update Feature creates erroneous updates when used with a compilerOptions.paths ", "labels": ["Needs Investigation"]}, {"num": 3520, "title": "Intellisense behaviour of functions and parameters", "labels": ["Experience Enhancement", "Suggestion", "VS Code Tracked", "help wanted"]}, {"num": 32289, "title": "Intellisense breaks when omit is used", "labels": ["Needs Investigation"]}, {"num": 35570, "title": "Intellisense breaks when typing a function", "labels": ["Bug", "Domain: JSDoc", "Domain: Quick Info"]}, {"num": 38848, "title": "Intellisense concatenates field description from subtypes", "labels": ["Bug", "Domain: Quick Info"]}, {"num": 38849, "title": "Intellisense does not appear in JSX attributes for union types", "labels": ["Bug", "Domain: Quick Info"]}, {"num": 13701, "title": "Intellisense does not work with [P in keyof T]", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 40139, "title": "Intellisense doesn't find variable in tsconfig's \"paths\" directory in parent folder", "labels": ["Needs Investigation"]}, {"num": 26662, "title": "Intellisense for generic parameterized string literal function arguments not working", "labels": ["Domain: Completion Lists", "Experience Enhancement", "Suggestion", "VS Code Tracked"]}, {"num": 39517, "title": "IntelliSense for generic Promise function shows truncated return type", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 32118, "title": "Intellisense for Node.js doesn't work", "labels": ["Needs More Info"]}, {"num": 38793, "title": "Intellisense ignoring the typeRoots settings in tsconfig.json", "labels": ["Needs More Info"]}, {"num": 39456, "title": "IntelliSense Import Stops Working After One Import", "labels": ["Needs Investigation"]}, {"num": 38166, "title": "Intellisense import suggestions - search index files only ", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 28472, "title": "intellisense in static method suggests TypeParameter of outer class", "labels": ["In Discussion", "Suggestion"]}, {"num": 31966, "title": "Intellisense mismatch for overload function vs paramaters", "labels": ["Bug"]}, {"num": 40121, "title": "Intellisense not working for nested npm modules in node project with typings", "labels": ["Needs Investigation"]}, {"num": 35479, "title": "IntelliSense not working properly when exporting with connect of react-redux", "labels": ["Bug", "Domain: Quick Info"]}, {"num": 40355, "title": "IntelliSense not working when esModuleInterop was `true` and swagger-parser was imported.", "labels": ["Bug"]}, {"num": 30893, "title": "IntelliSense Parses JSDoc Namepath Part \"module\" as a Actual Module File Path", "labels": ["Needs Investigation"]}, {"num": 29516, "title": "Intellisense should inherit documentation for Interfaces.", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 38040, "title": "Intellisense should show internals of an interface declaration on hover", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 40773, "title": "IntelliSense shows invalid tips for tuple", "labels": ["Bug", "Domain: Completion Lists"]}, {"num": 32036, "title": "IntelliSense signature help forgets inferred parameter names in completed call", "labels": ["Bug"]}, {"num": 30056, "title": "Intellisense sometimes fails to show anything for Node modules", "labels": ["Bug"]}, {"num": 39326, "title": "Intellisense stuck on loading after trying to index absolute import", "labels": ["Bug"]}, {"num": 28471, "title": "intellisense suggests inferred type parameter in else branch of conditional type", "labels": ["Bug", "Domain: Completion Lists"]}, {"num": 36537, "title": "intellisense to reference computed field directly", "labels": ["Bug"]}, {"num": 30656, "title": "intellisense typeroots for jsconfig.json ", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 32282, "title": "Intellisense: optional parameters are too verbose (bar? number | undefined)", "labels": ["In Discussion", "Suggestion"]}, {"num": 10964, "title": "Interactive init", "labels": ["In Discussion", "Suggestion"]}, {"num": 22686, "title": "Interface and TypeAlias should be forbidden in Statement position, currently causing invalid emit or crash", "labels": ["Bug"]}, {"num": 24415, "title": "interface extending a type produces error only if a generic is changed", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 40904, "title": "Interface merging for any property names does not allow type narrowing", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 16755, "title": "interface stubbing for anonymous implementations", "labels": ["Domain: Completion Lists", "Domain: Quick Fixes", "Experience Enhancement", "Suggestion", "VS Code Tracked"]}, {"num": 13347, "title": "Interface with readonly property is assignable to interface with mutable property", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 32608, "title": "Interfaces and types that use conditional types and inheritance no longer assignable", "labels": ["Design Limitation"]}, {"num": 38094, "title": "Interoperability with Webpack import statements", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 30351, "title": "Intersect function type or call signature with a different return type", "labels": ["Needs More Info"]}, {"num": 21998, "title": "Intersection of enum union with literal is unexpectedly `never`", "labels": ["In Discussion", "Suggestion"]}, {"num": 30901, "title": "Intersection type intellisense duplicates jsdoc, rather than overriding", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 26617, "title": "Intersection type of abstract classes does not throw error if same member exists in multiple abstract classes", "labels": ["Bug", "help wanted"]}, {"num": 26548, "title": "Intersection type of object types does not satisfy generic constraint.", "labels": ["Design Limitation"]}, {"num": 33654, "title": "Intersection type with discriminated union type that includes all possible enum values cannot accept enum type", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 16251, "title": "Intersection type with partial not working", "labels": ["Bug"]}, {"num": 19927, "title": "Intersection with mapped never type allows incompatible optional assignments", "labels": ["Bug"]}, {"num": 39660, "title": "Intl.RelativeTimeFormat does not correctly reflect the spec", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 29438, "title": "Introduce 'extends type' and 'extends modifier' or phantom types to simplify the language and speed it up.", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 38374, "title": "Introduce new flag for minifier optimization hints", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 28375, "title": "Introduce the opposite of the non-null assertion", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 26470, "title": "Intuitive != expected != actual behaviour when combining string and symbol keys", "labels": ["Bug"]}, {"num": 35858, "title": "Invalid \"could be instantiated with a different subtype of constraint\" error", "labels": ["Design Limitation"]}, {"num": 3305, "title": "Invalid combinations of --out, --outDir, and --rootDir should cause a compiler error.", "labels": ["Bug", "help wanted"]}, {"num": 38188, "title": "Invalid context in constructor (at runtime)", "labels": ["Bug", "Domain: JS Emit", "Rescheduled"]}, {"num": 15642, "title": "Invalid intellisense when typing a dot in index key", "labels": ["Bug", "Domain: Completion Lists", "help wanted"]}, {"num": 35797, "title": "Invalid output emited as the result of javascript file compilation: amd, default export, jsdoc", "labels": ["Bug", "Rescheduled"]}, {"num": 4587, "title": "Invalid parse error with newline and division", "labels": ["Bug", "help wanted"]}, {"num": 31091, "title": "Invalid Semantic Links for Inferred Type Arguments", "labels": ["Bug"]}, {"num": 38990, "title": "invariant and failing types infer", "labels": ["Design Limitation"]}, {"num": 33623, "title": "Investigate altering extension priorities for wildcard loading", "labels": ["Bug", "Fix Available"]}, {"num": 34773, "title": "Investigate Asynchronous File IO", "labels": ["Domain: Performance", "Experimentation Needed", "In Discussion", "Suggestion"]}, {"num": 34783, "title": "Investigate Delayed Go-to-Definition Behavior in Editors", "labels": ["Bug", "Domain: Performance", "Domain: Symbol Navigation"]}, {"num": 36265, "title": "Investigate eagerly returning more information about suggestions ", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 35121, "title": "Investigate implicit excludes", "labels": ["Domain: Performance"]}, {"num": 35120, "title": "Investigate making the binding phase lazy", "labels": ["Domain: Performance"]}, {"num": 9225, "title": "Is it possible to link typescript interfaces to JSON files?", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 30162, "title": "is not under 'rootDir' 'src/'. even with exclude", "labels": ["Experience Enhancement", "Suggestion", "help wanted"]}, {"num": 28894, "title": "is out-of-bounds in tuple of length\uff0cbut the introduction in the document can be out of bounds", "labels": ["Docs"]}, {"num": 7903, "title": "Is there a MSBuild parameter that tells VS which `tsconfig.json` to use?", "labels": ["Bug", "Visual Studio"]}, {"num": 6070, "title": "is there a way to narrow down the amount of information that goes to the member info tooltip of intellisense?", "labels": ["Domain: Quick Info", "Effort: Moderate", "Suggestion", "help wanted"]}, {"num": 14306, "title": "Is there a way to use TypeScript to prevent accidental global access?", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 40718, "title": "Is this a bug with lerna multi package project with TS4053 error?", "labels": ["Bug"]}, {"num": 25691, "title": "isNewIdentifierLocation is always set to true inside function call", "labels": ["Bug", "Domain: Completion Lists", "Fix Available", "Fixed"]}, {"num": 29402, "title": "isNewIdentifierLocation is wrong in certain case, which messes up autocomplete", "labels": ["Bug", "Domain: Completion Lists"]}, {"num": 37459, "title": "Isolated files with import / export statements are not being scoped.", "labels": ["Needs More Info"]}, {"num": 37774, "title": "isolatedModules doesn't respect enabled preserveConstEnum option what the project might be build with", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 31673, "title": "Issue a better error message when trying to use a modifier outside of a mapped type", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 17674, "title": "Issue a custom error when we encounter parse errors in @types modules", "labels": ["Committed", "Suggestion"]}, {"num": 227, "title": "Issue a more useful error when attempting to construct non-newable type", "labels": ["Bug", "Domain: Error Messages", "help wanted"]}, {"num": 8344, "title": "Issue an error if tsconfig.json results in no files to compile", "labels": ["Bug", "help wanted"]}, {"num": 28424, "title": "Issue better error message for binary operations between numbers and bigints", "labels": ["Domain: Error Messages", "Experience Enhancement", "Suggestion"]}, {"num": 35927, "title": "Issue errors on tslib version ranges in `package.json`", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 6271, "title": "Issue in indentation when formatting consecutive objects", "labels": ["Bug", "Domain: Formatter", "help wanted"]}, {"num": 2617, "title": "Issue with debugging \u201cthis\u201d in VS2013 when using lambdas", "labels": ["Needs Proposal", "Suggestion", "Visual Studio"]}, {"num": 36846, "title": "Issue with union type", "labels": ["Needs Investigation"]}, {"num": 29605, "title": "Issues trying to auto-import across project boundaries ", "labels": ["In Discussion", "Suggestion"]}, {"num": 31943, "title": "Issues with Pick causes tsc (on Node12/Win10?) to hang.", "labels": ["Needs Investigation"]}, {"num": 34567, "title": "Issues working with Generic Constraints", "labels": ["Design Limitation"]}, {"num": 29398, "title": "It is not allowed to push a number to the array foo in {foo: []}", "labels": ["Bug", "Domain: Control Flow"]}, {"num": 32682, "title": "Iterable and AsyncIterable interfaces should have full type arguments", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 33353, "title": "IterableIterator<T>.next().value is now any instead of T", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 33123, "title": "iterating an enum is now an error", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 37505, "title": "Iteration using for of does not recognize optional arrays in generic mapped types", "labels": ["Bug"]}, {"num": 15168, "title": "Iterator interface for LanguageService", "labels": ["API", "Awaiting More Feedback", "Suggestion"]}, {"num": 33932, "title": "Iterator result of Iterable or AsyncIterable inferred to any ", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 38479, "title": "IteratorResult<T> definition conflicts with the JS spec", "labels": ["Fix Available", "Needs Investigation", "Rescheduled"]}, {"num": 21851, "title": "Jake tests will all run if runtests-parallel --tests=<regexp> has no matches", "labels": ["Infrastructure"]}, {"num": 35448, "title": "JavaScript Descripton and type not displayed in Intellisense when described in a nested object", "labels": ["Bug", "Domain: Quick Info"]}, {"num": 29235, "title": "Javascript error which isn't one: 'type arguments' can only be used in a .ts file", "labels": ["Bug", "Domain: JavaScript", "Effort: Moderate", "help wanted"]}, {"num": 17112, "title": "JavaScript heap out of memory for 10s of MB of source", "labels": ["Bug"]}, {"num": 36609, "title": "JavaScript intellisense does not support adding additional prototype properties to function call in other file", "labels": ["Design Limitation"]}, {"num": 22433, "title": "Javascript modules should be able to pass the exported value to child modules", "labels": ["Bug", "Domain: JavaScript", "checkJs"]}, {"num": 32069, "title": "JavaScript rename not working for JSDoc param name for function assignment", "labels": ["Bug"]}, {"num": 22441, "title": "Javascript should allow non-top-level assignment to exports assignments", "labels": ["Bug", "Domain: JavaScript"]}, {"num": 29292, "title": "Javascript, Nodejs: Go to definition for required file does not work if required file does not contain exports.", "labels": ["Bug", "Domain: Symbol Navigation", "Domain: TSServer"]}, {"num": 29379, "title": "JavaScript/TypeScript region folding with //region does not work", "labels": ["Awaiting More Feedback", "Domain: Outlining", "Suggestion"]}, {"num": 28210, "title": "JavaScript: default parameter causes type to be incorrectly inferred ", "labels": ["Awaiting More Feedback", "Domain: JavaScript", "Suggestion"]}, {"num": 26792, "title": "Javascript: Object.assign to assign property values for classes is not respected", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 41259, "title": "JS autocomplete doesn't work for object literal shorthands ", "labels": ["Bug", "Domain: Completion Lists", "Effort: Moderate", "help wanted"]}, {"num": 33386, "title": "JS Doc parameter comment description drops leading star", "labels": ["Bug", "Domain: Quick Info", "VS Code Priority"]}, {"num": 11367, "title": "JS Doc type intellisense not working when using custom file extension", "labels": ["Awaiting More Feedback", "Suggestion", "VS Code Tracked"]}, {"num": 29553, "title": "Js file type inference error", "labels": ["In Discussion", "Suggestion", "checkJs"]}, {"num": 28362, "title": "JS file with default config gets convert-to-es6-module suggestion", "labels": ["Domain: JavaScript", "Needs More Info"]}, {"num": 39400, "title": "JS Find function definition involving a function generator", "labels": ["Bug"]}, {"num": 37699, "title": "js function hover adds arguments `...args: any[]` when calling an object property named `arguments`", "labels": ["Bug"]}, {"num": 38885, "title": "JS global variable suggestion", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 41256, "title": "JS IntelliSense only picks up JSDoc @inherits rule in class definition but not on children or instances", "labels": []}, {"num": 26912, "title": "JS should allow merging/expando properties on imports", "labels": ["Domain: JavaScript", "In Discussion", "Suggestion"]}, {"num": 29194, "title": "JS type-checking suggested refactoring produces maximum possible redundant relative module path", "labels": ["Bug", "Domain: Quick Fixes"]}, {"num": 32366, "title": "JS Typedef merged with default export alias behaves strangely", "labels": ["Bug", "Domain: JavaScript"]}, {"num": 32367, "title": "JS typedef merged with default export class behaves strangely", "labels": ["Bug", "Domain: JavaScript"]}, {"num": 32368, "title": "JS typedef merged with default modified class errors strangely", "labels": ["Bug", "Domain: Error Messages", "Domain: JavaScript"]}, {"num": 36662, "title": "JS value being parsed as a TS type argument", "labels": ["Breaking Change", "Bug"]}, {"num": 26284, "title": "JS: Can't assign to superclass property", "labels": ["Bug", "Domain: JSDoc", "Domain: JavaScript", "checkJs"]}, {"num": 33120, "title": "JS: Type reference not resolved, but gives type to variable", "labels": ["Bug", "Domain: Quick Info"]}, {"num": 15869, "title": "jsconfig Not Picked Up When tsconfig is Present", "labels": ["Awaiting More Feedback", "Suggestion", "VS Code Tracked"]}, {"num": 33435, "title": "jsconfig.json gives broken intellisense for js files with module.exports", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 36872, "title": "jsdoc \"object.\" fails where \"Object.\" works.", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 14245, "title": "JSDoc - generate @type for a variable", "labels": ["Awaiting More Feedback", "Domain: JSDoc", "Domain: JavaScript", "Suggestion"]}, {"num": 28730, "title": "JSDoc : add support for @method (and @property)", "labels": ["Domain: JSDoc", "Domain: JavaScript", "In Discussion", "Suggestion"]}, {"num": 26675, "title": "JSDoc @augments doesn\u2019t allow function calls to augment existing types", "labels": ["Domain: JSDoc", "Domain: JavaScript", "Experience Enhancement", "Suggestion"]}, {"num": 30156, "title": "JSDoc @implements tag/clause not checked", "labels": ["Bug", "Domain: JSDoc", "Domain: JavaScript"]}, {"num": 31622, "title": "JSDoc @name tag does not function", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 36633, "title": "JSDoc @param does not work for function variables", "labels": ["Needs Investigation"]}, {"num": 36378, "title": "Jsdoc @this show incorrect type  in inherited method", "labels": ["Bug"]}, {"num": 36771, "title": "JSDoc @this/@lends/@namespace tags are ignored inside Object", "labels": ["Bug", "Domain: JSDoc"]}, {"num": 35544, "title": "JSDoc @type annotation ignored in chained variable declaration", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 28724, "title": "JSDoc @type for list of declarations", "labels": ["Bug", "Domain: JavaScript"]}, {"num": 39667, "title": "jsdoc @type is not working properly for some class method variant", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 35346, "title": "JSDoc @typedef property description lost ", "labels": ["Bug", "Domain: JSDoc", "Domain: Quick Info"]}, {"num": 19990, "title": "JSDoc Allow lone rest type", "labels": ["Bug", "Domain: JavaScript"]}, {"num": 19988, "title": "JSDoc allow missing parameter names", "labels": ["Bug", "Domain: JSDoc", "Domain: JavaScript"]}, {"num": 26635, "title": "JSdoc casts should only work when directly attached to an expression", "labels": ["Bug", "Domain: JSDoc", "Domain: JavaScript"]}, {"num": 30176, "title": "JSDoc Class extending Array not supported (?)", "labels": ["Bug"]}, {"num": 24746, "title": "JSDoc comment for destructuring param: description text not displayed", "labels": ["Bug", "Domain: JSDoc", "help wanted"]}, {"num": 14575, "title": "JSDoc comment nodes are not traversed and their parents are sent even if they should not", "labels": ["API", "Bug", "help wanted"]}, {"num": 28267, "title": "JSDoc doesn't dig through type aliases", "labels": ["Domain: JSDoc", "Domain: Type Display", "Experience Enhancement", "Suggestion"]}, {"num": 36356, "title": "JSDoc doesn't show param info for parameter properties using @param", "labels": ["Domain: Quick Info", "Experience Enhancement", "Suggestion"]}, {"num": 407, "title": "JSDoc for methods with multiple signatures ", "labels": ["Awaiting More Feedback", "Domain: JSDoc", "Suggestion"]}, {"num": 18085, "title": "JSDoc function annotations not working for chain assignment", "labels": ["Bug", "Domain: JavaScript", "VS Code Tracked"]}, {"num": 19986, "title": "JSDoc function type not parsed correctly when nested", "labels": ["Bug", "Domain: JSDoc", "Domain: JavaScript"]}, {"num": 19982, "title": "JSDoc function type within generic not parsed correctly", "labels": ["Bug", "Domain: JSDoc", "Domain: JavaScript"]}, {"num": 28090, "title": "JSDoc generated by infer-from-usage codefix should be sorted", "labels": ["Bug", "Domain: JavaScript"]}, {"num": 14248, "title": "JSDoc generation - generate @returns when function returns a value", "labels": ["Awaiting More Feedback", "Domain: JSDoc", "Suggestion", "VS Code Priority", "VS Code Tracked"]}, {"num": 38416, "title": "JSDoc import integration doesn't support return-style AMD modules", "labels": ["Awaiting More Feedback"]}, {"num": 23362, "title": "JSDOC inconsistance casting behavior", "labels": ["Bug", "Domain: JavaScript"]}, {"num": 30943, "title": "jsDoc intellisense support for @augments/@extends ", "labels": ["Add a Flag", "Awaiting More Feedback", "Domain: JSDoc", "Domain: JavaScript", "Suggestion"]}, {"num": 30941, "title": "jsDoc intellisense support for @typedef in another file", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 22350, "title": "JSDoc member documentation not returned by quickInfo", "labels": ["Bug", "Domain: JSDoc", "Domain: Quick Info"]}, {"num": 38876, "title": "JSDoc missing syntax for `new Map<string, string>()`", "labels": ["In Discussion", "Suggestion"]}, {"num": 33455, "title": "jsdoc mouse hover definition {Array.<static class>} bug", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 30965, "title": "JSDoc multi-line properties within Array<Object> syntax parse differently than Object[]", "labels": ["Bug"]}, {"num": 41216, "title": "JSDoc not retained across default re-export", "labels": []}, {"num": 32842, "title": "jsdoc object index signature syntax doesn't instantiate type variables", "labels": ["Bug", "Domain: JSDoc", "Domain: JavaScript"]}, {"num": 19981, "title": "JSDoc Object literal not parsed ignoring leading star, leading to parse error", "labels": ["Bug", "Domain: JSDoc", "Domain: JavaScript"]}, {"num": 37758, "title": "JSDoc Object.<key, value> Syntax doesn't suport uppercase key type", "labels": ["Bug", "Domain: JSDoc"]}, {"num": 35485, "title": "JSDoc optional argument does not generate an error in strict mode", "labels": ["Bug"]}, {"num": 39906, "title": "JSDoc optional property in object", "labels": ["Domain: JSDoc"]}, {"num": 23397, "title": "JSDoc optional/required variant doesn't play well with multi-@param RecordType declarations", "labels": ["Bug", "Domain: JSDoc", "Domain: JavaScript"]}, {"num": 18273, "title": "JSDoc Parser breaks with a complex `@pattern` tag", "labels": ["Bug", "Domain: JSDoc", "help wanted"]}, {"num": 7237, "title": "JSDoc property and memberof does not work in salsa", "labels": ["Domain: JSDoc", "Domain: JavaScript", "In Discussion", "Suggestion"]}, {"num": 39976, "title": "JSDoc property description containing \"@\" character seems to make everything below this as undefined", "labels": ["Bug"]}, {"num": 36047, "title": "JSDoc property name is not parsed as expected when non-alphanumeric characters are present and intellisense not showing properties", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 31410, "title": "JSDoc property on typedef can only extend `Object` type", "labels": ["Bug"]}, {"num": 19911, "title": "JSDoc refactor doesn't add type parameters", "labels": ["Bug", "Domain: Quick Fixes"]}, {"num": 23936, "title": "JSDoc referencing non-global class: Namespace 'X' has no exported member 'MyClass' ", "labels": ["Bug", "Domain: JSDoc", "Domain: JavaScript"]}, {"num": 36176, "title": "JSDoc support for @memberof and @namespace", "labels": ["Awaiting More Feedback", "Domain: JSDoc", "Suggestion"]}, {"num": 23857, "title": "JSDoc support for @yields", "labels": ["Awaiting More Feedback", "Domain: JSDoc", "Suggestion"]}, {"num": 11859, "title": "JSDoc support for destructured parameters", "labels": ["Domain: JSDoc", "In Discussion", "Suggestion", "VS Code Tracked", "help wanted"]}, {"num": 290, "title": "JSDoc support for object literal fields", "labels": ["Bug", "help wanted"]}, {"num": 13797, "title": "JSDoc syntax highlight. Not supported type '...*'", "labels": ["Bug", "Domain: JSDoc", "VS Code Tracked"]}, {"num": 29570, "title": "JSDOC tag @type crashes tsc", "labels": ["Bug", "Crash", "Domain: JSDoc"]}, {"num": 20000, "title": "JSDoc trying to parse tag names where tag names aren't possible", "labels": ["Domain: JSDoc", "Domain: JavaScript", "In Discussion", "Suggestion"]}, {"num": 19145, "title": "JSDoc-typed node modules require special configuration in consumers to be useful", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 37210, "title": "JSDoc: @inheritDoc disregards optionality of parameters from parent class method", "labels": ["Bug", "Domain: JSDoc", "Effort: Difficult", "feature-request"]}, {"num": 30274, "title": "JSDoc: Typescript is interpreting varargs in function signature as required argument if jsdoc function notation is used in typedef.", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 39516, "title": "jsdocs typedef don't work if declared before conditional unreachable code.", "labels": ["Bug", "Domain: JSDoc"]}, {"num": 35455, "title": "JSDocTag width is inconsistent", "labels": ["Bug", "Effort: Moderate", "GraceHopperOSD", "help wanted"]}, {"num": 24744, "title": "json files should be usable in .d.ts files without breaking things", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 37831, "title": "JSON Module Type Resolution With Heterogeneous Arrays", "labels": ["Design Limitation"]}, {"num": 27930, "title": "JSON type", "labels": ["In Discussion", "Suggestion"]}, {"num": 26854, "title": "JsonWebKey lacking kid attribute", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 7410, "title": "JSX embedded tags syntax not supported", "labels": ["Bug", "Domain: JSX/TSX", "help wanted"]}, {"num": 3767, "title": "JSX IntrinsicElements detection", "labels": ["Discussion"]}, {"num": 28953, "title": "JSX.ElementChildrenAttribute values are never considered excess properties in JSX", "labels": ["Bug", "Domain: JSX/TSX"]}, {"num": 7004, "title": "JSX: a way to make all the properties of value-based elements optional", "labels": ["In Discussion", "Suggestion"]}, {"num": 18357, "title": "JSX: Add a way to specify children as not a part of props", "labels": ["Domain: JSX/TSX", "In Discussion", "Suggestion"]}, {"num": 5834, "title": "Keep indentation level consistent in a multiline list", "labels": ["Bug", "Domain: Formatter", "help wanted"]}, {"num": 33515, "title": "Keep track of why files are in the program", "labels": ["In Discussion", "Suggestion"]}, {"num": 39844, "title": "Keep TSServer alive longer for initialization performance", "labels": ["Domain: TSServer", "In Discussion", "Suggestion"]}, {"num": 39272, "title": "Key can't be number in Proxy", "labels": ["Needs Investigation"]}, {"num": 31136, "title": "KeyboardEvent interface implements key as string", "labels": ["Domain: lib.d.ts", "Needs Proposal", "Suggestion"]}, {"num": 25942, "title": "keyof and type parameters can produce huge types that hang/crash compiler", "labels": ["Bug"]}, {"num": 27171, "title": "keyof becoming union of string literal in emitted type definitions", "labels": ["In Discussion", "Suggestion"]}, {"num": 24622, "title": "keyof does not include well known symbols", "labels": ["Bug", "Fix Available", "Fixed"]}, {"num": 27094, "title": "keyof generic intersection ", "labels": ["Design Limitation"]}, {"num": 23368, "title": "keyof NonNullable<T> cannot be used to index type T", "labels": ["Bug"]}, {"num": 31143, "title": "keyof of 'mixed' class equals to `string | number`", "labels": ["Bug", "Domain: Index Types"]}, {"num": 33254, "title": "keyof T should never print as a union of strings", "labels": ["In Discussion", "Suggestion"]}, {"num": 21388, "title": "keyword to force calling the super on any method", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 30031, "title": "Language service and dts lint disagree on method return type", "labels": ["Needs More Info"]}, {"num": 33631, "title": "Language service doesn't output neither errors nor crashes", "labels": ["Needs Investigation"]}, {"num": 29704, "title": "Language service doesn't reflect lib config of tsconfig.json in declaration files which names are covered with non-declaration files", "labels": ["Needs More Info"]}, {"num": 25323, "title": "Language Service doesn't show object property name suggestions for type with computed property names", "labels": ["Bug", "Domain: Completion Lists"]}, {"num": 38800, "title": "Language service doesn't suggest global variables", "labels": ["Bug", "Domain: Completion Lists"]}, {"num": 33713, "title": "Language service fails to provide type info", "labels": ["Bug", "Needs Investigation"]}, {"num": 32111, "title": "Language service OOM on lodash DT tests when batch compilation succeeds", "labels": ["Bug", "Crash"]}, {"num": 28022, "title": "language service suggestion for Declare property '...' in constructor argument", "labels": ["Domain: Quick Fixes", "Experience Enhancement", "Suggestion"]}, {"num": 40025, "title": "Language service support for classic JavaScript patterns meta-issue", "labels": ["Meta-Issue"]}, {"num": 5687, "title": "Language service: open Type.id", "labels": ["API", "Suggestion", "help wanted"]}, {"num": 5689, "title": "Language Service: TypeParameter.constraint is lazily calculated, but does not have an accessor function", "labels": ["API", "Bug", "help wanted"]}, {"num": 11418, "title": "Language service: unable to rename property in destructured object with generic type", "labels": ["Bug"]}, {"num": 28966, "title": "LanguageService Plugin cannot intercept 'getSupportedCodeFixes'", "labels": ["API", "Bug", "Domain: TSServer", "Effort: Moderate", "help wanted"]}, {"num": 27110, "title": "Later export causes `'T' is referenced directly or indirectly in its own type annotation`", "labels": ["Bug", "Domain: JSDoc", "Domain: JavaScript", "checkJs"]}, {"num": 40567, "title": "Lazier typeof operator to enable limited \"circular\" references", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 38290, "title": "Leading JSDoc `*` in type expression incorrectly parsed", "labels": ["Bug", "Domain: JSDoc"]}, {"num": 6415, "title": "Leak of `noImplicitAny` checking with private static property", "labels": ["Bug", "help wanted"]}, {"num": 37775, "title": "Lib dependencies are transitive", "labels": ["In Discussion", "Suggestion"]}, {"num": 5363, "title": "Lib.d.ts `addEventListener` should specify `ClipboardEvent` payload for relevant events", "labels": ["Bug", "Domain: lib.d.ts", "Revisit", "help wanted"]}, {"num": 15834, "title": "lib.d.ts: members in CSSStyleDeclarations cannot be null per the spec", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 38466, "title": "lib.dom.d.ts - HTMLTextAreaElement, HTMLInputElement do not have \"maxLength\" property", "labels": ["Bug", "Domain: lib.d.ts"]}, {"num": 15691, "title": "lib.dom.d.ts incorrectly types the return type of HTMLMediaElements.play method", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 39425, "title": "lib.dom.d.ts window interfaces missing \"gamepadconnected\" and \"gamepaddisconnected\"", "labels": ["Bug", "Domain: lib.d.ts", "GraceHopperOSD", "help wanted"]}, {"num": 41154, "title": "lib.dom.d.ts: HTMLInputElement::type should be more specific than just 'string'", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 14322, "title": "lib.dom.d.ts: IDBKeyPath defined as string instead of string|string[].", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 40803, "title": "Limit of 25 members when using union of mapped type", "labels": ["Design Limitation"]}, {"num": 11167, "title": "Line break in module declaration causes compile time error", "labels": ["Bug", "help wanted"]}, {"num": 40604, "title": "List @deprecated strikethroughs in Problems tab", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 20283, "title": "List of function properties should put the Function.prototype methods at the bottom of the list", "labels": ["Awaiting More Feedback", "Domain: Completion Lists", "Suggestion"]}, {"num": 15460, "title": "List of plugins for \"Language server plugin support\"", "labels": ["Docs"]}, {"num": 40600, "title": "Literal / Known keyof T (especially for mapped types)", "labels": ["Suggestion"]}, {"num": 39103, "title": "Literal Comparison for Conditional Types", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 29729, "title": "Literal String Union Autocomplete", "labels": ["Design Limitation"]}, {"num": 35982, "title": "LiteralPropertyName should allow BigInt", "labels": ["Bug"]}, {"num": 39822, "title": "Locals named `exports` create incorrect down-level module emit", "labels": ["Bug", "Domain: JS Emit", "Domain: Transforms"]}, {"num": 41153, "title": "Logical nullish assignment together with nullish coalescing produces false positive for \"use before assignment\"", "labels": ["Bug", "Fix Available", "help wanted"]}, {"num": 33499, "title": "Logically equivalent functions return different Types when return is a `Promise | non Promise`", "labels": ["Design Limitation"]}, {"num": 19856, "title": "Long (infinite?) compile times intersecting with large union", "labels": ["Bug"]}, {"num": 31924, "title": "Long checkout times in DevOps builds", "labels": ["Infrastructure"]}, {"num": 37996, "title": "Long running initializing js/ts features ", "labels": ["Needs More Info"]}, {"num": 37778, "title": "Lookup type on `this` unexpectedly takes `true` branch of conditional type", "labels": ["Bug", "Rescheduled"]}, {"num": 33546, "title": "Loose type info of union type after second 'if' condition", "labels": ["Design Limitation"]}, {"num": 40250, "title": "Lose const array type after flating", "labels": ["Design Limitation"]}, {"num": 36124, "title": "Loss of empty type constraint in generics", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 29791, "title": "Loss of type inference converting to named parameters object", "labels": ["Design Limitation"]}, {"num": 29217, "title": "Lots of async-specific code in computeSuggestionDiagnostics", "labels": ["Bug", "Domain: Refactorings"]}, {"num": 28996, "title": "Low readability when type casting by JSDoc", "labels": ["Domain: JSDoc", "In Discussion", "Suggestion"]}, {"num": 35416, "title": "maintain certain class property characteristics in mapped types, like protected/private visibility, and instance property vs instance function", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 15474, "title": "Make 'new.target' emit more precautions", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 31147, "title": "make @ts-ignore available when using {/* @ts-ignore */}.", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 38184, "title": "make `checker.getAllPossiblePropertiesOfTypes` a public method", "labels": ["API"]}, {"num": 30983, "title": "Make `DOMStringList` generic", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 29878, "title": "Make automatic adding missing imports smarter", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 36577, "title": "Make codefix for implementing interfaces work with @implements ", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 39037, "title": "Make cross-file go-to-definition work in the syntax-only server", "labels": ["Bug"]}, {"num": 8529, "title": "Make default JSX mode \"react\"", "labels": ["Suggestion", "good first issue", "help wanted"]}, {"num": 38442, "title": "Make defining a data class easier", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 39283, "title": "Make executeCommandLine a public compiler API", "labels": ["In Discussion", "Suggestion"]}, {"num": 7565, "title": "Make exported consts better minifiable", "labels": ["Suggestion", "help wanted"]}, {"num": 36456, "title": "Make it possible to infer superclass type parameters / constructor overload from the `super` call", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 13206, "title": "Make Javascript intellisense detect inheritance", "labels": ["Committed", "Domain: JavaScript", "Suggestion"]}, {"num": 28714, "title": "Make JS/TS Import fix insert import in linter specified order", "labels": ["Awaiting More Feedback", "Domain: TSServer", "Suggestion"]}, {"num": 37083, "title": "make possible to extend class dynamicly via namespace or interface", "labels": ["Needs More Info"]}, {"num": 27525, "title": "Make Symbol.* (e.g. Symbol.iterator) unique symbols", "labels": ["Bug", "Committed"]}, {"num": 1857, "title": "Make the Compiler and Language Service API Asynchronous", "labels": ["Needs More Info", "Suggestion"]}, {"num": 21406, "title": "Make the type guarding on 'typeof' be transitive.", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 39308, "title": "Make tsc --init generate default target to ES6 or higher", "labels": ["In Discussion", "Suggestion"]}, {"num": 33433, "title": "Make use of `node --expose-gc` when outputting `--diagnostics`, and use for CI", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 819, "title": "Make variable declarations open ended", "labels": ["Needs More Info", "Needs Proposal", "Suggestion"]}, {"num": 37736, "title": "Making isServer() and isClient() checks work in TypeScript ", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 36105, "title": "Manual import path mapping for TypeScript projects", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 31844, "title": "Manually widen a type for conditional/mapped type", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 17476, "title": "Many Pull Requests by contributors have not been maintained for a long time", "labels": ["Discussion"]}, {"num": 28565, "title": "map through enum", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 40559, "title": "Mapped discriminating union refinement", "labels": ["Design Limitation"]}, {"num": 18299, "title": "Mapped properties in interfaces have undefined behavior", "labels": ["Bug", "Domain: Error Messages", "help wanted"]}, {"num": 27995, "title": "Mapped tuples types iterates over all properties", "labels": ["Bug", "Domain: Mapped Types"]}, {"num": 34965, "title": "Mapped type over string enum keys should have quick info showing computed enum members as keys, not identifiers/strings", "labels": ["Bug", "Domain: Quick Info"]}, {"num": 36050, "title": "Mapped type used  with `keyof` not narrowing", "labels": ["Design Limitation"]}, {"num": 38843, "title": "Mapped type with function makes generic accessed function not callable", "labels": ["Design Limitation"]}, {"num": 32932, "title": "Mapped Type with generics display wrong type in IDE", "labels": ["Design Limitation"]}, {"num": 25357, "title": "Mapped Types Breakdown With Extends (extends / implements have inconsistent behavior, ", "labels": ["Bug"]}, {"num": 22509, "title": "Mapped types enumerating keys in `string` behave poorly", "labels": ["In Discussion", "Suggestion"]}, {"num": 35984, "title": "Mapped types shouldn't transform any type", "labels": ["In Discussion", "Suggestion"]}, {"num": 29793, "title": "Mapped types shouldn't transform unknown type", "labels": ["Suggestion"]}, {"num": 38448, "title": "Maps are not properly displayed on typescript playground", "labels": ["Bug"]}, {"num": 36183, "title": "Mark function expressions differently from variables", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 3882, "title": "Mark/infer a function or property as pure/stateless", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 26382, "title": "Math with Number Literal Type", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 32707, "title": "Max depth limit does not trigger. Gives up and resolves type to any", "labels": ["Bug"]}, {"num": 31082, "title": "Maximum call stack size exceeded", "labels": ["Needs More Info"]}, {"num": 40433, "title": "Maximum stack size exceeded on Mobile Safari", "labels": ["Needs More Info"]}, {"num": 30927, "title": "means to find excessive types ", "labels": ["Suggestion", "Too Complex"]}, {"num": 32210, "title": "MediaQueryList.prototype.addListener & removeListener are marked as deprecated", "labels": ["Bug"]}, {"num": 19473, "title": "MediaSession not supported by TypeScript 2.3.4", "labels": ["Domain: lib.d.ts", "Suggestion", "help wanted"]}, {"num": 39010, "title": "MediaTrackConstraintsSet misses torch", "labels": ["Bug", "Domain: lib.d.ts", "GraceHopperOSD", "help wanted"]}, {"num": 35378, "title": "Memory leak when switching git branches on jsconfig.json enabled projects", "labels": ["Needs More Info", "Rescheduled"]}, {"num": 26304, "title": "Mention about HTML Tag Types in the documentation ( Handbook )", "labels": ["Docs"]}, {"num": 31930, "title": "Merge same function signatures for intersection types", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 15159, "title": "Merged class namespace types not visible from a subclass", "labels": ["In Discussion", "Suggestion"]}, {"num": 30159, "title": "Merged object exports of globalThis broken", "labels": ["Bug", "Domain: JavaScript"]}, {"num": 18163, "title": "Merging constants with namespaces", "labels": ["In Discussion", "Suggestion"]}, {"num": 26064, "title": "Meta-issue: Different type assertion behaviors", "labels": ["Meta-Issue"]}, {"num": 30134, "title": "Meta-issue: Use Full Unification for Generic Inference?", "labels": ["Meta-Issue"]}, {"num": 25349, "title": "meta: factory function inconsistencies", "labels": ["API", "Bug", "help wanted"]}, {"num": 15038, "title": "Method class enumerable", "labels": ["Bug", "ES6"]}, {"num": 28903, "title": "Method decorators in class expressions are silently ignored.", "labels": ["Bug"]}, {"num": 40827, "title": "Method overloads are often frustrating for me", "labels": ["Design Limitation"]}, {"num": 41324, "title": "Method parameter types missing in class property initializer in extended class", "labels": []}, {"num": 17936, "title": "MethodDecorator gets TS2322/TS2315", "labels": ["Bug", "Domain: Decorators"]}, {"num": 39943, "title": "Methods in simple mixin result as type any.", "labels": ["Needs Investigation"]}, {"num": 39839, "title": "Methods that always throw aren't always recognized as a return from a function", "labels": ["Design Limitation"]}, {"num": 38701, "title": "Microsoft.TypeScript.Compiler", "labels": ["Visual Studio"]}, {"num": 37385, "title": "Microsoft.TypeScript.MSBuild.3.6.4 - msbuild locks up TypeScript.Task.dll if fails", "labels": ["Needs Investigation"]}, {"num": 33646, "title": "Middle operand in comma operator list not properly checked for side-effect-freeness", "labels": ["Bug"]}, {"num": 35210, "title": "Migrate the TypeScript Project to Use Modules", "labels": ["Committed", "Infrastructure", "Suggestion"]}, {"num": 24713, "title": "Migration refactorings after renaming from `.js` to `.ts` files", "labels": ["Awaiting More Feedback", "Domain: Refactorings", "Needs Proposal", "Suggestion"]}, {"num": 24714, "title": "Migration suggestions after *introducing* a .ts file", "labels": ["Awaiting More Feedback", "Needs Proposal", "Suggestion"]}, {"num": 28960, "title": "Mimicking JSX attributes behaviour with object types", "labels": ["In Discussion", "Suggestion", "feature-request"]}, {"num": 24482, "title": "Mis-parsing of variables named `enum`", "labels": ["Bug", "help wanted"]}, {"num": 33868, "title": "Misleading error message when generic type alias is illegally circular", "labels": ["Bug", "Domain: Error Messages"]}, {"num": 31890, "title": "Misleading type widening in error message", "labels": ["Bug"]}, {"num": 32813, "title": "Misplaced or partially removed comments in emitted code", "labels": ["Design Limitation"]}, {"num": 30515, "title": "Missing  navtree entires for javascript object literal", "labels": ["Bug"]}, {"num": 29135, "title": "Missing 'used before declaration' error with IIFE", "labels": ["In Discussion", "Suggestion"]}, {"num": 29137, "title": "missing 'used before declaration' error within computed name of accessor or method", "labels": ["Bug"]}, {"num": 38231, "title": "Missing autocomplete with optional chaining operator", "labels": ["Bug", "Domain: Completion Lists"]}, {"num": 25514, "title": "Missing comma to the end of esModuleInterop property on tsconfig.json", "labels": ["In Discussion", "Suggestion"]}, {"num": 29972, "title": "Missing comments after applying refactor/codefix", "labels": ["Bug", "help wanted"]}, {"num": 26610, "title": "Missing completion for abstract indexed types", "labels": ["Bug"]}, {"num": 31532, "title": "Missing controlsList property in HTMLMediaElement", "labels": ["Needs Investigation"]}, {"num": 22682, "title": "Missing error if ClassDeclaration is used in Statement position", "labels": ["Bug"]}, {"num": 24687, "title": "Missing error when awaiting dynamic import of module with 'then' export", "labels": ["Bug"]}, {"num": 29530, "title": "Missing error when passing unconstrained generic to imported type", "labels": ["Bug"]}, {"num": 8639, "title": "Missing escape/unescape ?", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 39050, "title": "Missing excess property error for discriminated union", "labels": ["Bug"]}, {"num": 32629, "title": "Missing export error messages are not recognized by MSBuild parser", "labels": ["Needs More Info"]}, {"num": 21830, "title": "Missing fix suggestions when multiple come from the same JSX element", "labels": ["Bug", "Domain: Quick Fixes"]}, {"num": 40507, "title": "Missing function signatures in typescript.d.ts", "labels": ["API", "Needs Investigation"]}, {"num": 30906, "title": "Missing import suggestions (in *.tsx) for some components from node_modules (npm)", "labels": ["Design Limitation"]}, {"num": 14363, "title": "Missing index signature in HTMLCollectionOf", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 36513, "title": "Missing IntelliSense for generic parameters of decorators", "labels": ["Bug", "Domain: Completion Lists"]}, {"num": 34860, "title": "Missing JSDoc description when using arrow functions in --allowJs + --declaration", "labels": ["Bug", "Domain: Comment Emit"]}, {"num": 13249, "title": "Missing onresourcetimingbufferfull event from Performance interface", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 33489, "title": "Missing references for Lodash named imports", "labels": ["Bug", "Domain: Refactorings"]}, {"num": 35865, "title": "Missing specific types in DateTimeFormatOptions", "labels": ["In Discussion", "Suggestion"]}, {"num": 30928, "title": "Missing string indexer on NamedNodeMap interface in lib.dom.d.ts?", "labels": ["Bug", "Domain: lib.d.ts"]}, {"num": 24408, "title": "Missing sub-type resolution in suggestion popup", "labels": ["Bug", "help wanted"]}, {"num": 40811, "title": "Missing SubmitEvent in auto complete", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 35942, "title": "Missing syntax error for destructuring with private names", "labels": ["Bug"]}, {"num": 15693, "title": "missing ts.NodeFlags.Export", "labels": ["Docs"]}, {"num": 24409, "title": "Missing type description in suggestion popup", "labels": ["Bug"]}, {"num": 20025, "title": "Missing use-before-assigned error outside of if statement containing assertion", "labels": ["Bug"]}, {"num": 30998, "title": "Missing WebGL2 and Bitmap Renderer in Canvas and OffscreenCanvas definitions in latest build", "labels": ["Bug", "Domain: lib.d.ts"]}, {"num": 27245, "title": "Mix on inline/external defined properties corrupt javascript intellisense", "labels": ["Bug", "Domain: JavaScript"]}, {"num": 17088, "title": "Mixed es5/es2015 code with mixin classes causes runtime errors", "labels": ["Awaiting More Feedback", "Effort: Moderate", "Suggestion", "help wanted"]}, {"num": 39752, "title": "Mixin abstract class: union of abstract propeties is not abstract. ", "labels": ["Bug"]}, {"num": 16390, "title": "Mixin classes don't allow constructors of _generic_ 'object' types", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 39539, "title": "mixin constructor wrongly typed", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 34979, "title": "Mixin expected argument type resolves to never when constrained to constructor of type whose property is typed via a type parameter", "labels": ["Needs Investigation"]}, {"num": 27420, "title": "Mixin function incorrectly replacing generic type on an abstract function", "labels": ["Design Limitation"]}, {"num": 29653, "title": "Mixin with abstract class constraint forces abstract memeber implementation", "labels": ["Needs Investigation"]}, {"num": 41132, "title": "Mixin with union as base class", "labels": []}, {"num": 28274, "title": "mixing generics, Pick, Exclude and intersection types fails to compile in 3.1.0", "labels": ["Bug", "Domain: Indexed Access Types"]}, {"num": 17126, "title": "Mixins documentation is out of date in the handbook", "labels": ["Docs"]}, {"num": 37267, "title": "Module AMD and outFile causes declaration emit to use module that does not exist", "labels": ["Needs Investigation"]}, {"num": 9127, "title": "Module augmentation with export list", "labels": ["Bug"]}, {"num": 32646, "title": "Module Namespace Exotic Objects are incorrectly typed as if they have an Object prototype", "labels": ["In Discussion", "Suggestion"]}, {"num": 37571, "title": "Module plugin template is misleading", "labels": ["Docs"]}, {"num": 31466, "title": "Module resolution - four issues (specific and simple to general)", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 41281, "title": "Module resolution fails when substituion path exists but original path directory does not", "labels": []}, {"num": 18311, "title": "Module resolution via \"--paths\" fails against declaration files generated alongside \"--outfile:\"", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 33918, "title": "module resolution with @types", "labels": ["Docs"]}, {"num": 31928, "title": "Module.exports = {} not recognized by IntelliSense", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 15951, "title": "module: \"system\" and outFile generates wrong module names", "labels": ["Bug"]}, {"num": 11979, "title": "module_resolution=none or =explicit", "labels": ["Needs More Info", "Suggestion", "VS Code Tracked"]}, {"num": 16934, "title": "More helpful error message when using `default` as parameter name?", "labels": ["Bug", "Domain: Error Messages", "good first issue", "help wanted"]}, {"num": 27630, "title": "More poor errors with value/type/namespace confusion", "labels": ["Bug", "Domain: Error Messages", "help wanted"]}, {"num": 5413, "title": "More strong Promise<T> in lib.es6.d.ts", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 11434, "title": "Move away from Classic module resolution as default for all module kinds", "labels": ["Committed", "Effort: Moderate", "Suggestion", "help wanted"]}, {"num": 31535, "title": "Move TextEncoder out of lib.dom.d.ts.", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 30478, "title": "Move to new file doesn't maintain prologues directives, ts-check", "labels": ["Bug", "Domain: Refactorings", "Effort: Moderate", "help wanted"]}, {"num": 31915, "title": "Move to new file refactor doesn't respect quote settings", "labels": ["Bug"]}, {"num": 31498, "title": "Move types from jsdoc quickfix (instead of copy)", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 32559, "title": "moveToNewFile: move variable under cursor", "labels": ["Awaiting More Feedback", "Domain: Refactorings", "Suggestion"]}, {"num": 7806, "title": "MSBuild task invalid outdir with multiple projects", "labels": ["Bug", "Visual Studio"]}, {"num": 38539, "title": "Much better comment preservation", "labels": ["Needs Investigation"]}, {"num": 35775, "title": "multi return type declaration emit not as expected", "labels": ["Needs Investigation"]}, {"num": 14596, "title": "multi-line argument indentation", "labels": ["Bug", "Domain: Formatter", "help wanted"]}, {"num": 30755, "title": "Multidimensional readonly arrays", "labels": ["In Discussion", "Suggestion"]}, {"num": 30315, "title": "Multiple issues with import quick fixes and project references", "labels": ["Bug"]}, {"num": 17196, "title": "Multiple UMD typings in one file.d.ts", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 29305, "title": "Nameclash between properties of class and subclass not found", "labels": ["Bug"]}, {"num": 35827, "title": "Named imports should respect Record<string, any> types", "labels": ["Bug"]}, {"num": 33035, "title": "Named tslib imports cause webpack bundle size increase", "labels": ["Needs More Info"]}, {"num": 5553, "title": "namespace / module: Duplicate declaration & needlessly remove line-breaks", "labels": ["Suggestion", "help wanted"]}, {"num": 35728, "title": "Namespace as first-class citizen", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 28590, "title": "namespace containing only 'const enum' can be used as value -> causing runtime error", "labels": ["Bug"]}, {"num": 5220, "title": "Namespace elements cannot export without declaration", "labels": ["In Discussion", "Suggestion"]}, {"num": 31172, "title": "Namespaced ES6 classes are not recognized as types", "labels": ["Bug"]}, {"num": 9329, "title": "Namespaces not merged from UMD globals", "labels": ["Bug"]}, {"num": 6433, "title": "Naming arrow functions", "labels": ["Bug", "ES6", "help wanted"]}, {"num": 36964, "title": "NaN incorrectly narrows to 0", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 12587, "title": "Narrow \"this\" type", "labels": ["Bug"]}, {"num": 33182, "title": "Narrow length of tuples", "labels": ["In Discussion", "Suggestion"]}, {"num": 36099, "title": "Narrow number literal types with comparison", "labels": ["In Discussion", "Suggestion"]}, {"num": 20583, "title": "Narrow the parent type of a singleton type to never in the false branch", "labels": ["In Discussion", "Suggestion"]}, {"num": 16896, "title": "Narrow type of variable when declared as literal (also tuples)", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 38801, "title": "Narrow typeof x === 'object' to Record<string | number | symbol, unknown>", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 36613, "title": "Narrowed is fail when use as `T`", "labels": ["Bug"]}, {"num": 32527, "title": "Narrower (literal) type for Function.prototype.name if function is const", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 29337, "title": "Narrowing 'this' type with multiple type predicates makes private properties inaccessible", "labels": ["Bug"]}, {"num": 38608, "title": "Narrowing by checking for existence of key leads to never.", "labels": ["Needs Investigation"]}, {"num": 38309, "title": "Narrowing does not work for constrained template arguments in JS", "labels": ["Blocked", "Design Limitation", "Rescheduled"]}, {"num": 33878, "title": "Narrowing doesn't recognize string constant as truthy", "labels": ["Bug"]}, {"num": 16977, "title": "narrowing in switch doesn't work with ambient enums", "labels": ["Bug"]}, {"num": 16976, "title": "narrowing in switch doesn't work with non-union types", "labels": ["In Discussion", "Suggestion"]}, {"num": 20375, "title": "narrowing in switches doesnt work on constrained unions", "labels": ["Bug"]}, {"num": 21985, "title": "narrowing to \"never\" by \"if\" statement does not exclude \"undefined\" return type", "labels": ["In Discussion", "Suggestion"]}, {"num": 28882, "title": "Narrowing to remove undefined from optional object properties", "labels": ["Design Limitation"]}, {"num": 37178, "title": "Narrowing types by `typeof` inside `switch (true)` does not work", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 37518, "title": "Narrowing via property check fails when adding parent type to declaration", "labels": ["Needs Investigation"]}, {"num": 4700, "title": "NavigateTo inappropriately writes \"module\" instead of \"namespace\" in display", "labels": ["Bug", "help wanted"]}, {"num": 25242, "title": "navigateTo: special property assignment should have containerName set", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 33232, "title": "navigator.mediaDevices should have getDisplayMedia", "labels": ["Bug", "Domain: lib.d.ts"]}, {"num": 26502, "title": "navigator.mimeTypes type definition problem in lib.es2016.full.d.ts", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 33404, "title": "navto does not include jsdoc @typedef symbols", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 30103, "title": "navto-full no project", "labels": ["Bug", "Source: Telemetry"]}, {"num": 33715, "title": "navtree does not include methods of class defined in a property", "labels": ["Domain: Outlining", "Experience Enhancement", "Suggestion"]}, {"num": 34969, "title": "need \"libRoots\" in tsconfig.json for private node-runtime type definition", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 39850, "title": "Need a dummy overload to improve inference", "labels": ["Bug"]}, {"num": 22397, "title": "Need a version of getSupportedCodeFixes that only returns codes that support fix-all", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 17867, "title": "Need way to express hybrid types that are indexable for a subset of properties ", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 7993, "title": "negating type constraints", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 39293, "title": "Negative tuple indexer should not be valid", "labels": ["In Discussion", "Suggestion"]}, {"num": 30130, "title": "Nested classes are not collapsible/expandable in Visual Studio", "labels": ["Experience Enhancement", "Suggestion", "help wanted"]}, {"num": 40081, "title": "Nested conditional type inconsistently causes error with annotations", "labels": ["Bug"]}, {"num": 30708, "title": "Nested conditional type with generic tuple argument always expands to false branch.", "labels": ["Bug"]}, {"num": 37314, "title": "Nested conditional types and generics, testing type equality evaluating to incorrect branch", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 20504, "title": "Nested if statement invalidates type guards", "labels": ["In Discussion", "Suggestion"]}, {"num": 28269, "title": "Nested indexing of mapped type fails to resolve correctly", "labels": ["Bug", "Domain: Indexed Access Types"]}, {"num": 40873, "title": "Nested JSON makes tsc throw RangeError with no culprit", "labels": ["Bug"]}, {"num": 27709, "title": "Nested lookuptypes do not inference correctly", "labels": ["Bug"]}, {"num": 30833, "title": "Nested series of assignments takes ~quadratic time to parse", "labels": ["Bug"]}, {"num": 18758, "title": "Nested Tagged Unions", "labels": ["In Discussion", "Suggestion"]}, {"num": 38427, "title": "New \"persistentDocumentation\" and removeComments", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 37057, "title": "New CLI argument \"--cwd\"/\"--project-root\" to provide an override of the current directory of --project", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 37559, "title": "New error: This spread always overwrites this property", "labels": ["Docs", "Rescheduled"]}, {"num": 37587, "title": "New error: Type 'string' is not assignable to type 'string & ...'", "labels": ["Docs"]}, {"num": 37613, "title": "New error: Type instantiation is excessively deep and possibly infinite.", "labels": ["Needs Investigation"]}, {"num": 37597, "title": "New error: Type of property 'defaultProps' circularly references itself in mapped type", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 33032, "title": "New line in parenthetical causes Unexpected Identifier error", "labels": ["Needs More Info"]}, {"num": 37527, "title": "new Map() infers type only from the first item in the iterable", "labels": ["Needs Investigation"]}, {"num": 38519, "title": "New operator should return object returned by constructor", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 26882, "title": "New option for javascript.preferences.quoteStyle", "labels": ["Domain: TSServer", "Experience Enhancement", "Suggestion"]}, {"num": 9613, "title": "New option to remove spaces around braces: insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces", "labels": ["Bug", "Domain: Formatter", "VS Code Tracked", "help wanted"]}, {"num": 12816, "title": "Newlines removed in emit for argument list", "labels": ["Bug", "help wanted"]}, {"num": 28152, "title": "Nightly-only experimental features", "labels": ["Revisit", "Suggestion"]}, {"num": 39048, "title": "No auto-complete suggestions showing up, but Quick Fix has the correct import", "labels": ["Domain: Auto-import", "Domain: Completion Lists", "Needs More Info"]}, {"num": 31956, "title": "No auto-completion on typescript interface with classes implement", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 35682, "title": "No autocomplete when using something other than any on keyof extends generic", "labels": ["Design Limitation"]}, {"num": 34904, "title": "No autocompletion/intellisense for local commonJS modules", "labels": ["Bug", "Domain: Auto-import"]}, {"num": 19465, "title": "No compile error for satisfying function signature of only one branch of union of two", "labels": ["Bug"]}, {"num": 8060, "title": "No compile error thrown when `this` referenced before call to `super` completes", "labels": ["Effort: Difficult", "Suggestion", "help wanted"]}, {"num": 36229, "title": "No compiler warning/error that class B has no member function `formatString(number)`", "labels": ["Design Limitation"]}, {"num": 6126, "title": "No completion builder present after a '('", "labels": ["Bug", "help wanted"]}, {"num": 6079, "title": "No completion builder present after a '<'", "labels": ["Bug", "help wanted"]}, {"num": 20197, "title": "No completion when constructor parameter name matches a type name", "labels": ["Bug", "Domain: Completion Lists", "help wanted"]}, {"num": 13302, "title": "No completions for `extends` clause for members of a namespace containing only interfaces and types followed by expression", "labels": ["Bug"]}, {"num": 37281, "title": "No completions in `@param` tag missing parameter name", "labels": ["Needs Investigation"]}, {"num": 26401, "title": "No completions in global namespace augmentation from original namespace", "labels": ["Bug", "Domain: Completion Lists", "help wanted"]}, {"num": 26642, "title": "No error accessing abstract property in destructuring within constructor", "labels": ["Bug"]}, {"num": 37320, "title": "No error for Array Destructuring of Union Types containing an Array", "labels": ["Needs More Info"]}, {"num": 27011, "title": "No error for duplicate function in JavaScript", "labels": ["Bug", "Domain: JavaScript", "checkJs"]}, {"num": 32216, "title": "No error for duplicate type if one is exported", "labels": ["Bug"]}, {"num": 35962, "title": "No error for undeclared #private property in `.js` files", "labels": ["Bug", "Domain: JavaScript", "Effort: Moderate", "help wanted"]}, {"num": 8706, "title": "No error for wrong overloads with computed properties", "labels": ["Bug"]}, {"num": 36272, "title": "No error from noUnusedLocals option on ambient local variable in module file", "labels": ["Bug"]}, {"num": 34956, "title": "No error is reported in local code base when destructing undefined while using downlevelIteration, but an error is reported in TypeScript Playground with same tsconfig", "labels": ["Bug", "Rescheduled"]}, {"num": 39603, "title": "No error using imports/exports with --module=none and --target=es2015+", "labels": ["Breaking Change", "Bug"]}, {"num": 21327, "title": "No error when namespace export is used before assigned", "labels": ["Bug", "help wanted"]}, {"num": 37337, "title": "No error with Partial<Record<number, {}>> in object spreading", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 36920, "title": "No excess property error for computed property", "labels": ["In Discussion", "Suggestion"]}, {"num": 12365, "title": "No formatter option for space between colon and type in TypeScript", "labels": ["Awaiting More Feedback", "Domain: Formatter", "Suggestion", "VS Code Tracked"]}, {"num": 9446, "title": "No indentation gets inserted after comment on enter key press", "labels": ["Bug", "Domain: Formatter", "help wanted"]}, {"num": 35186, "title": "No information for Error: Debug Failure. No error for last overload signature", "labels": ["Needs More Info"]}, {"num": 34771, "title": "No IntelliSense for generic literal types", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 30531, "title": "No intellisense for require in ts files", "labels": ["In Discussion", "Suggestion"]}, {"num": 16136, "title": "No object literal completions for type parameter constrained to mapped type", "labels": ["Domain: Completion Lists", "Experience Enhancement", "Suggestion"]}, {"num": 36133, "title": "No overload expects 5 arguments, but overloads do exist that expect either 5 or 9 arguments (CanvasRenderingContext2D.drawImage)", "labels": ["Bug"]}, {"num": 26145, "title": "No related error spans return for type assignment mismatch", "labels": ["Domain: Related Error Spans", "Experience Enhancement", "Suggestion"]}, {"num": 17510, "title": "No signature help description when JSDoc appears on variable declarations instead of signatures", "labels": ["Effort: Moderate", "Suggestion", "help wanted"]}, {"num": 40314, "title": "No spelling suggestion/quick fix for types", "labels": ["Domain: Error Messages", "Effort: Moderate", "Experience Enhancement", "help wanted"]}, {"num": 27241, "title": "No suggestions for extended classes.", "labels": ["Bug", "Domain: Completion Lists", "Domain: JavaScript"]}, {"num": 20131, "title": "No warning when using unary +/- operators on functions and objects?", "labels": ["Revisit", "Suggestion"]}, {"num": 35576, "title": "No way to get generic type of an abstract class inside a factory function", "labels": ["Bug"]}, {"num": 1108, "title": "No way to type an object with null prototype", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 37378, "title": "No way to use composite project where outDir is determined by build tool", "labels": ["Needs Investigation"]}, {"num": 40771, "title": "No ways to do an alias of an exported type inside a namespace", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 7753, "title": "Node browser resolution strategy", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 26388, "title": "Node JS Intellisense - requested ability to ignore variables in `require` paths allowing jsconfig to complete the intellisense link", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 33111, "title": "Node module dependencies that use a triple-slash directive to reference libs poison the global scope", "labels": ["In Discussion", "Suggestion"]}, {"num": 4689, "title": "Node.parentElement should be Element, not HTMLElement", "labels": ["Domain: lib.d.ts", "Suggestion", "help wanted"]}, {"num": 27173, "title": "NodeList is no more compatible with Array<Node>. Breaking change in 3.0 ", "labels": ["Docs", "help wanted"]}, {"num": 25453, "title": "noErrorTruncation property is in the TypeScript Handbook Compiler Options but missing from the TypeScript Schema", "labels": ["Bug", "help wanted"]}, {"num": 35105, "title": "noImplicitAny ignores implicit any on yield expression assignment", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 7220, "title": "noImplicitAny incorrectly permits 'any' when returned via arrow function", "labels": ["Bug", "help wanted"]}, {"num": 22428, "title": "noImplicitAny produces 'any' inference for a type with boolean param", "labels": ["Needs Investigation"]}, {"num": 26923, "title": "noImplicitAny+prototype assignment causes incorrect error on prototype methods", "labels": ["Bug", "Domain: JavaScript"]}, {"num": 36309, "title": "noImplicitAny, noImplicitThis fixers don't apply interface type within IIFE", "labels": ["Bug"]}, {"num": 15733, "title": "noImplicitReturnType [Suggestion]", "labels": ["In Discussion", "Suggestion"]}, {"num": 31964, "title": "noImplicitThis codefix should account for static functions", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 21625, "title": "Nominal typing and TypeScript > 2.7", "labels": ["Discussion"]}, {"num": 26148, "title": "non null assertion removes automatic generics passing", "labels": ["In Discussion", "Suggestion"]}, {"num": 32182, "title": "Non-exported classes in type declaration files leaking value names", "labels": ["Docs"]}, {"num": 35025, "title": "Non-null assertions infringe a responsibility of optional chaining", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 32783, "title": "Non-Nullable Objects in params don't have properties parsed", "labels": ["Domain: JSDoc", "Needs Investigation"]}, {"num": 34717, "title": "Non-nullable promises shouldn't be allowable in conditions", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 36061, "title": "NonNullable behaves differently when passing a property type from `this`", "labels": ["Needs Investigation"]}, {"num": 28374, "title": "NonNullable isn't narrowing down object values' types for optional properties", "labels": ["Domain: Mapped Types", "Experience Enhancement", "Suggestion"]}, {"num": 34902, "title": "NonNullablePartial type - Partial that doesn't allow explicit null/undefined values", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 40562, "title": "Non\u2011void returning assertion functions", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 34967, "title": "Not assignable Type", "labels": ["Bug", "Rescheduled"]}, {"num": 28665, "title": "Not null refinement does not work for type being null", "labels": ["Design Limitation"]}, {"num": 36884, "title": "Not performing exhaustiveness checking for this", "labels": ["Bug"]}, {"num": 30522, "title": "Not possible to have optional object property compatible with both Closure Compiler and Intellisense", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 31129, "title": "noUnusedLocals throws errors for \"never\" type.", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 31527, "title": "npm-linked modules (duplicates or not) are not working.", "labels": ["Needs More Info"]}, {"num": 32838, "title": "null check of a const property incorrectly resolved", "labels": ["Needs Investigation"]}, {"num": 18243, "title": "null checked variables in getter's closure", "labels": ["Bug"]}, {"num": 33174, "title": "null extends object inconsistent between ts and d.ts", "labels": ["Bug"]}, {"num": 40494, "title": "Nullish coalescing assignment operator does not narrow correctly", "labels": ["Bug", "Fix Available", "help wanted"]}, {"num": 39907, "title": "Nullish coalescing operator corrupts for-of loop when targeting ES5", "labels": ["Bug", "Domain: Transforms"]}, {"num": 36393, "title": "Nullish coalescing should always include the type of the right operand", "labels": ["In Discussion", "Suggestion"]}, {"num": 15645, "title": "numeric literal types disrespect arithmetics", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 39563, "title": "Numeric separated literals should disallow zero leading", "labels": ["Bug", "help wanted"]}, {"num": 33298, "title": "NumericLiteral nodes with value 9007199254740993 claim to have .text = 9007199254740992", "labels": ["Bug"]}, {"num": 34693, "title": "Object destructuring named `exports` conflicts on targeting `commonjs`", "labels": ["Bug", "Rescheduled"]}, {"num": 41189, "title": "Object destructuring with default empty object generates wrong type", "labels": []}, {"num": 37119, "title": "Object intellisense doesn't work properly when parameter is unioned with a non-object", "labels": ["Bug", "Domain: Completion Lists"]}, {"num": 27431, "title": "Object is possibly 'null' due to slight difference in code with strictNullChecks", "labels": ["Design Limitation"]}, {"num": 35523, "title": "Object is possibly 'undefined' while strictNullChecks is false?", "labels": ["Needs More Info"]}, {"num": 36193, "title": "Object is possibly null inside a closure defined within a const constraint", "labels": ["In Discussion", "Suggestion"]}, {"num": 39340, "title": "Object is possibly undefined after undefined check on readonly property", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 13369, "title": "object is possibly undefined for imported object", "labels": ["Bug"]}, {"num": 15660, "title": "Object key signature is not taken into account with destructive assignment on method definition level", "labels": ["Bug"]}, {"num": 12423, "title": "Object literal in async function should only specify known properties", "labels": ["Bug"]}, {"num": 33201, "title": "Object literals should have a `this` type too", "labels": ["Awaiting More Feedback", "Experimentation Needed", "Needs Proposal", "Suggestion"]}, {"num": 21771, "title": "Object literals with depth of ~10 (with arrays) stop reporting type inference", "labels": ["Design Limitation"]}, {"num": 29718, "title": "Object non-literal keys breaks parameter type guard in callback value", "labels": ["Bug"]}, {"num": 27273, "title": "Object spread drops index signature", "labels": ["In Discussion", "Suggestion"]}, {"num": 24799, "title": "Object spread incorrectly compiles getter", "labels": ["Bug", "ES2018"]}, {"num": 13668, "title": "Object Spread should not invoke setter.", "labels": ["Bug", "ES Next"]}, {"num": 38469, "title": "Object spread works for unconstrained generic", "labels": ["In Discussion", "Suggestion"]}, {"num": 33761, "title": "Object with keys named after variables using [myVar] syntax breaks symbol lookup in TS 3.7.0-dev.20191002", "labels": ["Bug", "Rescheduled"]}, {"num": 39002, "title": "Object.assign does not conclude correct type from second argumet in ternary operator", "labels": ["Design Limitation"]}, {"num": 29348, "title": "Object.assign({}) seems to always return a type any", "labels": ["Bug", "Domain: lib.d.ts"]}, {"num": 4586, "title": "Object.constructor isn't implemented specifically enough", "labels": ["Bug", "help wanted"]}, {"num": 28694, "title": "Object.defineProperty doesn't define properties on 'this'", "labels": ["Awaiting More Feedback", "Domain: JavaScript", "Suggestion"]}, {"num": 32253, "title": "Object.freeze after object creation doesn't error", "labels": ["Docs", "GraceHopperOSD"]}, {"num": 31175, "title": "Object.getOwnPropertyDescriptors accepts undefined (lib.es2017.object.d.ts)", "labels": ["Bug", "Domain: lib.d.ts"]}, {"num": 22875, "title": "Object.getPrototypeOf returns `any` instead of `object | null`", "labels": ["Awaiting More Feedback", "Breaking Change", "Suggestion"]}, {"num": 38520, "title": "Object.values and Object.entries are unsound and inconsistent with Object.keys.", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 26010, "title": "Object.values and Object.entries return type any when passing an object defined as having number keys", "labels": ["Design Limitation"]}, {"num": 35880, "title": "ObjectAssignmentRest causes \"Property 'foo' does not exist on type '{}'\"", "labels": ["Bug"]}, {"num": 35621, "title": "ObjectConstructor.assign", "labels": ["Bug", "Domain: lib.d.ts", "Fix Available"]}, {"num": 39038, "title": "octal escape sequence literal type", "labels": ["Bug"]}, {"num": 396, "title": "Octal escape sequences should be a lexical/syntactic error in strict mode and ES5", "labels": ["Breaking Change", "Bug", "good first issue", "help wanted"]}, {"num": 27614, "title": "Odd quick fix ordering for misspelled identifiers", "labels": ["Bug", "Domain: Quick Fixes", "good first issue", "help wanted"]}, {"num": 32219, "title": "Offer an auto-import for unresolved shorthand-named object literal properties", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 16297, "title": "Offers quick suggestion to ignore parse error; but parse error can't be ignored", "labels": ["Bug", "Domain: Quick Fixes"]}, {"num": 31569, "title": "Official TypeScript badge for READMEs", "labels": ["Committed", "Suggestion"]}, {"num": 39365, "title": "Officially document type checking behavior for operators WRT bigint", "labels": ["Discussion"]}, {"num": 30068, "title": "Omit producing \"JavaScript heap out of memory\" with v3.3", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 33484, "title": "Omit properties from generic type which set by default and have extend", "labels": ["Design Limitation"]}, {"num": 27125, "title": "Only emit declarations for code that has an /** @external */ JSDoc annotation", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 11371, "title": "Only In Js files the require call should be used for string literal completion of modules", "labels": ["Bug", "help wanted"]}, {"num": 1858, "title": "Only prior declared parameters should appear in completion lists for initializers", "labels": ["Bug", "help wanted"]}, {"num": 5855, "title": "Opaque types for WebGL", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 7481, "title": "Operator to ensure an expression is contextually typed by, and satisfies, some type", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 39247, "title": "Opportunity: Improve compiler performance by avoiding property accesses", "labels": ["Needs Investigation"]}, {"num": 3594, "title": "Optimization tools or guidelines", "labels": ["Docs"]}, {"num": 34776, "title": "Optimize constructing type nodes from types", "labels": ["Bug", "Domain: Declaration Emit", "Domain: Performance", "Domain: Type Display", "Rescheduled"]}, {"num": 498, "title": "Optimize rest arguments.", "labels": ["Effort: Moderate", "Suggestion", "help wanted"]}, {"num": 36006, "title": "Option baseUrl changes directory 'Http' to 'http' when using sqlite3", "labels": ["Needs More Info"]}, {"num": 6195, "title": "Option for single space around template string parameters", "labels": ["Fix Available", "Fixed", "Suggestion", "Visual Studio", "good first issue", "help wanted"]}, {"num": 35296, "title": "Option to copy custom types to outDir", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 29299, "title": "Option to disable decorator transform", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 37853, "title": "Option to respect closest tsconfig.json of imported files", "labels": ["Suggestion", "Too Complex"]}, {"num": 35103, "title": "optional and readonly Filter Modifier for keyof", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 38211, "title": "Optional arguments due to multiple constructors are not considered when resolving rest parameters in generics", "labels": ["Design Limitation"]}, {"num": 31497, "title": "Optional arguments in JSDoc types may be moved to TypeScript types quickfix", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 35476, "title": "Optional Chaining does not propagate receiver when parenthesized", "labels": ["Bug", "Rescheduled"]}, {"num": 35850, "title": "Optional chaining not working with void type", "labels": ["Bug"]}, {"num": 37700, "title": "Optional chaining of unknown should be unknown", "labels": ["In Discussion", "Suggestion"]}, {"num": 36672, "title": "Optional chaining should always include `undefined` in its resolved type", "labels": ["In Discussion", "Suggestion"]}, {"num": 34974, "title": "Optional chaining, proper infer in type guard", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 35769, "title": "Optional discriminated union's callback parameter type  is not inferred", "labels": ["Bug"]}, {"num": 29222, "title": "Optional fields affecting keyof operator in generic class decorators", "labels": ["Domain: Mapped Types", "In Discussion", "Suggestion"]}, {"num": 14400, "title": "Optional Generic Type Inference", "labels": ["In Discussion", "Suggestion"]}, {"num": 32488, "title": "Optionally provide path/link to file with transpilation error", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 7056, "title": "Optionally resolved external types", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 30951, "title": "Order destructuring Iterable<keyof T> changed from 3.2.4 -> 3.4.x", "labels": ["Bug"]}, {"num": 37362, "title": "Order member intellisense by inheritance", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 24611, "title": "order of t.ds inclusion result in different validation outcome", "labels": ["Needs More Info"]}, {"num": 40736, "title": "Organize Import creates whitespace that needs to be deleted manually", "labels": ["Bug", "Domain: Formatter", "Domain: Organize Imports", "Effort: Moderate", "Fix Available", "help wanted"]}, {"num": 23577, "title": "Organize import no sort", "labels": ["Awaiting More Feedback", "Domain: Organize Imports", "Suggestion"]}, {"num": 39823, "title": "Organize imports returning edit when imports are already sorted", "labels": ["Bug", "Fix Available"]}, {"num": 22914, "title": "Organize imports should remove blank lines within imports", "labels": ["Awaiting More Feedback", "Domain: Organize Imports", "Suggestion"]}, {"num": 30456, "title": "Organize imports: add an option to put all absolute paths after node_modules ones", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 22908, "title": "Organize Imports: Add option to change between relative and absolute paths", "labels": ["Awaiting More Feedback", "Domain: Organize Imports", "Suggestion", "VS Code Tracked"]}, {"num": 21048, "title": "Out of memory checking recursive mapped type with two constraint type references", "labels": ["Bug"]}, {"num": 26721, "title": "Out of stack space error with tsc 3.0", "labels": ["Needs More Info"]}, {"num": 29683, "title": "Outdated example code in typescript/gulp docs", "labels": ["Docs"]}, {"num": 29126, "title": "output declaration type not as expect", "labels": ["Bug"]}, {"num": 30328, "title": "output declaration type random change order", "labels": ["Design Limitation"]}, {"num": 18805, "title": "Over-eager inference with ThisType & homomorphic mapped types", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 30898, "title": "Overlapping formatting edits returned for jsx", "labels": ["Bug", "Rescheduled"]}, {"num": 39767, "title": "overload + generic + infer breaks conditional types", "labels": ["Bug"]}, {"num": 29732, "title": "Overload gets lost in mapped type with conditional type", "labels": ["In Discussion", "Suggestion"]}, {"num": 39833, "title": "Overload resolution selects most narrow overload when `any` is involved", "labels": ["Bug"]}, {"num": 37704, "title": "Overloaded union type does not resolve overloads", "labels": ["Design Limitation"]}, {"num": 27981, "title": "Overloads do not emit JSDoc on non-implementation signatures", "labels": ["Domain: Comment Emit", "Experience Enhancement", "Suggestion"]}, {"num": 8474, "title": "Overriden class member annotated with a subtype could be a recipe for disaster (by design.. ;) )", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 31225, "title": "Overriding an accessor with a property causes runtime error when emitting ESNExt", "labels": ["Bug", "ES2019", "Rescheduled"]}, {"num": 26631, "title": "Overriding generic method inconsistently errors", "labels": ["Bug"]}, {"num": 24259, "title": "Overriding methods has no way to inherit the parameter documentation from the superclass", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 36773, "title": "Package dependencies and The inferred type of ... cannot be named without a reference to ...", "labels": ["Needs Investigation"]}, {"num": 29808, "title": "Package dependencies and The inferred type of ... cannot be named without a reference to ...", "labels": ["Needs More Info"]}, {"num": 37179, "title": "Pain points with const enum", "labels": ["Discussion"]}, {"num": 29430, "title": "Parameter hints do not get dismissed when the cursor moves", "labels": ["Awaiting More Feedback", "Domain: Signature Help", "Suggestion"]}, {"num": 38183, "title": "Parameter inference breaks type intersection", "labels": ["Design Limitation"]}, {"num": 1148, "title": "Parameter info missing for generics", "labels": ["Suggestion", "help wanted"]}, {"num": 37539, "title": "Parameter not renamed in JSDoc if it's inside non-prototype-based JS class", "labels": ["Bug", "Domain: Refactorings"]}, {"num": 32365, "title": "Parameter of a generic interface doesn't work when it's a generic index of an another interface", "labels": ["Bug"]}, {"num": 28396, "title": "parameter property's modifier may not be followed by newline", "labels": ["Bug"]}, {"num": 32164, "title": "Parameter type interface for overloaded functions as union type", "labels": ["Design Limitation"]}, {"num": 14515, "title": "Parameter type narrowing should consider function overload signatures", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 36535, "title": "Parameter types not being inferred in a class method whose type is indexed from an interface", "labels": ["Needs Investigation"]}, {"num": 38685, "title": "Parameters<T>  and ReturnType<T> limitation", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 32051, "title": "parseInt: use more concrete type for `radix` argument", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 28309, "title": "Parser API: Expose a Method to Determine Whether a Numeric Literal is of Certain Flag", "labels": ["API", "In Discussion", "Suggestion"]}, {"num": 37760, "title": "Parsing issue for call expression with type arguments following left-shift", "labels": ["Bug", "GraceHopperOSD", "help wanted"]}, {"num": 28681, "title": "Part of the fullscreen API is no longer present in the type definitions", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 447, "title": "Partial modules and output optimization", "labels": ["Needs More Info", "Suggestion"]}, {"num": 37713, "title": "Partial Semantic Editing Operations", "labels": ["Domain: Completion Lists", "Domain: Symbol Navigation", "In Discussion", "Suggestion"]}, {"num": 39035, "title": "Partial Semantic Mode Meta-Issue", "labels": ["Meta-Issue", "Rescheduled"]}, {"num": 28901, "title": "Partial type for reduce initialValue", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 41295, "title": "Passing deprecated function as callback does not give deprecation suggestion", "labels": []}, {"num": 5572, "title": "Pasting nested block comment causes mangling", "labels": ["Bug", "help wanted"]}, {"num": 37189, "title": "Path based Code navigation to /index.js seems broken", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 29334, "title": "Path intellisense for other files besides js/ts", "labels": ["In Discussion", "Suggestion"]}, {"num": 23035, "title": "Pattern matcher doesn't work for name with space", "labels": ["Bug", "help wanted"]}, {"num": 39915, "title": "Pedantic: deny mutable type generalization", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 40170, "title": "pedanticPropertyLookup", "labels": ["In Discussion", "Suggestion"]}, {"num": 30908, "title": "Perf issues with @material-ui/icons", "labels": ["Bug", "Domain: Performance", "Needs Investigation"]}, {"num": 38477, "title": "Perf Regression in ant-design from #36744", "labels": ["Domain: Performance"]}, {"num": 41124, "title": "perf: exponential slowdown in flow analysis", "labels": []}, {"num": 31864, "title": "Performance Microbenchmark Infrastructure", "labels": ["Infrastructure"]}, {"num": 5192, "title": "Performance of getSemanticDiagnostics in compiler API", "labels": ["API", "Suggestion", "help wanted"]}, {"num": 36562, "title": "Performance regression in #32582", "labels": ["Domain: Performance", "Needs Investigation"]}, {"num": 36565, "title": "Performance regression in #33473", "labels": ["Domain: Performance", "Needs Investigation"]}, {"num": 31376, "title": "Permit functions that return a value to also serve as a type guard", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 7061, "title": "Permit type alias declarations inside a class", "labels": ["Revisit", "Suggestion"]}, {"num": 29331, "title": "Permit using template strings for string literal types", "labels": ["In Discussion", "Suggestion"]}, {"num": 28884, "title": "Pick<T, Exclude<keyof T, K>> & Pick<T, Extract<keyof T, K>> should be assignable to T", "labels": ["Domain: Conditional Types", "Experience Enhancement", "Suggestion"]}, {"num": 38930, "title": "Pipe function + `React.memo` returns component with `any` props", "labels": ["Needs Investigation"]}, {"num": 30370, "title": "Pipe/flow/chain type support", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 31894, "title": "Placeholder Type Declarations", "labels": ["In Discussion", "Suggestion"]}, {"num": 16041, "title": "Playground feature request: import stuff from @types", "labels": ["Docs"]}, {"num": 34890, "title": "Please document compiler APIs", "labels": ["Docs"]}, {"num": 32065, "title": "please document project references and outdir", "labels": ["Docs"]}, {"num": 189, "title": "Please enable CodeLens for TypeScript files", "labels": ["Suggestion", "Visual Studio"]}, {"num": 1897, "title": "Please provide a `json` basic type", "labels": ["Needs More Info", "Needs Proposal", "Suggestion"]}, {"num": 35496, "title": "Please provide better feedback for issue 20357", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 37470, "title": "Plugin `create` and `onConfigurationChanged` config-confusion", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 14419, "title": "Plugin Support for Custom Transformers", "labels": ["Docs"]}, {"num": 28969, "title": "PluginModule.onConfigurationChanged not called when plugin config in tsconfig.json changes", "labels": ["Domain: TSServer", "Experience Enhancement", "Suggestion"]}, {"num": 15917, "title": "Plugins - support a 'willSave' hook", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 5863, "title": "Polymorphic \"this\" for static members", "labels": ["In Discussion", "Suggestion"]}, {"num": 6223, "title": "Polymorphic `this` and Generics", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 19397, "title": "Polymorphic `this` breaks when a module exports a variable and interface with the same name", "labels": ["Bug"]}, {"num": 32550, "title": "Polymorphic this type does not work with conditional mapped types", "labels": ["Design Limitation"]}, {"num": 38665, "title": "Polymorphic TypedArray methods return wrong type in subclasses", "labels": ["Bug", "Domain: lib.d.ts"]}, {"num": 41286, "title": "Poor deprecated messages - types should almost never be displayed.", "labels": ["Bug", "Domain: Error Messages", "Effort: Moderate", "Fix Available", "help wanted"]}, {"num": 32231, "title": "Poor error message when names conflict", "labels": ["Bug", "Crash"]}, {"num": 4539, "title": "Poor error recovery in jsx elements", "labels": ["Bug", "help wanted"]}, {"num": 33931, "title": "Poor error recovery when `enum` is used as a parameter name", "labels": ["Bug", "Domain: Error Messages"]}, {"num": 39244, "title": "Poor inference for variadic tuple rest element when other inference targets are not rest parameters", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 35761, "title": "Poor parameter elaboration", "labels": ["Domain: Error Messages", "Experience Enhancement", "In Discussion", "Needs Proposal"]}, {"num": 25454, "title": "Poor type inference for `reduce`", "labels": ["Domain: lib.d.ts", "Needs Proposal", "Suggestion"]}, {"num": 30196, "title": "Poor type inference for unique symbol", "labels": ["Design Limitation"]}, {"num": 34581, "title": "Poor typing for array iterator", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 2858, "title": "Port from old compiler code to emit compilation flags into the source map", "labels": ["Suggestion", "help wanted"]}, {"num": 2859, "title": "Port from old compiler code to emit identifier renames into source map", "labels": ["Bug"]}, {"num": 6088, "title": "Position right before block gets incorrect indentation", "labels": ["Bug", "help wanted"]}, {"num": 32727, "title": "PositionError does not match docs in MDN", "labels": ["Bug", "Domain: lib.d.ts"]}, {"num": 10427, "title": "Possibility to support vuejs", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 26488, "title": "Possible conflict with vscode-tslint in 3.0.1?", "labels": ["Needs More Info"]}, {"num": 39059, "title": "Possible regression: Maximum call stack size exceeded when migrating from 3.7.5 to latest version", "labels": ["Bug", "Fix Available", "Rescheduled"]}, {"num": 33399, "title": "Possible Regression: resolveJsonModule Projects must list all files or use an 'include' pattern.", "labels": ["Needs More Info"]}, {"num": 38622, "title": "Possible to implement overloaded call signature with an arrow function?", "labels": ["Design Limitation"]}, {"num": 20219, "title": "Possible to narrow type of object literal property with strictNullChecks?", "labels": ["Committed", "Suggestion"]}, {"num": 29914, "title": "Possible type inference regression (from v3.2.4 onwards)", "labels": ["Needs Investigation"]}, {"num": 38514, "title": "Possibly empty tuple confuses map and reduce methods", "labels": ["Design Limitation"]}, {"num": 38053, "title": "Possibly undefined in filter", "labels": ["Design Limitation"]}, {"num": 41317, "title": "Potential crash of `in` operator", "labels": []}, {"num": 38736, "title": "Pre-Compiler Plugin Proposal", "labels": ["In Discussion", "Suggestion"]}, {"num": 7094, "title": "Precedence in parsing types", "labels": ["Docs", "help wanted"]}, {"num": 29587, "title": "Preferred refactorings", "labels": ["In Discussion", "Suggestion"]}, {"num": 30878, "title": "preProcessFile doesn't find other imports after template strings", "labels": ["Bug"]}, {"num": 8198, "title": "Preselect completion list entries based on contextual type", "labels": ["API", "Suggestion", "help wanted"]}, {"num": 32392, "title": "Preserve comments with object destructuring assignment", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 26060, "title": "Preserve executable file permission when generating from executable .ts file", "labels": ["Suggestion", "help wanted"]}, {"num": 15782, "title": "Preserve Indentation of Closing > in Multiline Type List", "labels": ["Bug", "Domain: Formatter", "VS Code Priority", "VS Code Tracked", "help wanted"]}, {"num": 14619, "title": "Preserve JSDocs in *.d.ts files when stripping comments", "labels": ["In Discussion", "Suggestion"]}, {"num": 31529, "title": "Preserve pass-through parameter type in generic function return type", "labels": ["Needs More Info"]}, {"num": 40586, "title": "Preserve tuples when mapping with `as` clauses", "labels": ["In Discussion", "Suggestion"]}, {"num": 36761, "title": "Preserve type aliases on implement interface", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 26106, "title": "Preserve union type name within larger union", "labels": ["Domain: Type Display", "In Discussion", "Suggestion"]}, {"num": 30447, "title": "preserveSymlinks: Changes to target module are not propagated to symlink modules", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 12437, "title": "preset class properties to undefined", "labels": ["Breaking Change", "ES Next", "Suggestion", "Waiting for TC39"]}, {"num": 36501, "title": "prettify complex type display (for generic-heavy types)", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 18661, "title": "Printer doesn't print jsDoc comments", "labels": ["Bug"]}, {"num": 31710, "title": "Prioritise import suggestions from tsconfig alias over external dependencies", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 36489, "title": "Private Fields: Code action for marking a field private", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 16037, "title": "Private Member Minification Design Proposal", "labels": ["Needs More Info", "Suggestion"]}, {"num": 37621, "title": "Private members have implicit any type in generated declaration files", "labels": ["Needs Investigation"]}, {"num": 14137, "title": "Private members used only via `[]` notation trigger `--noUnusedLocals` error", "labels": ["Bug", "Effort: Moderate", "help wanted"]}, {"num": 29453, "title": "Private Members with Default Value on Class Extension Compiles with Member declarations before Super call if function is called before super", "labels": ["Bug"]}, {"num": 9974, "title": "Private/protected properties on siblings in union types", "labels": ["Domain: Error Messages", "Suggestion", "help wanted"]}, {"num": 34714, "title": "Probabilistic Types", "labels": ["In Discussion", "Suggestion"]}, {"num": 10442, "title": "probable bug in typeof type guard", "labels": ["Bug"]}, {"num": 40439, "title": "Probable bug: Functional properties don't get inferred with circular type parameter constraints like `T extends M<T>`", "labels": ["Needs Investigation"]}, {"num": 27562, "title": "Problem returning union of promises in `then` callback", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 18191, "title": "Problem with destructuring + default values in the implementation of an inherited signature", "labels": ["Bug"]}, {"num": 27014, "title": "Problem with inference for this['prop'] with conditional types", "labels": ["Bug", "Domain: Conditional Types"]}, {"num": 39525, "title": "Problematic Ternary-Expression Formatting Inside JS String Interpolation", "labels": ["Bug", "Domain: Formatter"]}, {"num": 25020, "title": "Programming in the dynamic typing veneer layer, missing patterns, keyof inverse unions, process intersection or union items", "labels": ["Discussion"]}, {"num": 11040, "title": "programUpToDate check in synchonizeHostData should ignore differences in library files that were injected by the compiler  ", "labels": ["Bug"]}, {"num": 25023, "title": "Project compiles OK but hangs when --watch is added", "labels": ["Bug", "Domain: Declaration Emit"]}, {"num": 12403, "title": "Project does not compile on Android (Termux)", "labels": ["Bug", "help wanted"]}, {"num": 32400, "title": "Project References - Infinite build cycle/loop, hard to debug", "labels": ["Needs More Info"]}, {"num": 32651, "title": "Project References and noEmitOnError", "labels": ["Needs Proposal"]}, {"num": 29549, "title": "Project references cause TS5055", "labels": ["Needs More Info", "Scenario: Monorepos & Cross-Project References"]}, {"num": 37257, "title": "Project References docs/example are missing rootDirs (?)", "labels": ["Needs Investigation"]}, {"num": 40829, "title": "Project references: missing errors in editor (VS Code)", "labels": ["Needs Investigation"]}, {"num": 26565, "title": "Project references: Option to bundle dependencies with multi-file output", "labels": ["In Discussion", "Suggestion"]}, {"num": 39884, "title": "Project too large for TS Server to handle", "labels": ["Needs More Info"]}, {"num": 34846, "title": "Project with project references and outFile fails to build", "labels": ["Bug"]}, {"num": 40431, "title": "Project-references type check with --noEmit fails without built files", "labels": ["Design Limitation"]}, {"num": 16002, "title": "projectInfo Returns Unpredictable configFileName in Workspaces with Multiple Configs", "labels": ["Bug", "VS Code Tracked"]}, {"num": 39680, "title": "Promise rejection type.", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 3834, "title": "Promise.catch should have a return type of <TResult>, not T.", "labels": ["In Discussion", "Suggestion"]}, {"num": 38861, "title": "Promise.resolve() need type assertion for string literals", "labels": ["Design Limitation"]}, {"num": 19194, "title": "Promise.{all,race} static method's iterable definitions incorrectly omit other definitions by overloading (regression)", "labels": ["Bug", "Domain: lib.d.ts"]}, {"num": 27711, "title": "Promise<Promise<T>> cannot exist in JS", "labels": ["Domain: lib.d.ts", "In Discussion", "Suggestion"]}, {"num": 17862, "title": "PromiseLike.then returns `PromiseLike<Promise<T>>` instead of `PromiseLike<T>`", "labels": ["Bug"]}, {"num": 17253, "title": "Properties of instances of anonymous classes have type <any> after an instanceof guard.", "labels": ["Bug"]}, {"num": 36012, "title": "Property '[Symbol.iterator]' is missing in type 'PartialTuple<ConstructorParams<T>>", "labels": ["Needs Investigation"]}, {"num": 38310, "title": "Property 'description' does not exist on type 'unique symbol'", "labels": ["Bug", "Rescheduled"]}, {"num": 6270, "title": "Property 'float' does not exist on type 'CSSStyleDeclaration'", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 17607, "title": "Property 'setRangeText' does not exist on type 'HTMLInputElement'", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 36896, "title": "Property 'sheet' does not exist on type 'SVGStyleElement'", "labels": ["Bug", "Domain: lib.d.ts", "GraceHopperOSD", "help wanted"]}, {"num": 41301, "title": "Property 'sourceFileToPackageName' does not exist on type 'Program'.", "labels": []}, {"num": 28017, "title": "Property ? is missing in wrong type", "labels": ["Bug"]}, {"num": 40568, "title": "Property completions with quoted names", "labels": ["Domain: Completion Lists", "Experience Enhancement", "GraceHopperOSD", "Suggestion", "help wanted"]}, {"num": 32395, "title": "Property decorator documentation is inaccurate?", "labels": ["Docs"]}, {"num": 39504, "title": "Property does not exist on `globalThis` immediately after declaring it", "labels": ["Suggestion"]}, {"num": 31682, "title": "Property initialisation check in TS 3.5 is too strict for ember 3.5", "labels": ["In Discussion", "Suggestion"]}, {"num": 2779, "title": "Property initializers capture the wrong 'arguments' value", "labels": ["Bug", "help wanted"]}, {"num": 30071, "title": "Property is not assignable to the same property in generic base type", "labels": ["Bug"]}, {"num": 37929, "title": "Property X dows not exist on window for usage in other scripts", "labels": ["Needs More Info"]}, {"num": 37688, "title": "property-will-be-overwritten-by-spread error is issued multiple times", "labels": ["Bug"]}, {"num": 31917, "title": "PropertyDecorator factory with generic type is not so intelligent", "labels": ["Needs Investigation"]}, {"num": 39831, "title": "proposal-record-tuple", "labels": ["Suggestion", "Waiting for TC39"]}, {"num": 26532, "title": "Proposal: `export as namespace` for UMD module output", "labels": ["In Discussion", "Suggestion"]}, {"num": 13031, "title": "Proposal: a literal notation for well-known symbols", "labels": ["In Discussion", "Suggestion"]}, {"num": 30826, "title": "Proposal: Add a strictly typed spread operator", "labels": ["Suggestion", "Too Complex"]}, {"num": 15397, "title": "Proposal: Add new __construct helper for better ES5/ES6 class interop", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 36348, "title": "Proposal: Allow a name bound to a class value to be used in a type position to reference the class's instance type", "labels": ["In Discussion", "Suggestion"]}, {"num": 40220, "title": "Proposal: allow ambient property declarations to override accessors as well", "labels": ["In Discussion", "Suggestion"]}, {"num": 21926, "title": "Proposal: Allow typescript to type check modules using react-native's module resolution", "labels": ["In Discussion", "Suggestion"]}, {"num": 22609, "title": "Proposal: better type narrowing in overloaded functions through overload set pruning", "labels": ["In Discussion", "Suggestion"]}, {"num": 4433, "title": "Proposal: Bundling TS module type definitions", "labels": ["In Discussion", "Suggestion"]}, {"num": 4434, "title": "Proposal: Bundling TS modules for consumption and execution", "labels": ["In Discussion", "Suggestion"]}, {"num": 3538, "title": "Proposal: Conditional Compilation", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 10717, "title": "Proposal: covariance and contravariance generic type arguments annotations", "labels": ["In Discussion", "Suggestion"]}, {"num": 19151, "title": "Proposal: delegateof", "labels": ["In Discussion", "Suggestion"]}, {"num": 22665, "title": "Proposal: Easier Migration with Loose Mode in TypeScript Files", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 23906, "title": "Proposal: Easier Migration with Types in JavaScript Files", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 30076, "title": "Proposal: emit files without `.ts` extension to get custom file extension", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 30462, "title": "Proposal: Follow program flow in constructor when strictPropertyInitialization = true", "labels": ["In Discussion", "Suggestion"]}, {"num": 7692, "title": "Proposal: Friend Declarations for classes", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 13890, "title": "Proposal: JSX.ElementType", "labels": ["Domain: JSX/TSX", "In Discussion", "Suggestion"]}, {"num": 36406, "title": "Proposal: Make base class expressions able to access class type parameters", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 6695, "title": "Proposal: Merge enum and const enum features", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 23689, "title": "Proposal: new \"invalid\" type to indicate custom invalid states", "labels": ["In Discussion", "Suggestion"]}, {"num": 40075, "title": "Proposal: Optional type refinement", "labels": ["Suggestion", "Too Complex"]}, {"num": 22669, "title": "Proposal: Overload Function.bind for when no argArray is provided.", "labels": ["In Discussion", "Suggestion"]}, {"num": 26242, "title": "Proposal: Partial Type Argument Inference", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 23554, "title": "Proposal: propagate function context into the 'this' type of functions", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 14267, "title": "Proposal: quoted and unquoted property names distinct", "labels": ["In Discussion", "Suggestion"]}, {"num": 40389, "title": "Proposal: Spread Interface Operator", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 28954, "title": "Proposal: stronger JSX types through conditional types", "labels": ["In Discussion", "Suggestion"]}, {"num": 19550, "title": "Proposal: Supplementing Implicit Types", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 20423, "title": "Proposal: support pathof along with current keyof ", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 5228, "title": "Proposal: The internal modifier for classes", "labels": ["In Discussion", "Suggestion"]}, {"num": 9883, "title": "Proposal: Type Builder API", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 9879, "title": "Proposal: Type Relationship API", "labels": ["API", "In Discussion", "Suggestion"]}, {"num": 18408, "title": "proposal:symbol enum", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 28614, "title": "Props requiring casting on complex type (and defaultProps not settable)", "labels": ["Bug"]}, {"num": 10017, "title": "Protected nested classes", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 26496, "title": "Prototype assignment of constructor nested inside a class confuses type resolution", "labels": ["Bug"]}, {"num": 39166, "title": "Prototype assignment should take the type of the initializer and not require a literal", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 782, "title": "Prototype properties non enumerable", "labels": ["Needs More Info", "Suggestion"]}, {"num": 28064, "title": "Prototype property assignments don't work for js-native-types", "labels": ["Awaiting More Feedback", "Bug", "Domain: JavaScript"]}, {"num": 30304, "title": "Provide .ts developer experience for .js modules (with a .d.ts without JSDoc)", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 38008, "title": "Provide `declare` keyword support for class methods", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 33542, "title": "Provide a `this` type for `get`/`set` methods in `Reflect.defineProperty` options", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 39032, "title": "Provide a better display experience for unresolved values and types", "labels": ["In Discussion", "Rescheduled", "Suggestion"]}, {"num": 25429, "title": "Provide a better error message when \"async\" is mistyped?", "labels": ["Bug", "Domain: Error Messages", "help wanted"]}, {"num": 35292, "title": "Provide a clear and explicit TypeScript pkg.types alternative, such as pkg.typescriptTypes", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 34864, "title": "Provide a code action to replace a string with a template string", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 16792, "title": "Provide a means for mapping back to .ts files in published packages", "labels": ["Domain: Declaration Emit", "In Discussion", "Scenario: Monorepos & Cross-Project References", "Suggestion"]}, {"num": 25431, "title": "Provide a means to declare that all keys of an interface or string union must be in a statically declared array", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 37440, "title": "Provide a quick-fix for non-exported types", "labels": ["Domain: Quick Fixes", "Experience Enhancement", "Suggestion", "good first issue", "help wanted"]}, {"num": 37751, "title": "Provide a ReadonlyRegExp type", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 40828, "title": "Provide a standalone build of typescript for use in browser?", "labels": ["Out of Scope", "Suggestion"]}, {"num": 16577, "title": "Provide a way to add the '.js' file extension to the end of module specifiers", "labels": ["Domain: ES Modules", "Needs Proposal", "Suggestion"]}, {"num": 10187, "title": "Provide a way to alias namespaces", "labels": ["Needs More Info", "Suggestion"]}, {"num": 19255, "title": "Provide a way to apply quick fixes/refactorings/code actions in a bulk automated fashion", "labels": ["Domain: Quick Fixes", "Domain: Refactorings", "Needs Proposal", "Suggestion"]}, {"num": 16674, "title": "Provide a way to enforce a 0 return code from 'tsc'", "labels": ["Add a Flag", "Awaiting More Feedback", "Suggestion"]}, {"num": 28578, "title": "Provide a way to specify inheritance explicitly", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 40195, "title": "Provide an editor-level warning when including output files", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 3404, "title": "Provide an xclangspec file for TypeScript syntax highlighting in Xcode", "labels": ["Suggestion", "help wanted"]}, {"num": 34651, "title": "Provide auto-completion on function parameters (TypeScript)", "labels": ["Bug", "Domain: Completion Lists"]}, {"num": 23958, "title": "Provide completions in indexed access without quotes", "labels": ["Domain: Completion Lists", "Experience Enhancement", "Suggestion"]}, {"num": 39396, "title": "Provide documentation on writing fourslash tests", "labels": ["Docs", "Infrastructure"]}, {"num": 35428, "title": "Provide editor feature for filling in 'switch' cases for common scenario", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 41104, "title": "Provide flag for projects to ban compile-time side-effects in root files", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 12539, "title": "Provide Format Options for JSX/TSX End of Tag Placement", "labels": ["Domain: Formatter", "Suggestion", "VS Code Tracked", "help wanted"]}, {"num": 31658, "title": "Provide full import statement text from auto-import suggestions", "labels": ["Domain: Auto-import", "Domain: Completion Lists", "Effort: Moderate", "Suggestion", "help wanted"]}, {"num": 21150, "title": "Provide lib for modern DOM", "labels": ["Domain: lib.d.ts", "Experience Enhancement", "Suggestion", "help wanted"]}, {"num": 34859, "title": "Provide metadata about TypeScript's available refactorings and quick fixes", "labels": ["Committed", "Rescheduled", "Suggestion"]}, {"num": 34775, "title": "Provide passive `extendedDiagnostics` feedback on PRs", "labels": ["Infrastructure", "Suggestion"]}, {"num": 36960, "title": "Provide release commit when publishing to NPM", "labels": ["In Discussion", "Suggestion"]}, {"num": 4370, "title": "Provide suggested fixes for unresolved entities", "labels": ["Suggestion", "help wanted"]}, {"num": 36802, "title": "Provide type coverage metrics", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 32949, "title": "Provide TypeScript as an ESM", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 39689, "title": "Provide way to configure default compiler options for TS Server Inferred Project", "labels": ["In Discussion", "Suggestion"]}, {"num": 26921, "title": "Proxied types are not loaded.", "labels": ["Needs More Info"]}, {"num": 9486, "title": "Public APIs not normalizing paths", "labels": ["Bug", "help wanted"]}, {"num": 33330, "title": "Publish `@\u200dtypes` Packages to the GitHub Registry", "labels": ["@types", "Infrastructure"]}, {"num": 30608, "title": "Pull required references from referenced projects.", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 17800, "title": "Querying Enums containing string initializers with a variable throws TS7015", "labels": ["Bug"]}, {"num": 29037, "title": "querySelector return type could be more specific for compound selectors", "labels": ["Domain: lib.d.ts", "In Discussion", "Suggestion"]}, {"num": 41296, "title": "Question: type definitions for dual packages", "labels": []}, {"num": 18814, "title": "Question: TypeScript and proposal-first-class-protocols", "labels": ["Discussion"]}, {"num": 21376, "title": "Quick fix all for unused imports should only remove other unused imports, not all unused declarations", "labels": ["Awaiting More Feedback", "Domain: Quick Fixes", "Suggestion"]}, {"num": 26487, "title": "quick fix for merge duplicate import or export declaration", "labels": ["Domain: Refactorings", "Experience Enhancement", "In Discussion", "Suggestion"]}, {"num": 32925, "title": "Quick fix for using bracket accessor instead of get/set on Map", "labels": ["Domain: Quick Fixes", "Experience Enhancement", "Suggestion"]}, {"num": 16479, "title": "Quick fix for variable of wrong type results in ugly formatting", "labels": ["Bug", "Domain: Quick Fixes"]}, {"num": 27163, "title": "Quick fix proposal: declare property for jsdoc types", "labels": ["Domain: JavaScript", "Domain: Refactorings", "In Discussion", "Suggestion"]}, {"num": 31500, "title": "Quick fix to convert @typedef to type or interface", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 20649, "title": "Quick fix to install regular .js npm packages", "labels": ["Domain: Quick Fixes", "In Discussion", "Suggestion"]}, {"num": 31506, "title": "Quick Fix: Infer parameter types from usage \u2026\u00a0for one function", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 16010, "title": "Quick Fix: Suggest correct capitalization when importing a file with incorrect capitalization ", "labels": ["Domain: Quick Fixes", "Experience Enhancement", "Suggestion"]}, {"num": 5984, "title": "Quick info busted if IntrinsicElements uses catch-all index signature", "labels": ["Bug", "Domain: Quick Info"]}, {"num": 18910, "title": "Quick info displays type parameter when type is known", "labels": ["Bug", "Domain: Quick Info"]}, {"num": 28272, "title": "Quick info for array in `a.length` shows `any[]` even when it should have a type", "labels": ["Bug", "Domain: Quick Info"]}, {"num": 3718, "title": "Quick info for object property binding elements in a for-of gives incorrect type", "labels": ["Bug", "Domain: Quick Info"]}, {"num": 26876, "title": "Quick info for parameter redundantly shows @param tag", "labels": ["Committed", "Domain: Quick Info", "Suggestion"]}, {"num": 28083, "title": "Quick info on JSX element should show inferred type arguments", "labels": ["Bug", "Domain: Quick Info"]}, {"num": 40013, "title": "QuickInfo for ElementAccessExpression show original type when its type should be narrowed.", "labels": ["Bug"]}, {"num": 15844, "title": "quickInfo for variable narrowed to function shows `never`", "labels": ["Bug"]}, {"num": 1199, "title": "QuickInfo is not consistent for symbols that exist in type and value spaces", "labels": ["Bug", "Domain: Quick Info"]}, {"num": 30373, "title": "QuickInfo misleading with signatures from higher order function type inference", "labels": ["Bug", "Domain: Quick Info", "Domain: Type Display"]}, {"num": 10996, "title": "QuickInfo on JSX element when the type is resolve to be string index signature of JSX.IntrinsicElements", "labels": ["Bug"]}, {"num": 1631, "title": "QuickInfo shows icon and name of item type", "labels": ["API", "Suggestion", "help wanted"]}, {"num": 41325, "title": "Quiet inheritance", "labels": []}, {"num": 14764, "title": "raise a type error on attempt to strict-equal-compare a value of string | null to undefined", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 40092, "title": "random emit declaration", "labels": ["Bug", "Fix Available"]}, {"num": 39711, "title": "random error TS2345  type incompatible", "labels": ["Needs Investigation"]}, {"num": 36608, "title": "RangeError: Maximum call stack size exceeded", "labels": ["Needs More Info"]}, {"num": 35289, "title": "RangeError: Maximum call stack size exceeded (with await nested promises)", "labels": ["Bug", "Crash"]}, {"num": 38061, "title": "RangeError: Maximum call stack size exceeded in 'convertToTree' during 'navtree'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 33717, "title": "RangeError: Maximum call stack size exceeded in 'Object.normalizeSlashes' during 'references'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 35515, "title": "RangeError: Maximum call stack size exceeded in 'String.replace' during 'getEditsForFileRename'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 35517, "title": "RangeError: Maximum call stack size exceeded in 'String.replace' during 'navtree'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 36833, "title": "RangeError: Maximum call stack size exceeded in 'tryGetSourcePosition' during 'definitionAndBoundSpan'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 3025, "title": "Rationalize our presentation and handling of merged/alias symbols in the IDE.", "labels": ["API", "Domain: Quick Info", "Suggestion", "help wanted"]}, {"num": 39715, "title": "raw tagged string doesn't support for `\\x`", "labels": ["Bug", "help wanted"]}, {"num": 28292, "title": "Re-export class as part of a different namespace", "labels": ["In Discussion", "Suggestion"]}, {"num": 25158, "title": "Re-export from a .d.ts file is not removed when compiling ES modules", "labels": ["Bug"]}, {"num": 14051, "title": "Re-export module namespace as global", "labels": ["In Discussion", "Suggestion"]}, {"num": 29227, "title": "Re-exporting a default export that doesn't exist with allowSyntheticDefaultExports true causes assert failures in getDefaultExportInfoWorker", "labels": ["Bug", "Crash", "Domain: Completion Lists"]}, {"num": 4336, "title": "Re-exporting namespace declarations in ES6 ambient declaration", "labels": ["In Discussion", "Suggestion"]}, {"num": 17979, "title": "React and defaultProps cant pass correct props to inner function", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 28352, "title": "React function-returning-component regression", "labels": ["Bug", "Domain: JSX/TSX"]}, {"num": 28351, "title": "React StatelessComponent regression", "labels": ["Bug", "Domain: JSX/TSX"]}, {"num": 30748, "title": "React, JSX and refs", "labels": ["Design Limitation"]}, {"num": 30874, "title": "react-redux type inference is broken since v3.1", "labels": ["Bug"]}, {"num": 31798, "title": "React: enforce correct usage of refs", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 16019, "title": "React: Type inference not working for ref callback", "labels": ["Bug", "Domain: JSX/TSX"]}, {"num": 6781, "title": "Readonly indexer and constructor usage: question", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 29634, "title": "Readonly properties can be modified in derived classes", "labels": ["In Discussion", "Suggestion"]}, {"num": 29281, "title": "Readonly properties type narrowing doesn't flow into inner function scopes", "labels": ["Domain: Control Flow", "Experience Enhancement", "Suggestion"]}, {"num": 11579, "title": "readonly property must be assigned in constructor", "labels": ["Suggestion", "help wanted"]}, {"num": 29655, "title": "Readonly type breaks Set and Map", "labels": ["In Discussion", "Suggestion"]}, {"num": 31253, "title": "Readonly<Float32Array> not assignable to Float32Array", "labels": ["Bug", "Domain: Mapped Types"]}, {"num": 37182, "title": "Readonly<T> miss all internal symbol keys", "labels": ["Experimentation Needed"]}, {"num": 26761, "title": "rebuild failed if update tsconfig", "labels": ["Infrastructure"]}, {"num": 37321, "title": "Recognize JS namespace pattern in TS", "labels": ["In Discussion", "Suggestion"]}, {"num": 31314, "title": "Recognize properties introduced by jQuery extend", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 38115, "title": "Recognize property with name defined by constant in Object.defineProperty ", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 19785, "title": "Reconsider if we need to cache file system entries given that we have tweaked triggers for watch", "labels": ["Infrastructure"]}, {"num": 37607, "title": "Record<string, string> is assignable to Record<T, string>", "labels": ["Needs Investigation"]}, {"num": 33452, "title": "Recurring: Review exception text for potential PII", "labels": ["Meta-Issue"]}, {"num": 22575, "title": "Recursive conditional types are aliased", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 40022, "title": "recursive deep property access works unless the assigned variable has explicit type annotation?", "labels": ["Needs Investigation"]}, {"num": 15926, "title": "Recursive default generic causes Maximum call stack size exceeded", "labels": ["Bug"]}, {"num": 29872, "title": "Recursive definitions in mixins", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 13245, "title": "Recursive Node.js require", "labels": ["Bug"]}, {"num": 41027, "title": "recursive private static gets missed in --noUnusedLocals", "labels": ["Bug"]}, {"num": 40315, "title": "Recursive Reference of Interface to itself as base type in 4.0.2 (regression?)", "labels": ["Design Limitation"]}, {"num": 27267, "title": "recursive return type for deterministic generators", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 35980, "title": "Recursive type declaration is expanded and contains errors", "labels": ["Design Limitation"]}, {"num": 32279, "title": "Recursive type shouldn't typecheck but it does", "labels": ["Bug"]}, {"num": 26001, "title": "Recursive types limit?", "labels": ["Design Limitation"]}, {"num": 10649, "title": "Recursively Resolving Modules", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 35486, "title": "Reduce amount of code necessary to quickly format the diagnostics to a string", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 27891, "title": "Reduce typescript package size", "labels": ["In Discussion", "Suggestion"]}, {"num": 34736, "title": "Reduce without an initialValue should be illegal on a potentially empty array", "labels": ["Suggestion", "Too Complex"]}, {"num": 39798, "title": "Reducible circular reference error (regression)", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 41241, "title": "Reevaluate checkExternalEmitHelpers() callers", "labels": []}, {"num": 26260, "title": "Refactor \"move to function in module scope\" moves function past the following variable declaration", "labels": ["Bug", "Domain: Refactorings", "help wanted"]}, {"num": 36018, "title": "Refactor option: Convert Object <-> Map", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 30039, "title": "Refactor rename file + rename function", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 25946, "title": "Refactor to convert variable to destructuring", "labels": ["Awaiting More Feedback", "Domain: Refactorings", "Suggestion"]}, {"num": 41298, "title": "Refactor to extract a part of type property into a new type", "labels": []}, {"num": 26479, "title": "Refactor to extract existing function to outer scope", "labels": ["Domain: Refactorings", "In Discussion", "Suggestion"]}, {"num": 40867, "title": "Refactor/codefix: find missing variable in destructured object", "labels": ["Declined", "Suggestion"]}, {"num": 40209, "title": "Refactor/Quickfix: Convert parameter property into property declaration", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 29917, "title": "Refactor: Introduce object destruction", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 35467, "title": "refactoring for extracting return type of a function", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 30566, "title": "refactoring for listing parameters from single line to column and back", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 25346, "title": "refactoring for removing excessive/impossible cases from the unions in the return type", "labels": ["Awaiting More Feedback", "Domain: Refactorings", "Suggestion"]}, {"num": 25261, "title": "refactoring for turning // comments to /**", "labels": ["Domain: Refactorings", "In Discussion", "Suggestion"]}, {"num": 662, "title": "Refactoring support: Reorder parameters", "labels": ["Domain: Refactorings", "Suggestion", "Visual Studio"]}, {"num": 40750, "title": "Refactoring to add inferred return type annotation to a function", "labels": ["Domain: Refactorings", "Experience Enhancement", "Suggestion"]}, {"num": 30996, "title": "Refactoring to convert destructuring declaration to property accesses", "labels": ["Awaiting More Feedback", "Domain: Refactorings", "Suggestion"]}, {"num": 32319, "title": "Refactoring: Generate type annotation from inferred type", "labels": ["Awaiting More Feedback", "Domain: Refactorings", "Suggestion"]}, {"num": 38018, "title": "Refactorings can change formatting of multiline parameter lists", "labels": ["Bug", "Domain: Refactorings"]}, {"num": 26306, "title": "Refactors which in TS would generate a type annotation should generate jsdoc in JS", "labels": ["Committed", "Suggestion"]}, {"num": 8090, "title": "reference search doesn't work with `extends`", "labels": ["Bug"]}, {"num": 6285, "title": "Reference to own class in static variable initialization to a decorated class references undecorated class instead of decorated class", "labels": ["Bug", "Domain: Decorators"]}, {"num": 37131, "title": "Reference to the function expression identifier in it's body has different symbol", "labels": ["API", "Bug"]}, {"num": 40302, "title": "ReferenceError: *_1 is not defined in generic function return", "labels": ["Needs More Info"]}, {"num": 36267, "title": "Referencing `this` from a static class field", "labels": ["Bug"]}, {"num": 38160, "title": "Refine JSON.stringify return type for booean value", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 40461, "title": "Refine tracing functionality", "labels": []}, {"num": 7599, "title": "refinement types", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 30688, "title": "Reflect.has fails to act as type guard (should act same as \"in\" operator)", "labels": ["Domain: lib.d.ts", "Experience Enhancement", "Suggestion"]}, {"num": 34626, "title": "Reflect.ownKeys has overly wide type definition", "labels": ["Bug", "Domain: lib.d.ts"]}, {"num": 14494, "title": "Reformat ternary operator", "labels": ["Bug", "Domain: Formatter", "VS Code Tracked", "help wanted"]}, {"num": 41160, "title": "Regex-validated string types (feedback reset)", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 38671, "title": "RegExp literal flag types", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 36132, "title": "RegExp named capture groups don't get transpiled", "labels": ["In Discussion", "Suggestion"]}, {"num": 38087, "title": "Region collapse / folding in Visual Studio like done in C# settings", "labels": ["In Discussion", "Suggestion", "Visual Studio"]}, {"num": 35038, "title": "Registry ATA uses should be configurable", "labels": ["Bug", "Committed"]}, {"num": 35385, "title": "Regression 3.7.2: Global namespace augmentations containing re-exports in nested namespaces not found", "labels": ["Bug", "Fix Available"]}, {"num": 18551, "title": "Regression in 2.5/2.6 indexing lookup types", "labels": ["Bug"]}, {"num": 12490, "title": "Regression in nightly build use of `this` type?", "labels": ["Bug", "Domain: lib.d.ts"]}, {"num": 19732, "title": "Regression in type inference with functional intersection type", "labels": ["Needs Investigation"]}, {"num": 34796, "title": "Regression on inference of \"old style\" recursive interfaces in 3.7.x", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 29505, "title": "Regression: Argument of type ... is not assignable to parameter of type ...", "labels": ["Bug", "Fix Available", "Rescheduled"]}, {"num": 19577, "title": "Regression: Not-null assertion causes implicit any", "labels": ["Bug", "good first issue", "help wanted"]}, {"num": 31549, "title": "Regression: Type T[K] as an array when sliced loses its type", "labels": ["Bug"]}, {"num": 33912, "title": "Relate control flow to conditional types in return types", "labels": ["In Discussion", "Suggestion"]}, {"num": 25033, "title": "Related error spans for derived members in interfaces/classes", "labels": ["Domain: Related Error Spans", "Experience Enhancement", "Suggestion", "help wanted"]}, {"num": 29698, "title": "Relations based on variance markers do not take into account parameters used as key types.", "labels": ["Bug"]}, {"num": 14286, "title": "Relax visibility rules for type-aliases when 'declaration' compiler option is set.", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 37196, "title": "Release Automation Meta Issue", "labels": ["Infrastructure", "Meta-Issue"]}, {"num": 28985, "title": "Remote declaration file", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 38149, "title": "Remove \"An import path cannot end with a '.ts' extension\" check (rewriting out-of-scope)", "labels": ["In Discussion", "Suggestion"]}, {"num": 34431, "title": "Remove name assignment when renaming a renamed destructured property to its original name", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 40257, "title": "Remove type parameters quick fix forgets the trailing >", "labels": ["Bug", "Domain: Quick Fixes", "Effort: Moderate", "Fix Available", "help wanted"]}, {"num": 24058, "title": "Remove Unnecessary lib.*.d.ts Entries", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 33708, "title": "Remove useless `@\u200dtypedef` comments in `declaration`", "labels": ["Bug", "Domain: Comment Emit", "Domain: Declaration Emit", "Effort: Difficult"]}, {"num": 27475, "title": "Removed optional parameter from Window.createImageBitmap factory", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 22677, "title": "Removing \"private\" modifier from types", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 24806, "title": "Removing '@noLib' in fourslash test makes diagnostics disappear", "labels": ["Infrastructure"]}, {"num": 31025, "title": "Removing optional modifier also removes `undefined` from value type", "labels": ["Bug"]}, {"num": 1166, "title": "Removing the qualified name restriction on import targets", "labels": ["Suggestion", "good first issue", "help wanted"]}, {"num": 29026, "title": "Rename a symbol of a named export: Do not create export alias", "labels": ["In Discussion", "Suggestion"]}, {"num": 9257, "title": "Rename doesn't work for string literal compared to string literal type", "labels": ["Bug"]}, {"num": 30879, "title": "Rename field to a name with dash does not transform the field with quotes.", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 27959, "title": "Rename file by renaming on an aliased path", "labels": ["Bug", "Domain: TSServer"]}, {"num": 29294, "title": "Rename file when renaming default export", "labels": ["Domain: Refactorings", "Needs Proposal", "Suggestion"]}, {"num": 11308, "title": "Rename inconsistency for default exports", "labels": ["Bug"]}, {"num": 38251, "title": "Rename refactoring doesn't handle changing a member to a non-Identifier", "labels": ["Bug", "Needs Proposal"]}, {"num": 7458, "title": "Rename symbol on a HTML tag inside of JSX globally renames all tags", "labels": ["Domain: JSX/TSX", "Experience Enhancement", "Suggestion", "VS Code Tracked"]}, {"num": 27193, "title": "Renaming a module with a default export should rename default imports which match the filename", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 29737, "title": "Renaming default values with destructure assignment gives incorrect result", "labels": ["Bug"]}, {"num": 12076, "title": "Repeated code with exporting", "labels": ["Bug"]}, {"num": 23897, "title": "Repeated mapped type inference causes incorrect typeToString results", "labels": ["Bug", "Domain: Type Display"]}, {"num": 29396, "title": "Replace --preserveWatchOutput with --clearWatchOutput", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 26188, "title": "Replace any by unknown in definition files", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 27265, "title": "replace implicit 'any' with 'unknown'", "labels": ["Add a Flag", "Awaiting More Feedback", "Suggestion"]}, {"num": 6922, "title": "Replacing Stack Overflow as primary forum for TypeScript discussion", "labels": ["Discussion"]}, {"num": 28347, "title": "Report `noImplicitThis` errors as suggestions when `noImplicitThis` is off", "labels": ["Committed", "Domain: Error Messages", "Suggestion"]}, {"num": 20358, "title": "Report an error like TS2713 for enum members and provide a corresponding code fix", "labels": ["Domain: Error Messages", "GraceHopperOSD", "Suggestion", "good first issue", "help wanted"]}, {"num": 34871, "title": "Report candidates on closing list terminators", "labels": ["Domain: Error Messages", "Effort: Difficult", "Experience Enhancement"]}, {"num": 35740, "title": "Report error cannot emit file if any of the output file is going to write output of referenced project", "labels": ["Bug"]}, {"num": 1920, "title": "Report error if code precedes /// reference", "labels": ["Bug", "help wanted"]}, {"num": 15852, "title": "Report errors (and quickfixes) for incorrect JSDoc", "labels": ["Domain: JSDoc", "In Discussion", "Suggestion"]}, {"num": 20447, "title": "Report errors from session", "labels": ["Infrastructure"]}, {"num": 22865, "title": "Represent the types of function parameters that mutate inside the function.", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 30396, "title": "Request (probably long-term) type compilation debugger", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 21753, "title": "Request for translation on Filipino", "labels": ["Awaiting More Feedback", "Suggestion", "i18n"]}, {"num": 299, "title": "Request to change currentTarget in Event interface for lib.d.ts", "labels": ["Domain: lib.d.ts", "Suggestion", "help wanted"]}, {"num": 27479, "title": "Request: 'target: ES2018' should inclide libraries without an additional 'lib: ['es2015']", "labels": ["Needs More Info"]}, {"num": 21326, "title": "Request: Allow abstract classes to implement MappedTypes that are instantiated with type parameters.", "labels": ["In Discussion", "Suggestion"]}, {"num": 4881, "title": "Request: Class Decorator Mutation", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 41187, "title": "Request: classes as types", "labels": ["Needs More Info"]}, {"num": 30887, "title": "Request: Infer generics", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 4690, "title": "require() call not suppressed when only accessing constant enumerations", "labels": ["Bug"]}, {"num": 19117, "title": "require.main.require imports do not work", "labels": ["Awaiting More Feedback", "Domain: JavaScript", "Suggestion", "VS Code Tracked"]}, {"num": 38108, "title": "Required children are not enforced with TSX", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 37861, "title": "ResizeObserver API declarations missing", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 1196, "title": "Resolve conflict during rename", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 32161, "title": "Resolve project references from root", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 16560, "title": "Resolve the PR comments from #12336", "labels": ["Bug"]}, {"num": 28770, "title": "ResolvedModuleWithFailedLookupLocations does not publicly expose failedLookupLocations", "labels": ["API", "Bug"]}, {"num": 33183, "title": "Resolving hoisted `typeRoots` paths", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 21423, "title": "Resolving multiple package.json \"main\" fields", "labels": ["Awaiting More Feedback", "Scenario: Monorepos & Cross-Project References", "Suggestion"]}, {"num": 35154, "title": "Rest parameter in callback function using generic tuple types: Forces definition of all parameters", "labels": ["Needs Investigation"]}, {"num": 25256, "title": "Rest parameter tuples don't propagate generics", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 30239, "title": "Restrict template literal interpolation expressions to strings", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 32135, "title": "Result of `Object.create(null)` may be passed to template literal", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 30323, "title": "Result of unknown indexing explicitly cast to `any` incorrectly reported as implicit any", "labels": ["In Discussion", "Suggestion"]}, {"num": 30049, "title": "Results of conditional types are not comparable (regression)", "labels": ["Needs Investigation"]}, {"num": 27275, "title": "Return compileOnSave from synchronizeProjectList", "labels": ["Bug"]}, {"num": 36972, "title": "Return export nodes of ast when resolving alias symbol", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 30466, "title": "Return outlining spans for multiline object types", "labels": ["Bug"]}, {"num": 30209, "title": "Return statement in iterator is not type checked", "labels": ["Needs Investigation"]}, {"num": 31836, "title": "Return type annotations ignored with recursive closures using JSDoc", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 36224, "title": "return type generics paramater is set to never", "labels": ["Needs Investigation"]}, {"num": 32540, "title": "Return type inference breaks in function parameter; tooltip also inconsistent", "labels": ["Needs More Info"]}, {"num": 20102, "title": "Return type inference broken for types with static members in ts 2.5; later fixed", "labels": ["Bug"]}, {"num": 26131, "title": "Return type inference error with async functions and Promise.reject()", "labels": ["Bug"]}, {"num": 40849, "title": "Return type not inferred from generic callback", "labels": ["Design Limitation"]}, {"num": 36053, "title": "Returned tuples don't match compatible types when using function union types", "labels": ["Bug"]}, {"num": 33002, "title": "Returning expression gives max depth error; assigning expression to temporary variable and returning that does not", "labels": ["Needs More Info"]}, {"num": 34636, "title": "ReturnType support for assertions", "labels": ["Design Limitation"]}, {"num": 36433, "title": "Revaluate default props behavior in JSX functional components", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 26724, "title": "Reverse mapped types do not preserve numeric index signatures", "labels": ["Bug"]}, {"num": 7258, "title": "Reverse the order of `__param` metadata decorators emitted", "labels": ["Revisit", "Suggestion"]}, {"num": 27244, "title": "Revert #27225 when possible", "labels": ["Bug", "Revisit"]}, {"num": 21246, "title": "Review `replaceNode`", "labels": ["Infrastructure"]}, {"num": 18624, "title": "Review distinctions between [] and undefined in the factory", "labels": ["Infrastructure"]}, {"num": 23373, "title": "Review preserving internal trivia in code fixes", "labels": ["Bug", "Domain: Quick Fixes"]}, {"num": 24217, "title": "Revise whitespace handling in JSDoc", "labels": ["Bug"]}, {"num": 29202, "title": "Revisiting _ underscore for unused parameters: create `unused` type", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 33624, "title": "Rewrite `getAccessibleSymbolChain` for performance", "labels": ["Domain: Declaration Emit", "Domain: Performance", "Experience Enhancement"]}, {"num": 38385, "title": "RFC: Support __proto__ literal in object initializers", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 22039, "title": "rootDir option documentation incorrect and confusing", "labels": ["Docs"]}, {"num": 36650, "title": "RTCStatsType in dom.generated.d.ts is incorrect.", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 39204, "title": "Running a type through a mapped type loses polymorphic `this` type ", "labels": ["Bug"]}, {"num": 39707, "title": "Running TS Server in a web worker", "labels": ["Meta-Issue"]}, {"num": 24697, "title": "runtests-browser cause heap out of memory error", "labels": ["Infrastructure"]}, {"num": 8126, "title": "Runtime parameter info (name, optional, default)", "labels": ["Domain: Decorators", "Revisit", "Suggestion"]}, {"num": 38620, "title": "Safe decorator implementation with ^ type operator.", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 9737, "title": "Salsa Feature Request: Support 'fuzzy' go to definition when not using commonJS", "labels": ["Domain: JavaScript", "Domain: Symbol Navigation", "In Discussion", "Suggestion", "VS Code Tracked"]}, {"num": 6666, "title": "Salsa formatting gives overlapping edits in this case", "labels": ["Bug", "Domain: Formatter", "VS Code Tracked"]}, {"num": 5551, "title": "Same references from different (but not found) modules", "labels": ["Bug", "help wanted"]}, {"num": 10285, "title": "Scope of this is lost when passing a member function to setInterval", "labels": ["Domain: lib.d.ts", "Suggestion", "good first issue", "help wanted"]}, {"num": 32389, "title": "Second infer overwrites initally infered type defintion", "labels": ["Design Limitation"]}, {"num": 17866, "title": "Seemingly wrong arguments object when both es6 and commonjs options are present", "labels": ["Bug"]}, {"num": 38675, "title": "Self-referencing a package using its name", "labels": ["Revisit", "Suggestion"]}, {"num": 15503, "title": "Send event to host if plugin failed to load", "labels": ["Bug"]}, {"num": 31887, "title": "Separate directories for map files", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 32821, "title": "Separate read and write types for properties", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 29043, "title": "Separate type application from function application", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 33502, "title": "Serialization/Deserialization API for AST", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 21280, "title": "server/project: External files should be added to project root files map", "labels": ["Bug"]}, {"num": 40153, "title": "Service worker types for service worker event listener", "labels": ["Bug", "Domain: lib.d.ts", "GraceHopperOSD", "help wanted"]}, {"num": 11781, "title": "Service Worker typings", "labels": ["Domain: lib.d.ts", "Suggestion", "help wanted"]}, {"num": 25607, "title": "Services for non-homomorphic mapped type", "labels": ["Domain: Mapped Types", "Domain: Symbol Navigation", "Experience Enhancement", "Suggestion", "help wanted"]}, {"num": 25867, "title": "Services in unopened projects", "labels": ["Effort: Difficult", "In Discussion", "Suggestion"]}, {"num": 31502, "title": "ServiceWorkerRegistration.Update() should return Promise<ServiceWorkerRegistration>", "labels": ["Bug", "Domain: lib.d.ts"]}, {"num": 37583, "title": "Set as executable files that are intended to be binaries", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 29758, "title": "Set context of this keyword in definition file", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 41139, "title": "Set esModuleInterop to \"true\" by default", "labels": ["In Discussion", "Suggestion"]}, {"num": 25430, "title": "Set TypeScript compiler's base/working directory", "labels": ["In Discussion", "Suggestion"]}, {"num": 32186, "title": "setTimeout defined in lib.dom.d.ts is not type safe", "labels": ["Bug", "Domain: lib.d.ts"]}, {"num": 26238, "title": "Setting noErrorTruncation to false truncates inferred type of variables/functions; which are not errors", "labels": ["Bug"]}, {"num": 14662, "title": "Shorten method signatures (aka \"type madness\")", "labels": ["Domain: Signature Help", "Domain: Type Display", "Needs Proposal", "Suggestion"]}, {"num": 7840, "title": "Should be able to declare dotted name with `debugger`", "labels": ["Bug", "help wanted"]}, {"num": 26594, "title": "Should be able to fold { ...\\n\\n\\n } in JS/TS", "labels": ["Awaiting More Feedback", "Domain: Outlining", "Suggestion", "VS Code Tracked"]}, {"num": 36874, "title": "Should be possible to spread `Parameters` onto its function", "labels": ["Bug"]}, {"num": 40997, "title": "Should disallow using the result of calling a void-returning function", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 25845, "title": "Should import completions win over member completions?", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 28475, "title": "Should intellisense suggest block scoped values before they are declared?", "labels": ["Domain: Completion Lists", "Experience Enhancement", "Suggestion"]}, {"num": 36080, "title": "Should it be an error to add JSDoc visibility modifiers to #privateFields?", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 39732, "title": "Should navto search opening projects like find all refs to give better info about world or just existing open projects", "labels": ["In Discussion", "Suggestion"]}, {"num": 16271, "title": "Should not issue error on property assignments to function/class declarations in block scopes.", "labels": ["Bug", "Domain: JavaScript"]}, {"num": 6653, "title": "Should not place errors on comments", "labels": ["Bug", "VS Code Tracked", "help wanted"]}, {"num": 4046, "title": "Should not show completion when properties of type literals/interfaces span different lines", "labels": ["Bug", "Domain: Completion Lists", "help wanted"]}, {"num": 32470, "title": "should not throw error at `.d.ts` when `func` + `namespace` has member `default`", "labels": ["Bug"]}, {"num": 25164, "title": "Should prepended project references be recursive?", "labels": ["Discussion"]}, {"num": 24357, "title": "Should resolveJsonModule resolve json files without a .json file extension?", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 34589, "title": "Should the literal number value types of const-asserted arrays' indices be inferred?", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 39354, "title": "Should we set '\"types\": []' for 'tsc init'?", "labels": ["In Discussion", "Suggestion"]}, {"num": 37404, "title": "Should\u00a0create unique\u00a0symbols when\u00a0creating\u00a0properties on\u00a0`module.exports`", "labels": ["Fix Available", "Needs Investigation"]}, {"num": 37403, "title": "Should\u00a0preserve unique\u00a0symbols when\u00a0re\u2011assigning\u00a0`module.exports`", "labels": ["Fix Available", "Needs Investigation", "Rescheduled"]}, {"num": 10219, "title": "show a tooltips on closing braces", "labels": ["API", "Suggestion", "help wanted"]}, {"num": 41171, "title": "Show all JSDoc @typedef properties when forming object of that type", "labels": []}, {"num": 41220, "title": "Show comments from properties referenced via 'keyof T'", "labels": []}, {"num": 40159, "title": "Show constructor jsdoc when constructing a class", "labels": ["Bug", "Domain: Quick Info", "GraceHopperOSD", "help wanted"]}, {"num": 31769, "title": "Show documentation for literals in intellisense", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 9266, "title": "Show inherited comments in quick info", "labels": ["API", "Domain: Quick Info", "Experience Enhancement", "In Discussion", "Suggestion"]}, {"num": 41297, "title": "Show parameter quickinfo at the position of arguments", "labels": []}, {"num": 37395, "title": "Show return type, when hovering `return` statement", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 1630, "title": "Show shape of types in QuickInfo rather than name", "labels": ["Suggestion", "VS Code Tracked", "Visual Studio"]}, {"num": 26023, "title": "Show signature help when overriding/implementing method", "labels": ["Domain: Signature Help", "Experience Enhancement", "Suggestion"]}, {"num": 32283, "title": "Show type info of yield", "labels": ["Domain: Quick Info", "Effort: Moderate", "Experience Enhancement", "GraceHopperOSD", "Needs Proposal", "help wanted"]}, {"num": 29293, "title": "Show unused public properties and methods", "labels": ["In Discussion", "Suggestion"]}, {"num": 29449, "title": "Signature assignability doesn't check for Function-conflicting properties", "labels": ["Bug"]}, {"num": 26832, "title": "Signature help crash \"Cannot read property 'kind' of undefined\"", "labels": ["Needs More Info"]}, {"num": 935, "title": "Signature help for optional members uses superfluous bracketing", "labels": ["Bug", "Visual Studio"]}, {"num": 33328, "title": "Signature help not select correct overload for partially completed function", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 9239, "title": "Signatures of intersection/union types properties", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 38220, "title": "Simple Comparison of Generics not allowed?", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 41123, "title": "Simpler Expression of Complex Type Conditions", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 24146, "title": "Simplify error messages against intersections of weak types", "labels": ["Domain: Error Messages", "Experience Enhancement", "Suggestion"]}, {"num": 25175, "title": "simply logic predicate code fix or suggestion", "labels": ["Domain: Refactorings", "Suggestion", "help wanted"]}, {"num": 28260, "title": "Skip type checking project reference redirect(declaration file from project reference) to improve perf", "labels": ["Domain: Performance", "In Discussion", "Scenario: Monorepos & Cross-Project References", "Suggestion"]}, {"num": 29651, "title": "Skip typechecking; only emit (support `--transpileOnly` in `tsc`, re-open of #4176)", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 38538, "title": "skipLibCheck and exclude do not work under monorepos project", "labels": ["Needs Investigation"]}, {"num": 36503, "title": "SkipLibCheck fails to work in multi-project set-up", "labels": ["Needs Investigation"]}, {"num": 35503, "title": "Slow compilation of tagged templates in a single file", "labels": ["Needs More Info"]}, {"num": 39342, "title": "Slow compilation time for a hello world program (7/8 seconds)", "labels": ["Needs More Info"]}, {"num": 37763, "title": "Slow editing in React Native codebase", "labels": ["Needs More Info"]}, {"num": 18646, "title": "small code change causes 70% build time regression (20s->34s) [strictGenericChecks]", "labels": ["Bug"]}, {"num": 30158, "title": "Smart indentation is wrong following more than one line after JSDoc comments", "labels": ["Bug", "Domain: Formatter", "Domain: JSDoc", "Effort: Moderate", "help wanted"]}, {"num": 39618, "title": "Smart select does not select TypeScript object type", "labels": ["Bug", "Domain: Smart-Select", "GraceHopperOSD", "good first issue", "help wanted"]}, {"num": 28943, "title": "Smarter error messages for JSX accidentally put outside a JSX expression", "labels": ["Domain: Error Messages", "In Discussion", "Suggestion"]}, {"num": 35404, "title": "Smarter errors around `Function.length`", "labels": ["Domain: Error Messages"]}, {"num": 30869, "title": "Smarter flow-typing with || ", "labels": ["Suggestion", "Too Complex"]}, {"num": 39632, "title": "Solution style tsconfig impact in Angular 10", "labels": ["Discussion"]}, {"num": 40074, "title": "some comments are missing when using the compiler API ", "labels": ["Design Limitation"]}, {"num": 8800, "title": "Some comments are removed", "labels": ["Bug", "help wanted"]}, {"num": 1311, "title": "Some comments not emitted - upgrade 1.0.1 to  1.3.0", "labels": ["Bug", "help wanted"]}, {"num": 23727, "title": "Some overloaded signatures never be choose when explicit type parameters are specified", "labels": ["Bug"]}, {"num": 4178, "title": "Some SVG types would benefit from stricter appendChild() overloads", "labels": ["Domain: lib.d.ts", "Suggestion", "help wanted"]}, {"num": 32066, "title": "Some types are incorrectly assignable from a generic distributive conditional type", "labels": ["Bug"]}, {"num": 41083, "title": "Sort import completions by distance from current module", "labels": ["Domain: Auto-import", "Effort: Moderate", "Suggestion", "help wanted"]}, {"num": 41194, "title": "Sort import:  Uncoditionally removes JSX Fragment reference", "labels": []}, {"num": 20183, "title": "Sort jsdoc parameter suggestions by argument position ", "labels": ["Domain: Completion Lists", "GraceHopperOSD", "Suggestion", "VS Code Tracked", "good first issue", "help wanted"]}, {"num": 34099, "title": "Sorting an array removes type inference", "labels": ["Bug"]}, {"num": 41268, "title": "Source code line in diagnostic messages should not contains leading tabs", "labels": []}, {"num": 24876, "title": "Source code transpiles, but emitted declarations filled with errors", "labels": ["Bug", "Domain: Declaration Emit"]}, {"num": 34695, "title": "Source Map includes mapping for line ending characters", "labels": ["Bug"]}, {"num": 30430, "title": "source.organizeImports organizes imports to a sort order that tslint complains about", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 19950, "title": "SourceFile.ambientModuleNames is undefined after transform()", "labels": ["API", "Bug", "help wanted"]}, {"num": 2137, "title": "SourceFileObject.getNamedDeclarations is missing declarations before methods", "labels": ["API", "Bug", "help wanted"]}, {"num": 9627, "title": "Sourcemap - names array empty for all files", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 39170, "title": "sourcemap mapping is generated before node generates newline and indent", "labels": ["Bug", "Rescheduled"]}, {"num": 35307, "title": "sourcemaps not working correctly with static properties", "labels": ["Needs More Info"]}, {"num": 28099, "title": "SourceRoot documentation inconsistent", "labels": ["Docs"]}, {"num": 16739, "title": "Space before parenthesis ", "labels": ["Awaiting More Feedback", "Domain: Formatter", "Suggestion"]}, {"num": 25919, "title": "Special characters in 'enum' type will be compiled to unicode by default", "labels": ["Bug"]}, {"num": 39749, "title": "Specialize JSX error messages for missing properties", "labels": ["Domain: Error Messages", "Domain: JSX/TSX", "Effort: Moderate", "Experience Enhancement", "Fix Available", "help wanted"]}, {"num": 15899, "title": "Specifying --outDir on the CLI causes error TS5055 with declarations", "labels": ["Bug", "help wanted"]}, {"num": 20595, "title": "Specifying lib: DOM and WebWorker should not be mutually exclusive", "labels": ["In Discussion", "Suggestion"]}, {"num": 32166, "title": "Specifying supported TypeScript versions", "labels": ["Bug", "Rescheduled"]}, {"num": 16027, "title": "Speculation about #12596 Allow property (dotted) access syntax for types with string index signatures ", "labels": ["In Discussion", "Suggestion"]}, {"num": 17219, "title": "Spelling correction fixes should not be case-agnostic for two equally weighted options", "labels": ["Bug", "Domain: Error Messages", "Domain: Quick Fixes", "help wanted"]}, {"num": 33432, "title": "Split `Node` type into more appropriate types", "labels": ["Needs Investigation"]}, {"num": 39255, "title": "Split the \"lib.dom.d.ts\" definition file apart", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 26412, "title": "Spread operator fails for object type generics", "labels": ["Bug", "Domain: Error Messages", "help wanted"]}, {"num": 31268, "title": "spread operator for enum", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 32236, "title": "Spread with enum index key, invalid members don't trigger errors", "labels": ["Needs Investigation"]}, {"num": 30129, "title": "spreading generic type disables excess property checking", "labels": ["Bug"]}, {"num": 40478, "title": "Spreading Parameters of ternary function type does not recognize parameter type", "labels": ["Design Limitation"]}, {"num": 27166, "title": "Spreading private property is wrong", "labels": ["Bug"]}, {"num": 39648, "title": "Spreading tuple into generic/type arguments", "labels": ["In Discussion", "Suggestion"]}, {"num": 23823, "title": "Spurious duplicate identifier error while destructuring", "labels": ["Bug", "help wanted"]}, {"num": 7404, "title": "Spurious syntax error for certain switch-case-if scenario", "labels": ["Bug", "help wanted"]}, {"num": 27705, "title": "Stack overflow in long concatenating string", "labels": ["Bug", "Crash"]}, {"num": 16533, "title": "Stack overflow on 'resolveName' for circular default type argument", "labels": ["Bug"]}, {"num": 27433, "title": "Stack overflow within collectDynamicImportOrRequireCalls", "labels": ["Bug", "Crash"]}, {"num": 12561, "title": "Standard package.json key for .ts files", "labels": ["Awaiting More Feedback", "Community Tooling", "Suggestion"]}, {"num": 36582, "title": "Starting overload selection in signature help doesn't account for discriminating arguments", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 10395, "title": "Static class properties defined with square brackets have extra brackets in quick info", "labels": ["Bug", "Domain: Quick Info"]}, {"num": 4628, "title": "static property inheritance complaining when it shouldn't", "labels": ["Committed", "Suggestion"]}, {"num": 28539, "title": "Statically match namespace names using `new Function().name`", "labels": ["In Discussion", "Suggestion"]}, {"num": 5388, "title": "Stdlib typings for typed arrays (and specific errors) need brand fields to improve type safety", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 27311, "title": "Strange \"Cannot use namespace 'Foo' as a type\" error with dummy `declare module \"foo\";` declaration", "labels": ["Bug", "help wanted"]}, {"num": 35964, "title": "Strange \"Object is possibly 'null'\" assumption", "labels": ["Design Limitation"]}, {"num": 32839, "title": "Strange any with export interface and variable of same name", "labels": ["Bug", "Domain: Quick Info"]}, {"num": 36311, "title": "Strange behaviour with assignability and generics", "labels": ["Needs Investigation"]}, {"num": 10564, "title": "Strange boolean-discriminant narrowing with strictNullChecks off", "labels": ["Bug", "Effort: Moderate", "help wanted"]}, {"num": 40247, "title": "Strange intersection/variance behavior", "labels": ["Needs Investigation"]}, {"num": 38826, "title": "strict boolean expressions compilerOption", "labels": ["In Discussion", "Suggestion"]}, {"num": 31105, "title": "Strict equals false type guard doesn't work", "labels": ["Bug"]}, {"num": 20714, "title": "Strict function check failure due to union type with matching parameters in the unioned interfaces", "labels": ["In Discussion", "Suggestion"]}, {"num": 9619, "title": "Strict null checks for Map members", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 30224, "title": "Strict Null: unexpected complaint about type being possibly undefined when checked before", "labels": ["Design Limitation"]}, {"num": 21775, "title": "Strict property initialization (arguably) confused by redefinition of property in subclass", "labels": ["In Discussion", "Suggestion"]}, {"num": 33889, "title": "Strict Reflect.apply Reflect.construct and Function.prototype.apply/call/bind", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 28306, "title": "Strict type-checking on a per-file basis \"@ts-strict\"", "labels": ["In Discussion", "Suggestion"]}, {"num": 18770, "title": "Strict variance and read-only versions of types", "labels": ["In Discussion", "Suggestion"]}, {"num": 31474, "title": "Strict version of Extract for literal union types", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 34645, "title": "Stricter Assignability Checks for Overloaded Functions", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 28671, "title": "strictFunctionTypes prevents an assignment not related to functions", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 25214, "title": "Strictly type a object's values whilst maintaining its keys", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 31202, "title": "strictNullCheck False Posivitve when access propery on created object.", "labels": ["Domain: Control Flow", "Experience Enhancement", "Suggestion"]}, {"num": 17960, "title": "strictNullChecks - property accesses on string index signatures should narrow", "labels": ["Bug"]}, {"num": 36849, "title": "strictNullChecks allows inconsistent indexed type with spread syntax", "labels": ["Bug"]}, {"num": 24091, "title": "strictNullChecks false positives in case clause", "labels": ["Bug"]}, {"num": 14143, "title": "strictNullChecks false-positive when returning or breaking from within loop", "labels": ["Bug"]}, {"num": 15705, "title": "strictNullChecks not recognizing evaluated key in object", "labels": ["Bug"]}, {"num": 27899, "title": "strictPropertyInitialization fails to check definite assignment for static members", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 36302, "title": "strictPropertyInitialization option doesn't work with computed properties", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 27555, "title": "strictPropertyInitialization should consider `return`", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 20911, "title": "strictPropertyInitialization with subclasses that refine the types of properties", "labels": ["In Discussion", "Suggestion"]}, {"num": 26604, "title": "String collisions are not detected when the strings come from enums", "labels": ["Experience Enhancement", "Suggestion", "help wanted"]}, {"num": 40862, "title": "string enum member used as \"computed enum member\" types as number.", "labels": ["Bug"]}, {"num": 32739, "title": "String key-value type in basic types", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 5602, "title": "String Literal refactoring support", "labels": ["Bug", "help wanted"]}, {"num": 9443, "title": "String literal type inconsistency in overload resolution", "labels": ["In Discussion", "Suggestion"]}, {"num": 31001, "title": "String literals widened to string when destructuring function return", "labels": ["Bug"]}, {"num": 9654, "title": "String methods should have `this` parameters in `lib.d.ts`", "labels": ["Suggestion", "help wanted"]}, {"num": 39703, "title": "String union types in props inside generic types", "labels": ["Bug"]}, {"num": 36788, "title": "String#matchAll should return iterable of RegExpExecArray instead of RegExpMatchArray", "labels": ["Design Limitation"]}, {"num": 22378, "title": "String.replace does not accept string | (string, ...any[]) => string replacer", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 41037, "title": "Strings do not have known keys associated with their indexes", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 37144, "title": "Stripping types should include ts-ignore comments", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 37420, "title": "Structural Comparison of Circular Tuples", "labels": ["Bug", "Domain: Conditional Types", "Rescheduled"]}, {"num": 27965, "title": "Subclass method is not allowed (TS2425) if the parent class has a property of type any with the same name", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 26922, "title": "Subsequent builds in Visual Studio 2017 15.9.0 fail with \"Could not find a declaration file for module\"", "labels": ["Needs More Info"]}, {"num": 37756, "title": "SubtleCrypto methods return PromiseLike instead of Promise", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 39105, "title": "Subtype narrowing bug with falsey types (''/0/[])", "labels": ["Bug"]}, {"num": 16464, "title": "Sugar String Enum Initializer", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 40335, "title": "Suggest argument names based on type definition of callback functions", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 28619, "title": "Suggest import nearest current file.", "labels": ["Domain: Completion Lists", "Experience Enhancement", "Suggestion"]}, {"num": 29375, "title": "Suggest renaming file from .ts to .tsx if needed?", "labels": ["Domain: Error Messages", "Experience Enhancement", "Suggestion"]}, {"num": 20339, "title": "Suggest specifying generic as union if candidates are different", "labels": ["Domain: Error Messages", "Needs Proposal", "Suggestion"]}, {"num": 23231, "title": "Suggest type definition install command using yarn when applicable", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 28399, "title": "Suggestion and codefix to add missing cases to switch", "labels": ["Domain: Quick Fixes", "In Discussion", "Suggestion"]}, {"num": 40963, "title": "Suggestion Backlog Slog, 10/1/2020", "labels": ["Design Notes"]}, {"num": 27852, "title": "Suggestion diagnostics show in untyped JS code when regular diagnostics don't", "labels": ["Domain: Error Messages", "Domain: TSServer", "In Discussion", "Suggestion"]}, {"num": 33014, "title": "Suggestion for Dependent-Type-Like Functions: Conservative Narrowing of Generic Indexed Access Result Type", "labels": ["In Discussion", "Suggestion"]}, {"num": 6686, "title": "Suggestion for improving generator and async function type checking", "labels": ["In Discussion", "Suggestion"]}, {"num": 21152, "title": "Suggestion for readonly interface", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 21976, "title": "Suggestion/feature request - enforce static properties/fields ", "labels": ["In Discussion", "Suggestion"]}, {"num": 39231, "title": "Suggestion: \"emitDts\" option for exporting handwritten declarations ", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 13219, "title": "Suggestion: `throws` clause and typed catch clause", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 15402, "title": "Suggestion: a built-in TypedArray interface", "labels": ["Domain: lib.d.ts", "Suggestion", "help wanted"]}, {"num": 22374, "title": "Suggestion: ability to find imports for module", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 39535, "title": "Suggestion: Add a way to hint typescript about basic function flow (call orders)", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 32212, "title": "Suggestion: Add built-in vanilla constructor interface", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 41277, "title": "Suggestion: add flag to notify when awaiting a non-promise", "labels": ["In Discussion", "Suggestion"]}, {"num": 21759, "title": "SUGGESTION: add support for writeonly properties on interfaces", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 1579, "title": "Suggestion: Add the nameof compile-time operator to convert property and function names into strings", "labels": ["Suggestion", "Waiting for TC39"]}, {"num": 39736, "title": "Suggestion: allow `infer T` in type parameter constraint of `type` statement", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 39865, "title": "Suggestion: Allow ES6 export syntax in namespaces", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 2559, "title": "Suggestion: allow instantiation of type aliases", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 23850, "title": "Suggestion: Allow interface to extend conditional type", "labels": ["Bug", "Domain: Error Messages", "help wanted"]}, {"num": 24274, "title": "Suggestion: Allow interfaces to \"implement\" (vs extend) other interfaces", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 15266, "title": "Suggestion: Allow intrinsic elements to vary by component", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 9889, "title": "Suggestion: Allow local types to be declared in interfaces", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 19400, "title": "Suggestion: Allow merging of a wildcard import alias with a compile-time-only type alias of the same name", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 12199, "title": "Suggestion: Allow Types in JS Files", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 33211, "title": "Suggestion: an option to make --showConfig more verbose", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 28172, "title": "Suggestion: Automatically infer argument types in overloaded function implementation", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 8190, "title": "Suggestion: Better error message when unable to resolve modules", "labels": ["Docs"]}, {"num": 38584, "title": "Suggestion: Can we check properties in a more efficient order during structural comparisons?", "labels": ["Domain: Performance", "Needs Investigation"]}, {"num": 21736, "title": "Suggestion: case-sensitive imports", "labels": ["Effort: Moderate", "Suggestion", "help wanted"]}, {"num": 18013, "title": "Suggestion: Change `Diagnostic.file` to be `SourceFileLike` instead of `SourceFile`.", "labels": ["API", "Suggestion", "help wanted"]}, {"num": 29980, "title": "Suggestion: check narrowed type in user-defined type guards", "labels": ["Suggestion", "Too Complex"]}, {"num": 28411, "title": "Suggestion: compiler option to validate \"empty imports\"", "labels": ["In Discussion", "Suggestion"]}, {"num": 35046, "title": "Suggestion: Config files authored in JS should automatically have intellisense support", "labels": ["Suggestion"]}, {"num": 31955, "title": "Suggestion: consolidate generics in union if they match", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 30680, "title": "Suggestion: Const contexts for generic type inference", "labels": ["In Discussion", "Suggestion"]}, {"num": 13923, "title": "Suggestion: DeepReadonly<T> type", "labels": ["Needs More Info", "Suggestion"]}, {"num": 23684, "title": "Suggestion: deprecate `module` keyword in place of `namespace`", "labels": ["In Discussion", "Suggestion"]}, {"num": 33954, "title": "Suggestion: disallow synthetic imports for ES modules", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 7738, "title": "Suggestion: execute property initializer expressions at the expected time", "labels": ["Committed", "Suggestion"]}, {"num": 16656, "title": "suggestion: explicit \"tuple\" syntax", "labels": ["In Discussion", "Suggestion"]}, {"num": 31860, "title": "Suggestion: extract to function expression", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 34983, "title": "Suggestion: flip the assignment direction of generated enums to save some bits", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 22034, "title": "Suggestion: Format markdown inside JSDoc comments.", "labels": ["Awaiting More Feedback", "Domain: Formatter", "Suggestion"]}, {"num": 10, "title": "Suggestion: Generate doc comments in emitted JS", "labels": ["Needs Proposal", "Suggestion", "VS Code Tracked"]}, {"num": 21702, "title": "Suggestion: go-to-definition should go to a base definition if possible.", "labels": ["Domain: Symbol Navigation", "In Discussion", "Suggestion"]}, {"num": 30399, "title": "Suggestion: Improve documentation for compiler options", "labels": ["Docs"]}, {"num": 32452, "title": "Suggestion: Improve type of `constructor` on the instance type of a class", "labels": ["In Discussion", "Suggestion"]}, {"num": 21424, "title": "Suggestion: Inflections", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 31703, "title": "Suggestion: Introduce possibility to control rootDirs resolve order", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 8, "title": "Suggestion: minification", "labels": ["Needs Proposal", "Suggestion", "VS Code Tracked"]}, {"num": 8760, "title": "Suggestion: NODE_PATH support in module resolution", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 39633, "title": "Suggestion: noInferredAny", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 14829, "title": "Suggestion: Noninferential type parameter usage", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 15048, "title": "Suggestion: one-sided or fine-grained type guards", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 36057, "title": "Suggestion: optional globals", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 10077, "title": "Suggestion: output fewer errors for incorrectly implemented interface", "labels": ["Effort: Difficult", "Suggestion", "help wanted"]}, {"num": 39998, "title": "Suggestion: perform excess property checks when spreading an inline object literal", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 35019, "title": "Suggestion: prompt rename after \"convert named imports to namespace imports\"", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 17615, "title": "Suggestion: Provide better APIs to simplify converting CommentRanges into SynthesizedComments", "labels": ["API", "In Discussion", "Suggestion"]}, {"num": 9638, "title": "Suggestion: put prototype in var for better minification", "labels": ["Suggestion", "help wanted"]}, {"num": 11261, "title": "Suggestion: Quick info for `return` keyword to get the function return type", "labels": ["Domain: Quick Info", "Experience Enhancement", "Suggestion"]}, {"num": 15480, "title": "Suggestion: Range as Number type", "labels": ["In Discussion", "Suggestion"]}, {"num": 22315, "title": "Suggestion: readonly method", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 29988, "title": "Suggestion: refactor to \"move to another (existing) file\"", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 37729, "title": "Suggestion: Reference expression type during cast", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 2957, "title": "Suggestion: Reopen static and instance side of classes", "labels": ["In Discussion", "Suggestion"]}, {"num": 38583, "title": "Suggestion: Reorder properties in HtmlAttribute", "labels": ["Domain: Performance", "In Discussion", "Suggestion"]}, {"num": 16910, "title": "SUGGESTION: Revise docs to make adoption faster and easier", "labels": ["Docs"]}, {"num": 38399, "title": "Suggestion: short-circuit type inference for ternary operators when both branches have the same type", "labels": ["Domain: Performance"]}, {"num": 30919, "title": "Suggestion: shorthand for templated type to extend and default to the same type", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 16334, "title": "Suggestion: shorthand syntax for annotating function with type", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 9640, "title": "Suggestion: should non-null assert propagate?", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 29434, "title": "Suggestion: Sort autocomplete importable items by locality to current file", "labels": ["In Discussion", "Suggestion"]}, {"num": 7989, "title": "Suggestion: stricter operators", "labels": ["Effort: Moderate", "Suggestion", "help wanted"]}, {"num": 30723, "title": "Suggestion: support compile time annotations alongside runtime decorators", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 29976, "title": "Suggestion: support Node `require` in ES Modules", "labels": ["In Discussion", "Suggestion"]}, {"num": 19183, "title": "Suggestion: target specific runtimes instead of JS versions", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 21732, "title": "Suggestion: treat `in` operator as type guard which asserts property existence", "labels": ["Committed", "Effort: Moderate", "Suggestion", "help wanted"]}, {"num": 38803, "title": "Suggestion: treat readonly static members of class as namespace members", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 14211, "title": "Suggestion: tsc should display a one line summary", "labels": ["Suggestion", "help wanted"]}, {"num": 22063, "title": "Suggestion: Type annotations and interfaces for function declarations", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 4742, "title": "Suggestion: Type guard generic types", "labels": ["Effort: Moderate", "Suggestion", "help wanted"]}, {"num": 35846, "title": "Suggestion: type narrowing based on user-defined type guards against properties", "labels": ["In Discussion", "Suggestion"]}, {"num": 30809, "title": "Suggestion: Type-check statement to verify type assignability", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 11, "title": "Suggestion: TypeScript Library Project in Visual Studio", "labels": ["Suggestion", "Visual Studio"]}, {"num": 28430, "title": "Suggestion: Uniform Type Predicate, or Concrete Types", "labels": ["In Discussion", "Suggestion"]}, {"num": 364, "title": "Suggestion: Units of measure", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 9252, "title": "Suggestion: Upper-bound generic type constraints", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 7782, "title": "Suggestion: use receiver's declared type arguments as defaults to its class constructor", "labels": ["Effort: Difficult", "Suggestion", "help wanted"]}, {"num": 32694, "title": "Suggestion: Use typeof of declaration to define its type", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 34936, "title": "Suggestion: warn on always-false typeguards", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 38891, "title": "Suggestions for jsx attributes should include =\"\" ", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 35180, "title": "Suggestions for property names don't show available keys", "labels": ["Bug", "Domain: Completion Lists", "Effort: Moderate", "help wanted"]}, {"num": 31244, "title": "Suggestions not accepted when using commit characters", "labels": ["Domain: Completion Lists", "Needs Proposal", "Suggestion"]}, {"num": 20437, "title": "SUGGESTIONS: TSC --diagnostics include timestamps time", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 32121, "title": "Super call of non-method incorrectly allowed if target >= ES6", "labels": ["Bug"]}, {"num": 27957, "title": "Support \".mjs\" input files", "labels": ["In Discussion", "Suggestion"]}, {"num": 35132, "title": "Support \"evolving any\" with forEach / internal functions", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 18535, "title": "Support 'throw' expressions", "labels": ["ES Next", "Suggestion", "Waiting for TC39"]}, {"num": 31984, "title": "Support --incremental with --module AMD", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 12681, "title": "Support @class in JSDoc", "labels": ["Domain: JSDoc", "Domain: JavaScript", "Suggestion", "VS Code Tracked", "help wanted"]}, {"num": 24302, "title": "Support @param tag on function type", "labels": ["Domain: JSDoc", "Domain: Quick Info", "Domain: Signature Help", "In Discussion", "Suggestion"]}, {"num": 19139, "title": "Support @ts-ignore for specific errors", "labels": ["Revisit", "Suggestion"]}, {"num": 25579, "title": "Support @typedef as member of namespace", "labels": ["Domain: JSDoc", "Domain: JavaScript", "In Discussion", "Suggestion", "checkJs"]}, {"num": 18442, "title": "Support `.mjs` output", "labels": ["Domain: ES Modules", "In Discussion", "Suggestion"]}, {"num": 17227, "title": "Support `@abstract` JSDoc tag", "labels": ["Domain: JavaScript", "Experience Enhancement", "Suggestion"]}, {"num": 36101, "title": "Support `@callback` nested parameter types for JSDoc", "labels": ["Bug", "Domain: JSDoc"]}, {"num": 19672, "title": "Support `@const` JSDoc tag ", "labels": ["Domain: JSDoc", "Suggestion", "help wanted"]}, {"num": 36369, "title": "Support `@extends` tag for ES5-style classes", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 31607, "title": "Support `diagnostics` inside `compilerOptions` in combination with `--build`", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 24164, "title": "Support `export { x as default }` in namespace declarations", "labels": ["In Discussion", "Suggestion"]}, {"num": 10725, "title": "Support `readonly` type operator to allow correct definition of `Object.freeze`", "labels": ["In Discussion", "Suggestion"]}, {"num": 1823, "title": "Support `register` to allow users to just require `.ts` files", "labels": ["In Discussion", "Suggestion"]}, {"num": 23405, "title": "Support a @nonnull/@nonnullable JSDoc assertion comment", "labels": ["Committed", "Domain: JSDoc", "Domain: JavaScript", "Suggestion"]}, {"num": 36391, "title": "Support a file blacklist in tsserver configuration options", "labels": ["Domain: TSServer", "In Discussion", "Suggestion"]}, {"num": 32122, "title": "Support abstract mixin classes.", "labels": ["In Discussion", "Suggestion"]}, {"num": 40460, "title": "Support additional trace points", "labels": []}, {"num": 6942, "title": "Support AMD modules in Salsa", "labels": ["Domain: JavaScript", "In Discussion", "Suggestion", "VS Code Tracked"]}, {"num": 29867, "title": "Support async iterable DOM types", "labels": ["Needs Investigation"]}, {"num": 37783, "title": "Support bigint literals in const enums", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 31499, "title": "Support Closure Compiler-style @typedef ", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 1988, "title": "Support column limit in formatter", "labels": ["Suggestion", "help wanted"]}, {"num": 1838, "title": "Support computed properties in destructuring patterns", "labels": ["Bug", "ES6", "help wanted"]}, {"num": 449, "title": "Support conditional compilation", "labels": ["Needs More Info", "Suggestion"]}, {"num": 41114, "title": "Support Const Type Constraint", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 30698, "title": "Support custom typeof functions", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 12502, "title": "support customisable externalHelpersModuleNameText for --importHelpers flag ", "labels": ["In Discussion", "Suggestion"]}, {"num": 38249, "title": "Support declaring @types as the supported route for typings dependencies in the package.json", "labels": ["In Discussion", "Needs Proposal", "Suggestion"]}, {"num": 33367, "title": "support destructuring parameter @param tag in tsdoc", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 39864, "title": "Support either type asserting `self` in classes, or properly ignoring workaround", "labels": ["Bug", "GraceHopperOSD", "help wanted"]}, {"num": 41240, "title": "Support emitting numerics with separators as-is in target: esnext", "labels": []}, {"num": 1009, "title": "Support error message verification in Fourslash ", "labels": ["Bug", "help wanted"]}, {"num": 18609, "title": "Support ES5-style inheritance with Object.create (Salsa)", "labels": ["Domain: JavaScript", "In Discussion", "Suggestion"]}, {"num": 12416, "title": "Support evolving the type with assignments for expando object ", "labels": ["In Discussion", "Suggestion", "VS Code Tracked"]}, {"num": 22205, "title": "Support find-all-references for module.exports", "labels": ["In Discussion", "Suggestion"]}, {"num": 26661, "title": "Support folding multi-line brace-less arrow functions", "labels": ["Awaiting More Feedback", "Domain: Outlining", "Suggestion", "VS Code Tracked"]}, {"num": 17572, "title": "Support for a built-in \"constructable\" type or \"class type\"", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 35822, "title": "Support for all type features in declaration files.", "labels": ["Meta-Issue"]}, {"num": 35873, "title": "Support for co-dependently conditionally typed arguments", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 23952, "title": "Support for custom Automatic Type Acquisition scopes.", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 13156, "title": "Support for ECMAScript 'do'-expressions", "labels": ["ES Next", "Suggestion", "Waiting for TC39"]}, {"num": 33207, "title": "Support for JSDoc interface definition", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 33079, "title": "Support for NodeJS 12.7+ package exports", "labels": ["feature-request"]}, {"num": 2306, "title": "Support for tabs in language service formatter.", "labels": ["API", "Suggestion", "help wanted"]}, {"num": 13135, "title": "Support for type destructuring", "labels": ["In Discussion", "Suggestion"]}, {"num": 911, "title": "Support for wildcards in command line", "labels": ["Suggestion", "help wanted"]}, {"num": 11500, "title": "Support formatting JSDoc comments", "labels": ["Domain: JSDoc", "Suggestion", "VS Code Tracked", "help wanted"]}, {"num": 40149, "title": "Support generics on first class functions", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 10512, "title": "Support html-style comments", "labels": ["Bug", "ES6", "help wanted"]}, {"num": 38591, "title": "Support Implicit Generics Inference", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 39595, "title": "Support inferring rest args that are not at the end of the function's args", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 33471, "title": "Support Intellisense for string/number literals in a widened array", "labels": ["Experience Enhancement", "Has Repro", "Suggestion"]}, {"num": 41299, "title": "Support Intl.NumberFormat.formatToParts in ES2018", "labels": []}, {"num": 14275, "title": "Support JSDoc `@function` ", "labels": ["Committed", "Domain: JSDoc", "Suggestion", "VS Code Tracked"]}, {"num": 15715, "title": "Support JSDoc `@property`", "labels": ["Committed", "Domain: JSDoc", "Domain: JavaScript", "Suggestion"]}, {"num": 15217, "title": "Support jsx mode \"string\"", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 35929, "title": "Support JSX transformations with custom jsxFactory", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 35745, "title": "Support known possible keys in Object.entries and Object.fromEntries", "labels": ["In Discussion", "Suggestion"]}, {"num": 40575, "title": "support lazy type inference: infer type", "labels": ["Declined", "Suggestion"]}, {"num": 23188, "title": "Support locally scoped type alias nodes", "labels": ["In Discussion", "Suggestion"]}, {"num": 31282, "title": "support match for type infer", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 22991, "title": "Support max-line-length in organize imports", "labels": ["Domain: Formatter", "Domain: Organize Imports", "Experience Enhancement", "Suggestion"]}, {"num": 3802, "title": "Support merging classes and modules across files", "labels": ["Suggestion", "good first issue", "help wanted"]}, {"num": 35356, "title": "Support mixins for abstract classes", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 30235, "title": "Support multi-threaded compilation for --build", "labels": ["Awaiting More Feedback", "Domain: tsc -b", "Scenario: Monorepos & Cross-Project References", "Suggestion"]}, {"num": 37733, "title": "Support non-constructor JSX factory functions", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 26277, "title": "Support open-ended unions", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 14107, "title": "Support overload resolution with type union arguments", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 2000, "title": "Support override keyword on class methods", "labels": ["Add a Flag", "Revisit", "Suggestion"]}, {"num": 29237, "title": "Support overriding lib (e.g. lib.dom.d.ts) paths", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 38106, "title": "Support parsing TSDoc string comments ", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 37990, "title": "Support PointerEvent.prototype.getCoalescedEvents", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 10777, "title": "Support property decorators for shorthand constructor-parameter syntax", "labels": ["Bug"]}, {"num": 17718, "title": "Support proposed ES Next \"|>\" pipeline operator", "labels": ["ES Next", "Suggestion", "Waiting for TC39"]}, {"num": 36285, "title": "Support safe index access for noImplicitAny", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 202, "title": "Support some non-structural (nominal) type matching", "labels": ["In Discussion", "Suggestion"]}, {"num": 20843, "title": "Support string literal completions inside failed call", "labels": ["Domain: Completion Lists", "Experience Enhancement", "Suggestion"]}, {"num": 32705, "title": "Support string types in dynamic import types.  ", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 35916, "title": "Support Type Acquisition From Npx Shebang", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 20077, "title": "Support typedef inheritance with JSDoc", "labels": ["Domain: JSDoc", "In Discussion", "Suggestion"]}, {"num": 39902, "title": "Support typeof this for cloning", "labels": []}, {"num": 38784, "title": "Support type\u00a0checking `.cjs`\u00a0files", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 32214, "title": "Support Unicode RegExp property escapes", "labels": ["In Discussion", "Suggestion"]}, {"num": 26763, "title": "Support using --module and --outDir flags in conjunction with --build", "labels": ["In Discussion", "Suggestion"]}, {"num": 11833, "title": "Support xml namespaces in JSX", "labels": ["Awaiting More Feedback", "Suggestion", "VS Code Tracked"]}, {"num": 19269, "title": "Support yarn in `Install @types/<package>` code fix", "labels": ["Awaiting More Feedback", "Domain: Quick Fixes", "Suggestion"]}, {"num": 38435, "title": "Supporting Efficient Semantic Highlighting", "labels": ["Committed", "Fix Available", "Suggestion"]}, {"num": 35010, "title": "Support\u00a0ES `export\u00a0<default>\u00a0from`\u00a0form", "labels": ["Suggestion", "Waiting for TC39"]}, {"num": 36813, "title": "Support\u00a0symbol\u00a0properties on\u00a0namespaces", "labels": ["In Discussion", "Suggestion"]}, {"num": 40594, "title": "Support\u00a0\u201cArbitrary module\u00a0namespace identifier\u00a0names\u201d", "labels": ["ES Next", "Waiting for TC39"]}, {"num": 18319, "title": "Surprising `Not all code paths return a value`", "labels": ["Suggestion", "help wanted"]}, {"num": 24001, "title": "SVG interfaces missing", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 34787, "title": "Switch default for `useDefineForClassFields` in ESNext", "labels": ["Breaking Change", "ES Next", "Rescheduled", "Suggestion"]}, {"num": 38686, "title": "Switch statement does not flag non-comparable cases with non-overlapping literal and non-literal union types", "labels": ["Bug"]}, {"num": 30561, "title": "Symbol definition improvement", "labels": ["In Discussion", "Suggestion"]}, {"num": 28512, "title": "Symbol display of namespace-function merged symbol at value use should just mention function", "labels": ["Bug", "Domain: Quick Info"]}, {"num": 36876, "title": "Symbol type is incorrectly generalized when used as a property value of an object literal", "labels": ["Needs Investigation"]}, {"num": 38617, "title": "symbol type not match", "labels": ["Design Limitation"]}, {"num": 37937, "title": "Symbol type stripped on deferred import", "labels": ["Bug", "Rescheduled"]}, {"num": 38180, "title": "Symbols from lodash are offered to be auto-imported in code actions, but not in autocompletion", "labels": ["Bug", "Domain: Auto-import"]}, {"num": 35562, "title": "Symbols in const assertions should be considered unique", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 29459, "title": "symbolToName does handle exports of namespaces", "labels": ["Bug", "Domain: Declaration Emit"]}, {"num": 33945, "title": "Symlinked repo gives TS2717: Subsequent property declarations must have the same type.", "labels": ["Needs More Info", "Rescheduled"]}, {"num": 9091, "title": "Symlinks not resolved for `/// <reference path=\"...\" />`", "labels": ["Bug"]}, {"num": 30674, "title": "Synchronize unsaved config files with the TS Server", "labels": ["Suggestion"]}, {"num": 40136, "title": "synchronizeProjectList returns an entry with an undefined fileName if there is a missing base tsconfig.json", "labels": ["Bug", "Domain: TSServer", "Fix Available"]}, {"num": 4637, "title": "Syntax coloring as server service", "labels": ["API", "Suggestion", "help wanted"]}, {"num": 37637, "title": "Syntax error in a union type which contains a callback type", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 39181, "title": "Syntax error when lowering object rest into Object.assign", "labels": ["Bug", "Fix Available", "Rescheduled"]}, {"num": 30572, "title": "syntax to control over distributivness", "labels": ["In Discussion", "Suggestion"]}, {"num": 4718, "title": "sys.readFile for Node.js: the encoding parameter is ignored, so charset compiler option is ignored on Node.js", "labels": ["Bug", "help wanted"]}, {"num": 39157, "title": "System becomes unusable when TS starts rebuild", "labels": ["Needs More Info"]}, {"num": 37429, "title": "System or AMD module with outFile and dynamic import incorrect", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 39608, "title": "SystemJS transformer use outdated information leads to wrong result", "labels": ["Needs Investigation"]}, {"num": 35546, "title": "T implicitly has type 'any' because it does not have a type annotation and is referenced directly or indirectly in its own initializer", "labels": ["Design Limitation"]}, {"num": 37663, "title": "T | (() => T) ", "labels": ["Bug"]}, {"num": 3841, "title": "T.constructor should be of type T", "labels": ["In Discussion", "Suggestion"]}, {"num": 27456, "title": "T[K] is not assignable to NonNullable<T>[K] even when T is nonnull (regression)", "labels": ["Needs More Info"]}, {"num": 4895, "title": "Tag types", "labels": ["Discussion"]}, {"num": 22046, "title": "Tagged union types aren't narrowed in for/while loop", "labels": ["Bug"]}, {"num": 20558, "title": "Takes a while with high memory to calculate highly recursive types with intersections", "labels": ["Bug"]}, {"num": 8616, "title": "Taking all overloaded methods from parent class with 'using' statement.", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 23251, "title": "Targeting es3 or es5 produces functions with incorrect `function.length` when using initializers", "labels": ["Bug", "ES6"]}, {"num": 30421, "title": "TDZ violation of canProdiceDiagnostic (sic)", "labels": ["Bug"]}, {"num": 36448, "title": "Template decorators.", "labels": ["Needs Investigation"]}, {"num": 41149, "title": "Template Literal with infer does not handle surrogate pairs", "labels": []}, {"num": 27460, "title": "Template strings are cached incorrectly", "labels": ["Bug", "ES6"]}, {"num": 32941, "title": "Template tag constraints not displayed in vscode intellisense", "labels": ["Needs Investigation"]}, {"num": 38569, "title": "templated function with multiple signatures does not have options merged for autocomplete.", "labels": ["Bug", "Domain: Completion Lists"]}, {"num": 37452, "title": "Ternary operator with precondition does not compile: Object is possibly 'undefined'.", "labels": ["Design Limitation"]}, {"num": 25562, "title": "Terse mode output from `tsc --build`", "labels": ["In Discussion", "Suggestion"]}, {"num": 32954, "title": "test-262 integration", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 28358, "title": "The 'Convert to ES6 Module' in the TS language support has an aftereffect.", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 29172, "title": "The `compilerOptions.outDir` config is incorrectly resolved when in a shareable config", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 15253, "title": "The check \"Parameter cannot be referenced in its initializer\" for default parameters is too strict", "labels": ["Bug"]}, {"num": 31369, "title": "The current 1.8 spec should feature a more prominent warning about being outdated", "labels": ["Bug"]}, {"num": 32435, "title": "The dom.iterable lib contains many interfaces that should also be in webworker", "labels": ["Bug"]}, {"num": 8274, "title": "The error \"Object is possibly null or undefined\" is ambiguous.", "labels": ["Bug", "Domain: Error Messages", "good first issue", "help wanted"]}, {"num": 39179, "title": "The expression is not callable", "labels": ["Design Limitation"]}, {"num": 29196, "title": "The function that async function return can not infer when type definition mixed", "labels": ["Bug", "Domain: Contextual Types"]}, {"num": 31670, "title": "The future of the \"private\" keyword", "labels": ["Discussion"]}, {"num": 18295, "title": "The language service does not resolve symbolic links", "labels": ["API", "Bug"]}, {"num": 19189, "title": "The MediaKeySessionConfiguration type definition misses the \"sessionTypes\" property", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 40502, "title": "The presence of a `jsxImportSource` pragma or compiler option should implicitly include the types of the target module", "labels": ["Bug"]}, {"num": 31712, "title": "The Symbol interface of the compiler is undocumented", "labels": ["Docs"]}, {"num": 29052, "title": "The type of Document.documentElement could be SVGSVGElement", "labels": ["Revisit", "Suggestion"]}, {"num": 37847, "title": "the type of super() should be instance, not void", "labels": ["Needs Investigation"]}, {"num": 22058, "title": "this any typed in some JS object literals ", "labels": ["Bug", "Domain: JavaScript", "VS Code Tracked"]}, {"num": 17026, "title": "this is any type in class property assignment to function", "labels": ["Awaiting More Feedback", "Domain: JavaScript", "Suggestion", "VS Code Tracked"]}, {"num": 30461, "title": "This narrowing typeguard effect bleeds into subsequent statments on a type with bivariant  type-parameter ", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 31215, "title": "this parameter dropped from JSDoc signatures", "labels": ["Bug", "Domain: JSDoc"]}, {"num": 36005, "title": "this type in conditional type false clause is incorrectly typed", "labels": ["Bug"]}, {"num": 10288, "title": "This-function parameters must be specified in caller *and* callee, even for methods", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 11801, "title": "ThisKeyword in isPartOfExpression", "labels": ["Bug"]}, {"num": 38482, "title": "ThisParameterType not resolved in Generic Class", "labels": ["Needs Investigation"]}, {"num": 16699, "title": "ThisType for Ember.computed and Ember.observer", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 37860, "title": "ThisType intellisense does not agree with TypeScript code validator", "labels": ["Bug", "Domain: Completion Lists"]}, {"num": 39848, "title": "ThisType would disturb  Generics' inferring type when assign an expression to a type variable", "labels": ["Needs Investigation"]}, {"num": 40317, "title": "Tolerate invalid identifier syntax errors in list parsing", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 23738, "title": "Tooltip for function overloaded to mimic variadic types infers wrong overload when called with trailing comma", "labels": ["Bug", "Domain: Quick Info", "help wanted"]}, {"num": 31940, "title": "Tooltips / IntelliSense: Don't resolve type aliases (aka \"semantic sugar\") set explicitly", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 37402, "title": "Top Level \"for await\" not supported, but should be", "labels": ["Bug", "help wanted"]}, {"num": 31826, "title": "TouchList is missing Symbol.iterator, can't use with 'for..of'", "labels": ["Bug"]}, {"num": 25804, "title": "Track constraints for index operator (and possibly other type operators)", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 22789, "title": "Track expanded support for more multi-location diagnostic messages", "labels": ["Domain: Error Messages", "Domain: Related Error Spans", "Meta-Issue"]}, {"num": 18217, "title": "Tracking invalid type assertions", "labels": ["Infrastructure"]}, {"num": 9998, "title": "Trade-offs in Control Flow Analysis", "labels": ["Discussion"]}, {"num": 40553, "title": "trailing comma kept in object notation output for es5 and es3", "labels": ["Bug", "Website"]}, {"num": 7938, "title": "Trailing commas are not removed from arrays when target is ES3", "labels": ["Bug"]}, {"num": 22399, "title": "Trailing comments shouldn't be kept when refactoring multiple statements", "labels": ["Bug", "Domain: Refactorings", "Effort: Moderate", "help wanted"]}, {"num": 6982, "title": "Trailing trivia dropped from open curly brace", "labels": ["Bug", "help wanted"]}, {"num": 10385, "title": "Trailing trivia removed for some object properties", "labels": ["Bug", "Domain: Comment Emit"]}, {"num": 17421, "title": "Trailing Whitespace in Comments Not Preserved", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 38723, "title": "transferable streams is missing", "labels": ["Bug", "Domain: lib.d.ts", "GraceHopperOSD", "help wanted"]}, {"num": 27272, "title": "Transform generic of union to union of generic type.", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 40603, "title": "Transforming ImportDeclaration or ExportDeclaration causes type specifiers to be output in js files", "labels": ["Needs Investigation"]}, {"num": 32619, "title": "Translate JSX elements based on objects", "labels": ["Awaiting More Feedback", "Domain: JSX/TSX", "Suggestion"]}, {"num": 17783, "title": "Transpile of `export enum` should use `export let`?", "labels": ["Bug", "help wanted"]}, {"num": 14769, "title": "Transpile problem: constructor property of extended class has enumerable:true, apparent with for-in loops", "labels": ["Bug", "ES6"]}, {"num": 15833, "title": "Transpile to multiple targets at once", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 39744, "title": "Transpiled template literals behave incorrectly", "labels": ["Needs Investigation"]}, {"num": 22782, "title": "transpileModule doesn't emit correct metadata of return type for async function", "labels": ["Bug", "Domain: Decorators", "help wanted"]}, {"num": 35697, "title": "Transpiling async/await to generators instead of es6-Generator-function for es6", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 31621, "title": "Transpiling async/await to promises instead of generators for es5", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 12400, "title": "Treating `undefined` parameters as optional", "labels": ["Committed", "Suggestion"]}, {"num": 40229, "title": "Treatment of recursive tuples that utilize type spread.", "labels": ["Needs Investigation"]}, {"num": 9116, "title": "Triple slash reference should include extension '.d.ts' or not?", "labels": ["Bug", "VS Code Tracked", "help wanted"]}, {"num": 35365, "title": "Triple slash type reference doesn't use baseUrl/typeRoots", "labels": ["Bug"]}, {"num": 33416, "title": "Trouble implementing .then", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 19541, "title": "Try enforcing contextual type of array literal elements", "labels": ["Breaking Change", "Committed", "Suggestion"]}, {"num": 18181, "title": "ts 2.5 changes default behaviour of the tsserver method Project#getFileNames", "labels": ["API", "Bug", "help wanted"]}, {"num": 35875, "title": "TS 2535 when using const enum values derived from other const enum values", "labels": ["In Discussion", "Suggestion"]}, {"num": 30712, "title": "TS 3.4: Error when passing dynamically imported generic type as a function argument", "labels": ["Bug"]}, {"num": 34594, "title": "TS 3.7: optional chaining output is introducing a local variable", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 34596, "title": "TS 3.7: unlike `x is T`, `asserts x is T` cannot close over generics defined in outer scopes", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 38593, "title": "TS 3.9+ missing `registerProperty` method in `CSS`", "labels": ["Bug", "Domain: lib.d.ts", "GraceHopperOSD", "help wanted"]}, {"num": 38910, "title": "TS 3.9.3 breaks HOC around generic class-based components that worked with TS 3.8.3", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 33950, "title": "TS adds unexpected reference to outDir in d.ts", "labels": ["Needs More Info"]}, {"num": 40644, "title": "TS allows undefined properties on class instance to be called or assigned to variables that don't have undefined in their type", "labels": ["Design Limitation"]}, {"num": 19630, "title": "TS auto import should support configuring whether a star or a qualified import is used.", "labels": ["Awaiting More Feedback", "Suggestion", "VS Code Tracked"]}, {"num": 41142, "title": "TS auto-complete does not correctly understand parameter spread", "labels": ["Bug", "Domain: Completion Lists"]}, {"num": 29821, "title": "TS doesn't see when we add symbol properties to functions. ", "labels": ["Bug"]}, {"num": 28648, "title": "ts error should better explain that import is a reserved keyword for a function name", "labels": ["Domain: Error Messages", "Effort: Moderate", "Experience Enhancement", "Suggestion"]}, {"num": 30406, "title": "TS fails to understand guard for Array.prototype.pop()", "labels": ["Design Limitation"]}, {"num": 15819, "title": "TS generates \"use strict\" in front of everything, this makes impossible to use its output for Task Runner Explorer without touching the output manually (or by script)", "labels": ["Bug"]}, {"num": 36624, "title": "TS importModuleSpecifier could work better for lerna monorepos with libs only", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 39797, "title": "TS infer type for class static field with error", "labels": ["Bug", "Fix Available"]}, {"num": 29707, "title": "TS is overly picky when declaring a class constructor type", "labels": ["Bug", "good first issue", "help wanted"]}, {"num": 32647, "title": "TS Language Server: JSX Attribute types autocompletion", "labels": ["Awaiting More Feedback", "Domain: Completion Lists", "Domain: JSX/TSX", "Suggestion"]}, {"num": 9900, "title": "TS losing optional properties when used with index signature and generics", "labels": ["Bug"]}, {"num": 26179, "title": "TS may parse type parameter lists as JSX", "labels": ["Bug", "Domain: JSX/TSX"]}, {"num": 20920, "title": "TS Proposal : \"Interface incorrectly extends interface\" - sub-interface method overload OR override ?", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 27623, "title": "TS Server API proposal: Commit Characters", "labels": ["Domain: TSServer", "In Discussion", "Suggestion"]}, {"num": 36664, "title": "TS Server command to get inverse dependencies of file", "labels": ["Committed", "Suggestion"]}, {"num": 38147, "title": "TS Server fatal error:  Cannot read property 'flags' of undefined", "labels": ["Bug", "Needs More Info"]}, {"num": 39455, "title": "TS Server fatal error:  Cannot read property 'get' of undefined", "labels": ["Needs More Info"]}, {"num": 39200, "title": "TS Server fatal error:  Cannot read property 'get' of undefined", "labels": ["Needs More Info"]}, {"num": 38837, "title": "TS Server fatal error:  Cannot read property 'get' of undefined", "labels": ["Needs More Info"]}, {"num": 38693, "title": "TS Server fatal error:  Cannot read property 'length' of undefined", "labels": ["Needs More Info"]}, {"num": 41092, "title": "TS Server fatal error:  Cannot read property 'toLowerCase' of undefined", "labels": ["Needs More Info"]}, {"num": 38933, "title": "TS Server fatal error:  Debug Failure.", "labels": ["Needs More Info"]}, {"num": 38644, "title": "TS Server fatal error:  Debug Failure.", "labels": ["Needs More Info"]}, {"num": 38505, "title": "TS Server fatal error:  Debug Failure.", "labels": ["Needs More Info"]}, {"num": 38165, "title": "TS Server fatal error:  Debug Failure.", "labels": ["Needs More Info"]}, {"num": 37669, "title": "TS Server fatal error:  Debug Failure.", "labels": ["Needs More Info"]}, {"num": 39202, "title": "TS Server fatal error:  Debug Failure. Expected -1 >= 0", "labels": ["Needs More Info"]}, {"num": 40098, "title": "TS Server fatal error:  Debug Failure. False expression.", "labels": ["Needs Investigation"]}, {"num": 40021, "title": "TS Server fatal error:  Debug Failure. False expression.", "labels": ["Needs More Info"]}, {"num": 39430, "title": "TS Server fatal error:  Debug Failure. False expression.", "labels": ["Needs Investigation", "Needs More Info"]}, {"num": 39237, "title": "TS Server fatal error:  Debug Failure. False expression.", "labels": ["Bug", "Needs More Info", "Rescheduled"]}, {"num": 39115, "title": "TS Server fatal error:  Debug Failure. False expression.", "labels": ["Needs More Info"]}, {"num": 38789, "title": "TS Server fatal error:  Debug Failure. False expression.", "labels": ["Needs More Info"]}, {"num": 38559, "title": "TS Server fatal error:  Debug Failure. False expression.", "labels": ["Needs More Info"]}, {"num": 38365, "title": "TS Server fatal error:  Debug Failure. False expression.", "labels": ["Needs More Info"]}, {"num": 37759, "title": "TS Server fatal error:  Debug Failure. False expression.", "labels": ["Needs More Info", "Rescheduled"]}, {"num": 37358, "title": "TS Server fatal error:  Debug Failure. False expression.", "labels": ["Needs More Info"]}, {"num": 37355, "title": "TS Server fatal error:  Debug Failure. False expression.", "labels": ["Needs More Info"]}, {"num": 40066, "title": "TS Server fatal error:  Debug Failure. Unexpected node.", "labels": ["Bug"]}, {"num": 39321, "title": "TS Server fatal error:  Maximum call stack size exceeded", "labels": ["Needs More Info"]}, {"num": 39124, "title": "TS Server fatal error:  Maximum call stack size exceeded", "labels": ["Needs More Info"]}, {"num": 39288, "title": "TS Server fatal error:  No Project.", "labels": ["Needs Investigation"]}, {"num": 40144, "title": "TS Server fatal error:  path.replace is not a function", "labels": ["Needs More Info"]}, {"num": 40008, "title": "TS Server fatal error:  path.replace is not a function", "labels": ["Bug"]}, {"num": 38828, "title": "TS Server fatal error:  path.replace is not a function", "labels": ["Needs More Info"]}, {"num": 37939, "title": "TS Server fatal error:  re.test is not a function", "labels": ["Needs More Info"]}, {"num": 39704, "title": "TS Server fatal error: Debug Failure. False expression.", "labels": ["Needs More Info"]}, {"num": 39338, "title": "TS Server fatal error: Debug Failure. False expression.", "labels": ["Needs More Info"]}, {"num": 28723, "title": "TS Server performance 10-50mb files", "labels": ["Domain: Performance", "Domain: TSServer", "Needs Investigation"]}, {"num": 18836, "title": "TS Server: compilerOptionsForInferredProjects does not seem to use plugins property", "labels": ["Bug"]}, {"num": 15378, "title": "TS Server: Ignore requests that land in external files", "labels": ["Bug"]}, {"num": 18849, "title": "TS Server: Send error event when a plugin fails to load", "labels": ["Bug", "VS Code Tracked"]}, {"num": 38654, "title": "TS Sever: find all references didn't find ref forms like `typeof import(\"...\")`", "labels": ["Bug"]}, {"num": 36680, "title": "TS Spec doesn't match implementation re method signature definitions", "labels": ["Docs"]}, {"num": 39085, "title": "TS variable type changes depending on whether typing triggers intellisense or ctrl+space triggers", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 31131, "title": "TS with .js files and JSDoc: type is found, displayed and used - despite \"TS2304: Cannot find name XYZ\"", "labels": ["Domain: JSDoc", "Needs Investigation", "checkJs"]}, {"num": 24380, "title": "ts.createJsxOpeningElement throws `Debug Failure. False expression.`", "labels": ["API", "Bug"]}, {"num": 31372, "title": "TS2322 strictNullChecks JSDoc: optional value is not optional on destructuring with default values", "labels": ["Needs More Info"]}, {"num": 38359, "title": "TS2345 when calling a superclass' method with a conditional type parameter from a parameterized subclass", "labels": ["Bug"]}, {"num": 32627, "title": "ts2367 Comparing non-comparable types not detected with optional property", "labels": ["In Discussion", "Suggestion"]}, {"num": 27910, "title": "TS2367: This condition will always return 'false' since the types 'Constructor<T>' and 'typeof Child' have no overlap.", "labels": ["Domain: Error Messages", "Experience Enhancement", "GraceHopperOSD", "Suggestion", "good first issue", "help wanted"]}, {"num": 33927, "title": "TS2377 reported for constructors that unconditionally throw or\u00a0use\u00a0return\u00a0override", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 29138, "title": "TS2409 is an invalid error.", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 35260, "title": "TS2532 Compound null check, object cannot be undefined", "labels": ["Design Limitation"]}, {"num": 36631, "title": "TS2536 thown when using keyof on a property of a generic type as key", "labels": ["Bug"]}, {"num": 37209, "title": "TS2589: Type instantiation is excessively deep and possibly infinite caused by non recursive generics when using \"npm link\"", "labels": ["Needs Investigation"]}, {"num": 37722, "title": "TS2708: Cannot use namespace 'LazyCookie' as a value.", "labels": ["Bug", "Rescheduled"]}, {"num": 29197, "title": "TS2739: Type  is missing the following properties from type", "labels": ["Bug", "Domain: Contextual Types"]}, {"num": 37494, "title": "TS2769 on typing with enum after switch to strict mode", "labels": ["Needs More Info"]}, {"num": 33611, "title": "TS3.6 regression: Map constructor overloads", "labels": ["Needs Investigation"]}, {"num": 30598, "title": "TS4078 brings for destructured varaible, but not for just variable", "labels": ["Bug"]}, {"num": 41020, "title": "TS6059 diagnostic appears inconsistently", "labels": ["Bug", "help wanted"]}, {"num": 38893, "title": "TS: Option to not show imports in references search", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 25600, "title": "tsc --build / Project References Feedback & Discussion", "labels": ["Discussion", "Scenario: Monorepos & Cross-Project References"]}, {"num": 4971, "title": "tsc --version shows 1.5.3 after upgrade to 1.6?", "labels": ["Bug", "Visual Studio"]}, {"num": 34119, "title": "tsc --watch initial build 3x slower than tsc", "labels": ["Domain: Performance", "Needs Investigation", "Rescheduled"]}, {"num": 20258, "title": "tsc --watch should listen for stdin requests to transpile on demand", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 32351, "title": "tsc -w Does not clear screen", "labels": ["Needs More Info"]}, {"num": 27702, "title": "tsc -w won't recompile when add new files.", "labels": ["Needs More Info"]}, {"num": 33562, "title": "tsc 3.6.3: `Promise.all` breaks with some union type", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 32573, "title": "tsc and tsserver have different ideas of excessively deep types", "labels": ["Needs Investigation"]}, {"num": 13280, "title": "tsc CLI: option to always exit with 0 exit code", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 9743, "title": "TSC command result do not have newline symbol [MAC/UNIX]", "labels": ["Bug", "help wanted"]}, {"num": 29725, "title": "tsc counts errors twice", "labels": ["Bug"]}, {"num": 29480, "title": "tsc does not use amd-module name when emitting dynamic imports", "labels": ["Awaiting More Feedback", "Domain: JS Emit", "Suggestion"]}, {"num": 28432, "title": "TSC fails to emit required files when run below node_modules", "labels": ["In Discussion", "Suggestion"]}, {"num": 29518, "title": "tsc fails when node_modules is symlinked to a target folder not named node_modules", "labels": ["Bug"]}, {"num": 30088, "title": "tsc gets confused after assigning to module.exports - Property 'filename' does not exist on type", "labels": ["Needs Investigation"]}, {"num": 20862, "title": "tsc includes previous output in result when allowJs is enabled and \"exclude\" is non-empty", "labels": ["In Discussion", "Suggestion"]}, {"num": 6399, "title": "tsc removes comments preceding 'export = ...' unless extra newline follows the comment", "labels": ["Bug", "help wanted"]}, {"num": 39811, "title": "tsc reports error that LS does not", "labels": ["Bug", "Rescheduled"]}, {"num": 26982, "title": "TSC should error when emitting unsupported regex flags for legacy targets", "labels": ["In Discussion", "Suggestion"]}, {"num": 29949, "title": "tsc, tsserver: hangs with large union type and object spread in React HOC (strict mode)", "labels": ["Bug", "Domain: Big Unions", "Rescheduled"]}, {"num": 41203, "title": "tsc: Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory", "labels": []}, {"num": 29950, "title": "tsconfig - Ignore errors by ids", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 39540, "title": "tsconfig extend field should be more user friendly", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 36922, "title": "tsconfig paths not work if dir name start with dot.", "labels": ["Bug"]}, {"num": 33526, "title": "tsconfig.json exclude doesn't support specific file path", "labels": ["Needs More Info"]}, {"num": 11194, "title": "tsconfig.json options not applied if files section doesn't use extensions", "labels": ["Bug", "VS Code Tracked"]}, {"num": 37884, "title": "tsconfig.json should support multiple configurations", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 28073, "title": "tslib is missing when I set target to \"esnext\"", "labels": ["Bug"]}, {"num": 17089, "title": "tslib is polluting window object", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 37548, "title": "TSLint named-imports-order and ESLint sort-imports don't order special chars (_) the same as organizeImports", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 38738, "title": "TSServer Completions - Context Needed", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 14367, "title": "tsserver does not include typename in response to \"implemention\"-requests", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 36528, "title": "tsserver exited unexpectedly", "labels": ["Needs More Info"]}, {"num": 31248, "title": "TSServer High CPU usage", "labels": ["Domain: Performance", "Needs More Info"]}, {"num": 29036, "title": "TSServer navtree \u2014 Way to differentiate function declarations from function expressions", "labels": ["API", "Domain: TSServer", "In Discussion", "Suggestion"]}, {"num": 30618, "title": "tsserver never ends loading intellisense", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 37741, "title": "tsserver not providing semantic diagnostics for files included in other subproject's `tsconfig.json`", "labels": ["Needs More Info"]}, {"num": 40872, "title": "Tsserver plugin question ", "labels": ["Needs Investigation"]}, {"num": 37821, "title": "tsserver protocol is missing notification message type. (maybe?)", "labels": ["Needs Investigation"]}, {"num": 31234, "title": "TSServer should expose tsconfig", "labels": ["API", "Needs Proposal", "Suggestion"]}, {"num": 39459, "title": "tsserver should implement the Language Server Protocol ", "labels": ["In Discussion", "Suggestion"]}, {"num": 10493, "title": "TSServer should report status", "labels": ["API", "Suggestion", "VS Code Tracked", "help wanted"]}, {"num": 22654, "title": "tsserver shouldn't assume that npm is in the same directory as node", "labels": ["Bug", "help wanted"]}, {"num": 23924, "title": "tsserver shows 'No such file or directory' error for npm path", "labels": ["Bug", "help wanted"]}, {"num": 29536, "title": "tsserver signals TS7017 incorrectly when using a symbol-indexed property", "labels": ["Bug", "Domain: TSServer"]}, {"num": 32039, "title": "tsserver unable to find tsconfig.json regardless of location relative to source files", "labels": ["Needs More Info"]}, {"num": 38504, "title": "TSServer using 100%+ CPU breaking Intellisense, import suggestions etc", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 30034, "title": "tsserver.js using too much memory", "labels": ["Needs More Info"]}, {"num": 36394, "title": "tsserver.js/typingsInstaller.js is watching ignored directories (causing CPU load)", "labels": ["Fix Available"]}, {"num": 2850, "title": "TSServer: 'quickInfo' request should return symbol display parts as completion does", "labels": ["Effort: Moderate", "Suggestion", "VS Code Tracked", "help wanted"]}, {"num": 29051, "title": "tsserver: deprecate getSupportedCodeFixes, add fixable property to Diagnostic", "labels": ["API", "Domain: Quick Fixes", "In Discussion", "Suggestion"]}, {"num": 32989, "title": "TSServer: Find all reference for per overloaded function type", "labels": ["Awaiting More Feedback", "Domain: Refactorings", "Suggestion"]}, {"num": 35096, "title": "TSServer: Refactor trigger reason", "labels": ["Domain: Refactorings", "Suggestion"]}, {"num": 39071, "title": "tsserver: saveto command should also save inferred (\"virtual\") tsconfig", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 25207, "title": "TSServer: snippet completions", "labels": ["Domain: TSServer", "In Discussion", "Suggestion", "VS Code Tracked"]}, {"num": 27940, "title": "TSX not compiling when changed, but compileOnSave is enabled", "labels": ["Needs More Info"]}, {"num": 10040, "title": "TSX related formatting bugs", "labels": ["Bug", "Domain: Formatter", "help wanted"]}, {"num": 40269, "title": "Tuple + Record Intersection Assignment Compatibility Inconsistency", "labels": ["Needs Investigation"]}, {"num": 34865, "title": "tuple inference in array vs rest", "labels": ["Design Limitation"]}, {"num": 26058, "title": "Tuple iteration and merging", "labels": ["In Discussion", "Suggestion"]}, {"num": 40316, "title": "Tuple should be readonly by default", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 33573, "title": "Tuple with element after spread not assignable to tuple with rest elements", "labels": ["Bug"]}, {"num": 36358, "title": "Turning off automatic type acquisition fixes slow autocomplete, tsserver at 100%", "labels": ["Needs More Info", "Rescheduled"]}, {"num": 25427, "title": "Tutorial", "labels": ["Docs", "help wanted"]}, {"num": 35138, "title": "Two enums those have same name and same member names assignable each other.", "labels": ["Bug"]}, {"num": 38715, "title": "Type 'ArrayBufferView' is not assignable to type 'DataView' ", "labels": ["Bug", "Domain: lib.d.ts"]}, {"num": 29323, "title": "Type 'true' constants behave differently than 'true' literal", "labels": ["Design Limitation", "Domain: Control Flow"]}, {"num": 40806, "title": "Type '{ dateStyle: string; }' has no properties in common with type 'DateTimeFormatOptions'.ts(2559)", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 39169, "title": "Type '{ foo: T1 | T2}' is not assignable to type '{ foo: T1; } | { foo: T2; }'.", "labels": ["Needs Investigation"]}, {"num": 32287, "title": "Type alias name is not preserved when using index access/lookup types", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 28699, "title": "Type Alias Record/Interface Selector Pattern - Discriminated Unions, Fails to discriminate type shape, like switch does", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 31616, "title": "Type alias substitution does not work", "labels": ["Bug", "Domain: Type Inference", "Fix Available", "Rescheduled"]}, {"num": 39355, "title": "Type Aliases doesn't act as handbook said", "labels": ["Needs More Info"]}, {"num": 30312, "title": "Type aliases not being resolved for some functions types", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 38511, "title": "Type annotation for all exports in the module", "labels": ["In Discussion", "Suggestion"]}, {"num": 13626, "title": "Type annotations for default export", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 23790, "title": "Type argument inferred as subtype when supertype is necessary", "labels": ["In Discussion", "Suggestion"]}, {"num": 28586, "title": "Type assertions using Exact, Subset, Superset", "labels": ["In Discussion", "Suggestion"]}, {"num": 36505, "title": "Type bug: using mapped type (Partial) & this type & lookup type", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 29755, "title": "type callbacks", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 40378, "title": "Type Cast or Assertions on the FunctionDeclaration", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 36404, "title": "Type cast should try to remove readonly modifier", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 35446, "title": "Type check does not work if it is done in a method call", "labels": ["Design Limitation"]}, {"num": 39222, "title": "Type check doesn't work in generic class, but works in its derived class", "labels": ["Design Limitation"]}, {"num": 29824, "title": "Type checking and IntelliSense with JSDoc typed js dependencies", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 29409, "title": "Type checking doesn't work with extra function arguments", "labels": ["Bug"]}, {"num": 36070, "title": "Type checking not work in circular  reference", "labels": ["Design Limitation"]}, {"num": 34801, "title": "Type checking/VS Code slow when using MUI", "labels": ["Domain: Performance", "Needs Investigation"]}, {"num": 39734, "title": "Type circularly referencing itself when using a generic union type", "labels": []}, {"num": 36939, "title": "Type completions in jsDoc @augments and @implements tags.", "labels": ["Needs Investigation"]}, {"num": 14316, "title": "type constraint in arithmetic operations", "labels": ["Bug"]}, {"num": 27427, "title": "Type constraint is not respected when using nested generic types B<A> where A is a property type of B ", "labels": ["Bug"]}, {"num": 29970, "title": "Type declaration of CanvasImageSource in lib.webworker.d.ts is incomplete.", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 25169, "title": "Type declaration on property access not checked", "labels": ["Bug", "Domain: JavaScript"]}, {"num": 39297, "title": "Type deduction seems to be broken inside Generator Functions", "labels": ["Needs Investigation"]}, {"num": 36153, "title": "Type definition for what `for await` takes", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 37316, "title": "Type definitions overshadowing", "labels": ["Bug"]}, {"num": 35396, "title": "type destructuring", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 34529, "title": "Type discrimination in function calls for callable types doesn't work if discriminating property is optional", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 30308, "title": "type dosen't infered correctly in loop when `strictNullChecks` turns on", "labels": ["Design Limitation"]}, {"num": 32889, "title": "Type error breaks contextual typing down the road", "labels": ["Bug"]}, {"num": 37779, "title": "Type error for new Map from undefined Iterable", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 40465, "title": "Type error for unique symbol as optional property key of class", "labels": ["Design Limitation"]}, {"num": 35339, "title": "Type error when using generic function result as argument, but not when assigned to temp variable first", "labels": ["Design Limitation"]}, {"num": 13541, "title": "type filtering on intersection types", "labels": ["Needs Proposal", "Suggestion", "VS Code Tracked"]}, {"num": 34338, "title": "type for Function.prototype.bind wrongly preserves fields on a function", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 15207, "title": "Type from `declare module \"*\";` import can't be accessed.", "labels": ["Bug", "Domain: Error Messages", "help wanted"]}, {"num": 10197, "title": "Type guard cannot narrow undefined with greater/less-than operators.", "labels": ["Bug"]}, {"num": 33119, "title": "Type guard does not narrow the same as if-statement", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 37631, "title": "Type guard fails to narrow type in specific situations with (indirectly) recursive types", "labels": ["Needs More Info"]}, {"num": 31785, "title": "Type Guard Issue with Array.prototype.fill, Array Constructor", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 33391, "title": "Type guard not working on object property", "labels": ["Design Limitation"]}, {"num": 38863, "title": "Type guard on conditional parameter type", "labels": ["Design Limitation"]}, {"num": 38376, "title": "Type guard on generic parameter gives error inside array callback", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 27531, "title": "Type Guards and CallBack Parameters are any, if worked, could successfully defined a callback type and respective guard", "labels": ["Discussion"]}, {"num": 37905, "title": "Type guards can't deal with unknown type as default", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 14817, "title": "Type Guards do not narrow `this` parameters with union types.", "labels": ["Bug"]}, {"num": 15655, "title": "Type guards do not work when using the non-null assertion operator", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 37999, "title": "Type guards doesn't work with iterables for arrays", "labels": ["Needs Investigation"]}, {"num": 38755, "title": "Type guards ignored in closure", "labels": ["Design Limitation"]}, {"num": 40655, "title": "Type guards in parenthesis throws syntax error ", "labels": ["Design Limitation"]}, {"num": 22214, "title": "Type guards not working for indexed types with generics", "labels": ["Bug"]}, {"num": 10734, "title": "Type guards should be flowed", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 14951, "title": "type has no index signature", "labels": ["Committed", "Effort: Moderate", "Suggestion", "help wanted"]}, {"num": 40420, "title": "Type import statement not erased when exported as default", "labels": ["Needs Investigation"]}, {"num": 33067, "title": "Type in tooltip resolves correctly. Then resolves to `any`. Emit always resolves correctly", "labels": ["Needs More Info"]}, {"num": 29373, "title": "Type incorrectly inferred as union type when should be a string literal type", "labels": ["Bug"]}, {"num": 12621, "title": "Type inference breaks without currying but compiles with currying", "labels": ["Design Limitation"]}, {"num": 28527, "title": "Type inference does not work for enums and calculated props  ", "labels": ["Bug"]}, {"num": 19193, "title": "Type inference doesn't discard 'undefined' possibility of an optional property inside an if(obj[name].optionalProperty)", "labels": ["Bug"]}, {"num": 34910, "title": "Type inference doesn't work in recursive reference situation.", "labels": ["Design Limitation"]}, {"num": 39057, "title": "Type inference failing for window.onbeforeunload", "labels": ["Needs Investigation"]}, {"num": 36020, "title": "Type inference fails for function accepting function with object argument", "labels": ["Design Limitation"]}, {"num": 27234, "title": "Type inference fails for picked object as function param where picked keys are generic", "labels": ["Bug"]}, {"num": 35758, "title": "Type inference fails on instance method call that returns same type", "labels": ["Design Limitation"]}, {"num": 20215, "title": "Type inference for union type passed to overloaded generic function seems broken", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 12944, "title": "Type Inference in for... in combined with typeof", "labels": ["Suggestion", "help wanted"]}, {"num": 37874, "title": "Type inference in index type assignment is skipped", "labels": ["Needs Investigation"]}, {"num": 38580, "title": "Type Inference In Switch Statement Not Work With &&", "labels": ["Bug"]}, {"num": 29958, "title": "Type inference is down after upgrade to 3.2/3.3 from 3.1", "labels": ["Needs More Info"]}, {"num": 24747, "title": "Type inference issue when using generic function and generic constraint", "labels": ["Design Limitation", "Rescheduled"]}, {"num": 27704, "title": "type inference lost literal type", "labels": ["Design Limitation"]}, {"num": 30175, "title": "Type inference not producing error", "labels": ["Design Limitation"]}, {"num": 32715, "title": "Type inference not strict enough ", "labels": ["Design Limitation"]}, {"num": 29123, "title": "Type inference of generics does not work only when callback takes argument", "labels": ["Bug"]}, {"num": 41289, "title": "Type inference only works on the same line as the variable declaration", "labels": ["In Discussion", "Suggestion"]}, {"num": 37383, "title": "Type inference regression (regression)", "labels": ["Bug"]}, {"num": 36220, "title": "Type inference regression due to circular type definition", "labels": ["Needs Investigation"]}, {"num": 28763, "title": "Type inference when combining inheritance, optional properties and union type", "labels": ["Bug", "Domain: Control Flow"]}, {"num": 39162, "title": "Type inference with conditional for array fails for literal", "labels": ["Needs Investigation"]}, {"num": 37300, "title": "Type inference within decorator factory args", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 19565, "title": "Type inference/IntelliSense mismatch and incorrect emit of \"any\" in declaration", "labels": ["Bug"]}, {"num": 27706, "title": "Type inference/narrowing lost after assignment", "labels": ["In Discussion", "Suggestion"]}, {"num": 14561, "title": "type information from referenced file not available.", "labels": ["Bug", "Domain: JavaScript"]}, {"num": 35156, "title": "Type instantiation is excessively deep with PartialRecursive & recursive list type", "labels": ["Needs Investigation"]}, {"num": 36129, "title": "Type instantiation leakage around generators", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 24688, "title": "Type intersection and union at the same time are not working with generics", "labels": ["Bug"]}, {"num": 38700, "title": "Type is not inferred in an if branch of a user-defined type guard when object is used for destructuring", "labels": ["Bug"]}, {"num": 36753, "title": "Type isn't narrowed if used after conditionally calling class method with never as return type", "labels": ["Design Limitation"]}, {"num": 29055, "title": "Type JS's `arguments` object based on function parameters", "labels": ["In Discussion", "Suggestion"]}, {"num": 14729, "title": "Type JSX elements based on createElement function", "labels": ["In Discussion", "Suggestion"]}, {"num": 31579, "title": "Type logical operators \"and\", \"or\" and \"not\" in extends clauses for mapped types", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 30924, "title": "Type Math.min & Math.max using generic", "labels": ["In Discussion", "Suggestion"]}, {"num": 8606, "title": "Type Merging between extends and intersection", "labels": ["Effort: Moderate", "Suggestion", "help wanted"]}, {"num": 39691, "title": "Type merging for imported types only works if the type is imported from \"node_modules/@types/\" dir", "labels": ["Needs Investigation"]}, {"num": 24852, "title": "Type merging improvement => x & void = x since y & never = never, instead of u & void = illogical constraint", "labels": ["Needs More Info", "Suggestion"]}, {"num": 33033, "title": "Type metadata is lost in generic type interfaces", "labels": ["Bug", "Domain: Quick Info"]}, {"num": 32098, "title": "Type named capture groups better", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 31952, "title": "Type narrowing based on iterator `done` value?", "labels": ["Needs Investigation"]}, {"num": 22137, "title": "Type narrowing doesn't work for class using generic Readonly<Props>", "labels": ["Investigating", "Suggestion"]}, {"num": 40393, "title": "Type narrowing fails when there is a break/return in loop", "labels": ["Bug"]}, {"num": 30551, "title": "Type narrowing for awaited values", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 35109, "title": "Type narrowing for optional chaining in OR expression in AND expression", "labels": ["Bug"]}, {"num": 31667, "title": "Type narrowing in checked JS in module scope doesn't work", "labels": ["Bug"]}, {"num": 37251, "title": "Type narrowing in loose equality fails for edge cases like empty string and zero", "labels": ["Bug"]}, {"num": 11245, "title": "Type narrowing not working as expected", "labels": ["Design Limitation"]}, {"num": 26852, "title": "Type narrowing not working as expected in else", "labels": ["In Discussion", "Suggestion"]}, {"num": 31613, "title": "Type narrowing not working for unions of tuples with object literals", "labels": ["Bug", "Domain: Control Flow", "Needs Proposal"]}, {"num": 30625, "title": "Type narrowing on object properties lost in async IIFE", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 16035, "title": "Type narrowing with foo.constructor", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 27002, "title": "Type Narrowing with logical OR doesn't work properly", "labels": ["Design Limitation"]}, {"num": 38136, "title": "Type narrowing/guard together with nullish coalescing/optional chaining", "labels": ["Design Limitation"]}, {"num": 36772, "title": "Type not narrowed by === when equivalent type guard works", "labels": ["Bug", "Rescheduled"]}, {"num": 18384, "title": "Type not suggested when implementing an interface's overloaded method", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 21609, "title": "Type of `CryptoKey.algorithm` is incomplete, making usage of `SubtleCrypto` difficult", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 34858, "title": "Type of `this` is different in object-literal-method return statement", "labels": ["Bug"]}, {"num": 36803, "title": "Type of class member functions does not contain this type", "labels": ["Design Limitation"]}, {"num": 38052, "title": "Type of function field of union object types not inferred correctly when infer is based on undefined type", "labels": ["Bug"]}, {"num": 33439, "title": "Type of heterogeneous enum value can't be inferred correctly when used in object literal", "labels": ["Bug"]}, {"num": 38806, "title": "Type of reverse mappings of numeric enums is a `string` instead of `keyof typeof Enum`", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 41270, "title": "Type of variable erroneously narrowed to 'never'", "labels": ["Duplicate"]}, {"num": 13215, "title": "Type parameter constrained to union cannot be exhaustively narrowed to 'never'", "labels": ["In Discussion", "Suggestion"]}, {"num": 38872, "title": "Type parameter inference of function chained parameters and return values does not work.", "labels": ["Design Limitation"]}, {"num": 26926, "title": "Type parameter is not inferred from method return type", "labels": ["Design Limitation"]}, {"num": 40276, "title": "Type parameters in return values are sometimes inferred as never", "labels": ["Bug"]}, {"num": 15161, "title": "Type params constrained to Record<string, ...> require type args to have index signatures", "labels": ["In Discussion", "Suggestion"]}, {"num": 33923, "title": "Type PermissionName for Permission API doesn't contain correct types", "labels": ["Bug", "Domain: lib.d.ts"]}, {"num": 29531, "title": "type predicate-ness lost when using Function.prototype.bind", "labels": ["Domain: lib.d.ts", "Experience Enhancement", "Suggestion", "help wanted"]}, {"num": 34803, "title": "Type reference to Image resolves to static side", "labels": ["Bug", "Domain: JavaScript"]}, {"num": 40397, "title": "Type refinment with optional chaining", "labels": ["Bug"]}, {"num": 31112, "title": "Type safety  for enum property names", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 33304, "title": "Type safety with `TemplateStringsArray` and tag functions", "labels": ["In Discussion", "Suggestion"]}, {"num": 41109, "title": "Type Selection Queries", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 18879, "title": "Type signature for JSON.stringify does not include undefined in the return type", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 41228, "title": "Type string is assignable to interface with index signature from number to string", "labels": ["Design Limitation"]}, {"num": 26860, "title": "Type the tagName string property of Element derivations to aid overloading and for discriminated unions", "labels": ["In Discussion", "Suggestion"]}, {"num": 16173, "title": "Type to invert optionality of properties", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 37401, "title": "Type transformations do not use concrete types", "labels": ["Needs More Info"]}, {"num": 36245, "title": "Type unification not working for nested types", "labels": ["Bug", "Domain: Variance Relationships"]}, {"num": 30946, "title": "Type updates don't propagate in monorepo across package boundaries", "labels": ["Needs More Info"]}, {"num": 33405, "title": "Type variables in TypedPropertyDescriptor cause compilation errors when using decorator", "labels": ["Needs Investigation"]}, {"num": 37263, "title": "Type with overloaded method with a generic overload matches type with incompatible method", "labels": ["Needs Investigation"]}, {"num": 31603, "title": "Type wrongly assumed to be undefined | number in this case", "labels": ["Design Limitation"]}, {"num": 28521, "title": "Type, retrieved via function using generic class instance, loses its type information only when returned by class method.", "labels": ["Bug"]}, {"num": 17216, "title": "Type-check jsdoc-annotated property assignments", "labels": ["Bug", "Domain: JSDoc", "Domain: JavaScript"]}, {"num": 9825, "title": "Type-checking unsoundness: standardize treatment of such issues among TypeScript team/community?", "labels": ["Discussion"]}, {"num": 26075, "title": "type.isLiteral() returns false for boolean literals", "labels": ["API", "Bug", "help wanted"]}, {"num": 29145, "title": "Typecast for generic hashes not works as expected", "labels": ["Bug", "Domain: Contextual Types"]}, {"num": 37125, "title": "Typecheck multiple module formats at once", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 4217, "title": "TypeChecker#getConstantValue(node) doesn't properly resolve values", "labels": ["API", "Bug", "help wanted"]}, {"num": 19198, "title": "typeChecker.typeToString() should print most derived alias", "labels": ["Bug"]}, {"num": 27073, "title": "typechecking does not terminate on contrived recursive type", "labels": ["Bug"]}, {"num": 36587, "title": "typedef imports should use default exports", "labels": ["Awaiting More Feedback", "In Discussion", "Suggestion"]}, {"num": 32545, "title": "TypedPropertyDescriptor<T> does not follow the spec", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 40137, "title": "TypedPropertyDescriptorMap<T>", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 32874, "title": "TypeError: Cannot read property '0' of undefined in 'getTypeArgumentConstraint' during 'completionInfo'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 33718, "title": "TypeError: Cannot read property 'enable' of undefined in 'convertTypeAcquisition' during 'getApplicableRefactors'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 38070, "title": "TypeError: Cannot read property 'escapedName' of undefined in 'getImport' during 'documentHighlights'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 39835, "title": "TypeError: Cannot read property 'exportSymbol' of undefined     at getTypeOfSymbolAtLocation", "labels": ["Bug", "Crash"]}, {"num": 37529, "title": "TypeError: Cannot read property 'flags' of undefined in 'getFlowTypeOfReference' during 'encodedSemanticClassifications-full'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 32875, "title": "TypeError: Cannot read property 'flags' of undefined in 'Object.getCheckFlags' during 'getApplicableRefactors'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 38319, "title": "TypeError: Cannot read property 'indexOf' of undefined in 'Array.filter' during 'completionInfo'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 30269, "title": "TypeError: Cannot read property 'kind' of undefined", "labels": ["Bug", "Crash"]}, {"num": 40522, "title": "TypeError: Cannot read property 'kind' of undefined at getErrorSpanForNode", "labels": ["Crash", "Needs More Info"]}, {"num": 38058, "title": "TypeError: Cannot read property 'kind' of undefined in 'areSameModule' during 'navtree'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 38064, "title": "TypeError: Cannot read property 'kind' of undefined in 'assignParameterType' during 'encodedSemanticClassifications-full'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 33313, "title": "TypeError: Cannot read property 'kind' of undefined in 'getRootDeclaration' during 'getCodeFixes'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 38069, "title": "TypeError: Cannot read property 'kind' of undefined in 'Object.isFunctionDeclaration' during 'encodedSemanticClassifications-full'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 33726, "title": "TypeError: Cannot read property 'kind' of undefined in 'Object.isImportClause' during 'getCodeFixes'", "labels": ["Bug", "Effort: Moderate", "Impact: Failed LS Operation", "Needs More Info", "Rescheduled", "Source: Telemetry", "help wanted"]}, {"num": 33076, "title": "TypeError: Cannot read property 'kind' of undefined in 'Object.isJSDocTag' during 'getCodeFixes'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 38065, "title": "TypeError: Cannot read property 'kind' of undefined in 'Object.isModuleBlock' during 'navtree'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 33719, "title": "TypeError: Cannot read property 'kind' of undefined in 'Object.isUnionTypeNode' during 'getCodeFixes'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 35037, "title": "TypeError: Cannot read property 'kind' of undefined in 'pipelineEmitWithHint' during 'signatureHelp'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 32866, "title": "TypeError: Cannot read property 'kind' of undefined in 'pipelineEmitWithHint' during 'signatureHelp'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 37531, "title": "TypeError: Cannot read property 'lastIndexOf' of undefined in 'Object.startsWith' during 'completionEntryDetails'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 37530, "title": "TypeError: Cannot read property 'length' of undefined in 'checkNumericLiteralValueSize' during 'getApplicableRefactors'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 36712, "title": "TypeError: Cannot read property 'length' of undefined in 'checkNumericLiteralValueSize' during 'getApplicableRefactors'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 38318, "title": "TypeError: Cannot read property 'length' of undefined in 'createSourceFile' during 'updateOpen'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 37293, "title": "TypeError: Cannot read property 'length' of undefined in 'Object.find' during 'documentHighlights'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 32858, "title": "TypeError: Cannot read property 'length' of undefined in 'Object.find' during 'documentHighlights'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 40747, "title": "TypeError: Cannot read property 'length' of undefined in computeLineStarts", "labels": ["Needs More Info"]}, {"num": 38709, "title": "TypeError: Cannot read property 'length' of undefined in getLocalTypeParametersOfClassOrInterfaceOrTypeAlias", "labels": ["Bug", "Needs More Info"]}, {"num": 33850, "title": "TypeError: Cannot read property 'lineOffsetToPosition' of undefined in 'IOSession.Session.getStartAndEndPosition' during 'getApplicableRefactors'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 33555, "title": "TypeError: Cannot read property 'lineOffsetToPosition' of undefined in 'IOSession.Session.getStartAndEndPosition' during 'getApplicableRefactors'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 33314, "title": "TypeError: Cannot read property 'name' of undefined in 'chooseBetterSymbol' during 'signatureHelp'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 36714, "title": "TypeError: Cannot read property 'parent' of undefined in 'getHighlightSpans' during 'documentHighlights'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 32869, "title": "TypeError: Cannot read property 'parent' of undefined in 'Object.deleteDeclaration' during 'getCodeFixes'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 37533, "title": "TypeError: Cannot read property 'path' of undefined in 'addReferencedFilesToTypeDirective' during 'getApplicableRefactors'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 36716, "title": "TypeError: Cannot read property 'path' of undefined in 'ProjectService.updateNonInferredProjectFiles' during 'updateOpen'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 36160, "title": "TypeError: Cannot read property 'pos' of undefined in 'rangeContainsSkipTrivia' during 'getApplicableRefactors'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 33723, "title": "TypeError: Cannot read property 'pos' of undefined in 'rangeContainsSkipTrivia' during 'getApplicableRefactors'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 36710, "title": "TypeError: Cannot read property 'pos' of undefined in 'visit' during 'getApplicableRefactors'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 26435, "title": "TypeError: Cannot read property 'set' of undefined", "labels": ["Needs More Info"]}, {"num": 36451, "title": "TypeError: Cannot read property 'tagName' of undefined in 'isUnclosedTag' during 'jsxClosingTag'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 26554, "title": "TypeError: path.replace is not a function in ./typescript/lib/typescript.js", "labels": ["Needs More Info"]}, {"num": 36161, "title": "TypeError: this.fileExistsWithCache is not a function in 'Object.Project.fileExists' during 'getCodeFixes'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 35035, "title": "TypeError: this.fileExistsWithCache is not a function in 'Object.Project.fileExists' during 'getCodeFixes'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 32854, "title": "TypeError: this.toPath is not a function in 'Object.Project.fileExists' during 'getCodeFixes'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 35953, "title": "Typeguard for union not working after adding a property to the superclass of one of the union members", "labels": ["Design Limitation"]}, {"num": 36887, "title": "Typeguard method not working for class members ", "labels": ["Design Limitation"]}, {"num": 31156, "title": "Typeguard with \"\"|undefined not working", "labels": ["Bug"]}, {"num": 28311, "title": "Typeguards with destructuring parameters", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 29614, "title": "typeof 'function' using with Exclude<T, Function>", "labels": ["Bug", "Domain: Conditional Types", "Domain: Control Flow"]}, {"num": 40977, "title": "Typeof (narrowed generic parameter) does not use narrowed type", "labels": ["Needs Investigation"]}, {"num": 3440, "title": "typeof const enum", "labels": ["Bug", "help wanted"]}, {"num": 28131, "title": "typeof discards previous non-null checks", "labels": ["Design Limitation"]}, {"num": 19707, "title": "typeof Foo['bar'] has strange precedence", "labels": ["Revisit", "Suggestion"]}, {"num": 8775, "title": "typeof operator fails on use-before-defined block scoped variable.", "labels": ["Bug", "help wanted"]}, {"num": 1554, "title": "typeof this.xxx gives \"identifier expected\" error.", "labels": ["Suggestion", "help wanted"]}, {"num": 37708, "title": "typeRoots and types not working ", "labels": ["Needs Investigation"]}, {"num": 37155, "title": "types 'new (...args: any) => E' and wrapper types constructor for primitive types have no overlap", "labels": ["Bug"]}, {"num": 32814, "title": "Types `number` and explicitly constrained `T extends unknown` shouldn't be comparable", "labels": ["Bug"]}, {"num": 37624, "title": "Types become compatible after update to version 3.8.1-rc", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 39064, "title": "Types defining `Symbol.hasInstance` should be eligible to use with the `instanceof` operator", "labels": ["In Discussion", "Suggestion"]}, {"num": 33420, "title": "Types for async functions do not handle `void` assignments like normal ones", "labels": ["Bug"]}, {"num": 36800, "title": "types in transitive dependencies causing errors. The inferred type of ... cannot be named without a reference to", "labels": ["Needs More Info"]}, {"num": 38209, "title": "Types missing from package with npm install, but not with npm link", "labels": ["Needs Investigation"]}, {"num": 33466, "title": "Types not being included when using modules linked using npm link", "labels": ["Needs More Info"]}, {"num": 32309, "title": "Types not checked when computed property key has multiple possible values", "labels": ["Design Limitation"]}, {"num": 39909, "title": "Typescript - Rendering signature overloads with conditional types in VSCode", "labels": ["Unactionable"]}, {"num": 10139, "title": "TypeScript / Solution prompts to Common Problems [Feature Request]", "labels": ["Domain: Quick Fixes", "Domain: Refactorings", "Meta-Issue", "VS Code Tracked"]}, {"num": 37677, "title": "Typescript 3.8.3 : Sharp notation for private method must be alloweded", "labels": ["In Discussion", "Suggestion"]}, {"num": 37198, "title": "TypeScript 3.9 Iteration Plan", "labels": ["Planning"]}, {"num": 38818, "title": "Typescript 3.9.* transpile adding interfaces to the output javascript when they are re-exported", "labels": ["Needs More Info"]}, {"num": 38079, "title": "TypeScript 3.9: Type files are behaving like included files", "labels": ["Needs Investigation"]}, {"num": 40166, "title": "TypeScript 4.0 broken on Node.js 6", "labels": ["Bug", "Crash"]}, {"num": 38510, "title": "TypeScript 4.0 Iteration Plan", "labels": ["Planning"]}, {"num": 41118, "title": "TypeScript 4.1 + Preact: TypeScript does not pick up JSX.IntrinsicElements w. jsx: react-jsx", "labels": ["Bug", "Domain: JSX/TSX"]}, {"num": 40124, "title": "TypeScript 4.1 Iteration Plan", "labels": ["Planning"]}, {"num": 31223, "title": "TypeScript allows class properties to reference instance variables that have not been defined yet.", "labels": ["Bug"]}, {"num": 26892, "title": "Typescript Autocompletion Not Working For Function Overloads", "labels": ["Experience Enhancement", "Suggestion", "help wanted"]}, {"num": 39757, "title": "TypeScript Barfs on Unescaped \\u2028 Characters in JSON", "labels": ["Bug", "ES Next", "Effort: Moderate", "help wanted"]}, {"num": 34817, "title": "TypeScript Bot Tests Should Return Perf Numbers", "labels": ["Infrastructure", "Suggestion"]}, {"num": 37514, "title": "Typescript build in watch mode does not compile newly created files or renamed files ", "labels": ["Needs More Info"]}, {"num": 20846, "title": "Typescript can't infer types when using Proxy", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 5151, "title": "typescript checking frontend template files", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 1479, "title": "typescript class diagram editor", "labels": ["Suggestion", "Visual Studio"]}, {"num": 39629, "title": "TypeScript Compiler API doesn't handle intersection type correctly", "labels": ["Needs More Info"]}, {"num": 31258, "title": "TypeScript compiler stucks with --incremental flag", "labels": ["Design Limitation"]}, {"num": 16749, "title": "TypeScript complains about overwriting .d.ts files that are potentially known outputs", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 41152, "title": "TypeScript custom paths to packages are not used by quickfix to suggest imports", "labels": []}, {"num": 11099, "title": "Typescript doc visible for aliased imports, but not for single ones.", "labels": ["Bug", "VS Code Tracked", "help wanted"]}, {"num": 41320, "title": "TypeScript does not follow object keys when narrowing types", "labels": []}, {"num": 24063, "title": "Typescript does not recognize function Boolean() as a check for undefined", "labels": ["Suggestion", "help wanted"]}, {"num": 5611, "title": "TypeScript does not set function name for MethodDeclarations", "labels": ["Bug", "ES6"]}, {"num": 15874, "title": "Typescript does not support proper Touch constructor", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 26858, "title": "Typescript does not update its cache", "labels": ["Needs More Info"]}, {"num": 28357, "title": "TypeScript doesn't allow event : CustomEvent in addEventListener", "labels": ["Domain: lib.d.ts", "Needs Investigation"]}, {"num": 39499, "title": "TypeScript doesn't error on late definition/initialization of variables from outside an async closure.", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 27993, "title": "TypeScript doesn't narrow out `undefined` after constructor call when callee is `any`", "labels": ["Domain: Control Flow", "Needs Proposal", "Suggestion"]}, {"num": 32815, "title": "Typescript doesn't recognize type of rest variable", "labels": ["Bug"]}, {"num": 36362, "title": "Typescript error highlighting not working with project references", "labels": ["Bug"]}, {"num": 37991, "title": "TypeScript error \u201cTS2354: This syntax requires an imported helper but module 'tslib' cannot be found\u201d", "labels": ["Bug", "Rescheduled"]}, {"num": 33306, "title": "TypeScript ES modules incompatible with browser and Node.js", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 27545, "title": "Typescript ESType definition improvements", "labels": ["Domain: lib.d.ts", "Suggestion", "help wanted"]}, {"num": 28545, "title": "Typescript failed to expand type in generic for unknown reason", "labels": ["Bug", "Domain: Conditional Types"]}, {"num": 37963, "title": "Typescript ignores prototype of object literals assigned to index signatures", "labels": ["Design Limitation"]}, {"num": 37414, "title": "TypeScript import suggestion not showing symlinked modules ", "labels": ["Needs Investigation"]}, {"num": 37052, "title": "Typescript incorrectly resolves discriminated unions of indexed types", "labels": ["Design Limitation"]}, {"num": 40815, "title": "Typescript IntelliSense definitions are not automatically updated on npm package update", "labels": ["Needs More Info"]}, {"num": 34613, "title": "Typescript is unable to correctly derive bind parameters for a discord.js function in strict mode", "labels": ["Design Limitation"]}, {"num": 16426, "title": "TypeScript Language Service is slow to load projects over network file systems", "labels": ["Bug"]}, {"num": 39977, "title": "TypeScript module not follow specification in some cases when compilerOptions.module = commonjs", "labels": ["Docs"]}, {"num": 30954, "title": "TypeScript not enforcing the return type of optional methods defined in interfaces implemented by parents of classes", "labels": ["Bug"]}, {"num": 11946, "title": "TypeScript refuses to emit files from node_modules with getEmitOutput()", "labels": ["Bug"]}, {"num": 29288, "title": "TypeScript Roadmap: January - June 2019", "labels": ["Planning"]}, {"num": 36948, "title": "TypeScript Roadmap: January - June 2020", "labels": ["Planning"]}, {"num": 36107, "title": "TypeScript Server Error: No project", "labels": ["Needs More Info"]}, {"num": 36243, "title": "TypeScript server won't start on WSL", "labels": ["Fix Available"]}, {"num": 38422, "title": "TypeScript service: inconsystent behaviour between OpenExternalProject / CloseExternalProject commands on Windows", "labels": ["Bug"]}, {"num": 37898, "title": "TypeScript should infer `newLocal` name from property name when performing \"Extract to constant in enclosing scope\" on a PropertyAccessExpression", "labels": ["Experience Enhancement", "good first issue", "help wanted"]}, {"num": 9466, "title": "Typescript should support --lib node", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 34843, "title": "TypeScript slow to respond when switching between projects", "labels": ["Domain: Performance", "Domain: Symbol Navigation", "Needs Investigation"]}, {"num": 41010, "title": "TypeScript suggests only first (default) import ", "labels": ["Needs Investigation"]}, {"num": 36440, "title": "TypeScript support for .mdx file extensions", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 41302, "title": "Typescript trace resolution should clean cache", "labels": []}, {"num": 9694, "title": "Typescript type annotations as comments", "labels": ["Domain: JavaScript", "Needs Proposal", "Suggestion"]}, {"num": 32512, "title": "TypeScript unable to infer correct type of thisArg in Array.prototype.forEach()", "labels": ["Design Limitation"]}, {"num": 20644, "title": "TypeScript VS: Doesn't re-transpile file when source-control revert-changes", "labels": ["Needs Investigation", "Visual Studio"]}, {"num": 16057, "title": "Typescript Watch - Cleaning Target Files on Source Deletion", "labels": ["Bug"]}, {"num": 8836, "title": "TypeScript's ecosystem of self-bundled typings does not work with npm", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 37765, "title": "typescript-bot: baseline-accept and fix-lints", "labels": ["Fix Available", "Infrastructure"]}, {"num": 29730, "title": "typescript/idea auto create method bug", "labels": ["Bug"]}, {"num": 20185, "title": "TypeScript: aggregate errors for file from all projects", "labels": ["Bug", "Domain: TSServer"]}, {"num": 35911, "title": "Typescript: autocomplete won't work when \"Parameters<Fn>\" is used and \"Fn\" is passed through a generic", "labels": ["Bug"]}, {"num": 36626, "title": "TypeScript: improve refactor-rename behavior for merged declarations", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 37304, "title": "TypeScript: New class in second project is only recognized by intellisense after restart", "labels": ["Experience Enhancement", "Needs Investigation"]}, {"num": 40584, "title": "Typescript: TSServer: Code Fixes: Import missing imports with a symlinked node_modules folder is very slow", "labels": ["Bug", "Domain: Performance", "Needs Investigation", "Needs More Info"]}, {"num": 30036, "title": "TypeScript: typing spikes CPU a lot", "labels": ["Needs More Info"]}, {"num": 14833, "title": "TypeScripts Type System is Turing Complete", "labels": ["Discussion"]}, {"num": 40203, "title": "typeToTypeNode behavior changed for boolean literals", "labels": ["Needs Investigation"]}, {"num": 10998, "title": "Typing the Index Signature of a Module Namespace Object", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 41280, "title": "Typings installer uses high number of inotify watchers and never completes", "labels": []}, {"num": 36299, "title": "Typo in `String#match` (lib.es2015.symbol.wellknown)", "labels": ["Bug", "Domain: lib.d.ts"]}, {"num": 37578, "title": "Typo in AllowQualifedNameInPlaceOfIdentifier", "labels": ["Infrastructure"]}, {"num": 26009, "title": "Ubuntu - File to import not found or unreadable", "labels": ["Needs More Info"]}, {"num": 8436, "title": "umd module compiler option doesn't have a fallback for global namespace.", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 4620, "title": "Un used variable is emmitted while transpiling enums.", "labels": ["Suggestion", "help wanted"]}, {"num": 14877, "title": "Unable to access ServiceWorkerGlobalScope via `self.`", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 31307, "title": "Unable to add generic function overload for module default export", "labels": ["Bug", "Domain: JSDoc", "Domain: Type Inference", "checkJs"]}, {"num": 32185, "title": "unable to augment class definition", "labels": ["Needs More Info"]}, {"num": 35045, "title": "Unable to call map on array of variable depth", "labels": ["In Discussion", "Suggestion"]}, {"num": 39075, "title": "Unable to cast to generic discriminated union", "labels": ["Bug"]}, {"num": 20623, "title": "Unable to destructure TypedArrays", "labels": ["Committed", "Suggestion"]}, {"num": 11304, "title": "Unable to extend classes which constructors require `new` when targeting es5", "labels": ["ES6", "Needs Proposal", "Suggestion"]}, {"num": 26807, "title": "Unable to infer the inner type within expansion of a nested union", "labels": ["Design Limitation"]}, {"num": 26418, "title": "Unable to infer types correctly from generic on function", "labels": ["Design Limitation"]}, {"num": 26734, "title": "Unable to infer types when not passing an optional generic", "labels": ["Bug"]}, {"num": 41159, "title": "Unable to return ElementFinder from an async function in TS 3.9", "labels": ["Needs Investigation"]}, {"num": 15001, "title": "Unable to specify return type of class extends T implements IFooable", "labels": ["In Discussion", "Suggestion"]}, {"num": 40552, "title": "Unable to use infer on types with optional keys", "labels": ["Needs More Info"]}, {"num": 34815, "title": "Uncalled Function Checks don't check negative condition", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 35584, "title": "Uncalled function checks only works with single conditional", "labels": ["Experimentation Needed", "GraceHopperOSD", "Suggestion", "good first issue", "help wanted"]}, {"num": 17308, "title": "Uncaught compiler error: Block-scoped variable from import used before its declaration.", "labels": ["Bug"]}, {"num": 40617, "title": "Uncaught uninitialized class member with Symbol key", "labels": ["Bug"]}, {"num": 29578, "title": "unclear how to make function argument check produce the same errors as variable assignment", "labels": ["Needs Investigation"]}, {"num": 30634, "title": "Unconstrained generics are incorrectly assignable to _any_ \"Partial\" type", "labels": ["Bug"]}, {"num": 28997, "title": "undefined not assignable error within \"if\" statement, when member of Readonly<T>", "labels": ["Bug", "Domain: Control Flow", "Domain: Mapped Types"]}, {"num": 21934, "title": "Understand 'int', 'integer', 'float', 'double', etc. as 'number' in JSDoc", "labels": ["Awaiting More Feedback", "Domain: JavaScript", "Suggestion"]}, {"num": 35835, "title": "Undetected unreachable code", "labels": ["In Discussion", "Suggestion"]}, {"num": 30337, "title": "Undocumented = operator syntax in Generic Constraining", "labels": ["Docs"]}, {"num": 29443, "title": "Undocumented node_modules/@types fallback strategy for classic module resolution", "labels": ["Add a Flag", "Awaiting More Feedback", "Suggestion"]}, {"num": 28765, "title": "Unexpected (unhelpful) autocomplete suggestions inside function call when spreading an array", "labels": ["Domain: Completion Lists", "In Discussion", "Suggestion"]}, {"num": 39970, "title": "Unexpected behavior (possible bug)", "labels": ["Has Repro"]}, {"num": 40720, "title": "Unexpected error when using config file inheritance with project references", "labels": ["Needs Investigation"]}, {"num": 29290, "title": "Unexpected implicit any for return value of Array<T>.indexOf", "labels": ["Bug", "Domain: Control Flow"]}, {"num": 32914, "title": "Unexpected parse problems in valid JS code when arrow functions are used as values in object surrounded with parentheses", "labels": ["Bug", "Fix Available", "Rescheduled"]}, {"num": 27007, "title": "Unexpected result of declaration emit while namespace is shared between two @types", "labels": ["Bug", "Domain: Declaration Emit", "Effort: Moderate", "help wanted"]}, {"num": 17293, "title": "Unexpected TS4094 with the build parameter `declaration: true`", "labels": ["Bug", "Domain: Declaration Emit"]}, {"num": 32653, "title": "Unexpected type assertion result", "labels": ["Needs Investigation"]}, {"num": 30691, "title": "Unexpected type error when passing generic function to higher order function", "labels": ["Needs More Info"]}, {"num": 17294, "title": "Unexpected type listing for `keyof T` on declaration file", "labels": ["Bug", "Domain: Declaration Emit"]}, {"num": 38970, "title": "Unexpected very poor performance", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 20704, "title": "Unhelpful `--strictFunctionTypes` error when first method is `self(): this;`", "labels": ["Domain: Error Messages", "In Discussion", "Suggestion"]}, {"num": 19373, "title": "Unhelpful error \"Two different types with this name exist, but they are unrelated.\"", "labels": ["Bug", "Domain: Error Messages", "good first issue", "help wanted"]}, {"num": 17334, "title": "unhelpful error message when missing outer parens in `string|(x: string) => any` field decl", "labels": ["Bug", "Domain: Error Messages", "help wanted"]}, {"num": 13108, "title": "Unhelpful error when using increment with stricter checks on uninitialized variables", "labels": ["Bug", "Domain: Error Messages", "help wanted"]}, {"num": 14513, "title": "Unicode Character Causing all Lines to Be shifted by one", "labels": ["Bug", "VS Code Tracked"]}, {"num": 23018, "title": "Unify conditional types' else-clauses", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 23305, "title": "Uninitialized variables work around strictNullChecks (follow-up to #13884)", "labels": ["Effort: Moderate", "Suggestion", "help wanted"]}, {"num": 15008, "title": "Unintuitive behavior for `isIdentifier`", "labels": ["Bug"]}, {"num": 10991, "title": "Unintuitive error message with 'unreachable' code", "labels": ["Domain: Error Messages", "Effort: Difficult", "Suggestion", "help wanted"]}, {"num": 38663, "title": "Union in a computed property allows any assignment to property value", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 32399, "title": "Union not narrowed with `typeof x.y` as a discriminant", "labels": ["Bug", "Effort: Moderate", "help wanted"]}, {"num": 41213, "title": "Union of functions with typed `this`, fails with no parameters", "labels": []}, {"num": 34949, "title": "Union properties like `0 | number` or `\"\" | string` should be discriminants in truthiness checks", "labels": ["Bug"]}, {"num": 35861, "title": "Union type checking during assignment fails for boolean and passes for other primitives", "labels": ["Bug"]}, {"num": 41293, "title": "Union type in element access can prevent deprecated warning from triggering", "labels": []}, {"num": 18717, "title": "Union type inference failure in generic function", "labels": ["Bug"]}, {"num": 1706, "title": "Union Type inference not working in class (ts version 1.4)", "labels": ["Suggestion", "help wanted"]}, {"num": 37405, "title": "Union type narrowing doesn't work on `object | OtherType`", "labels": ["Design Limitation"]}, {"num": 33101, "title": "Union types and overloads acts a bit weirdly", "labels": ["Bug"]}, {"num": 32928, "title": "union types not type guarded", "labels": ["Bug", "Fix Available", "Rescheduled"]}, {"num": 40934, "title": "Union with non-distinct discriminating property breaks inference somewhat (confusing error messages, invalid intellisense)", "labels": ["Bug", "Domain: Completion Lists"]}, {"num": 17757, "title": "Unions and intersections of type predicates produce wrong type", "labels": ["Bug", "help wanted"]}, {"num": 20863, "title": "Unions without discriminant properties do not perform excess property checking", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 38009, "title": "Unique symbol can't be used to index class", "labels": ["Bug", "Rescheduled"]}, {"num": 39992, "title": "Unjustified and undetected circular type definition when using one-tuple to prevent distributive conditional type with a condition", "labels": ["Needs Investigation"]}, {"num": 32347, "title": "unknown should be narrowable to {}", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 29963, "title": "unknown types should not able to concat with strings", "labels": ["In Discussion", "Suggestion"]}, {"num": 27439, "title": "unknown[] as rest params with generic parameter breaks generic inference", "labels": ["Design Limitation"]}, {"num": 39500, "title": "Unmet parameter type in function call is misleading the compiler when those parameters involve inherited interfaces", "labels": ["Bug"]}, {"num": 23829, "title": "Unnecessary reference checks with interfaces", "labels": ["Bug", "help wanted"]}, {"num": 30021, "title": "Unnecessary self module references in d.ts files", "labels": ["Bug", "help wanted"]}, {"num": 36443, "title": "Unneeded temporary introduced for named class expression with static property initializer", "labels": ["Bug"]}, {"num": 40731, "title": "Unnormalized template literal types", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 11779, "title": "Unoptimized destructuring compilation", "labels": ["Suggestion", "help wanted"]}, {"num": 11821, "title": "Unreachable 'for' clause doesn't correctly narrow", "labels": ["Bug"]}, {"num": 25738, "title": "Unreachable code defaults", "labels": ["Docs"]}, {"num": 39386, "title": "unreachable code detected not work for if clause.", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 37399, "title": "Unrecognised JSDoc Namepath", "labels": ["Bug", "Domain: JSDoc"]}, {"num": 30053, "title": "Unsafe access to uninitialized variables is allowed in any function ", "labels": ["Design Limitation"]}, {"num": 40529, "title": "Unsafe assignment of Record into interface with optionals", "labels": ["Design Limitation"]}, {"num": 17471, "title": "Unsafe function overload resolution when applied with generic arguments", "labels": ["In Discussion", "Suggestion"]}, {"num": 14150, "title": "Unsafe type-incompatible assignments should not be allowed", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 29771, "title": "Unstable type inference when generic is inferred from a return type", "labels": ["Design Limitation"]}, {"num": 16866, "title": "Unusual behavior inserting space at beginning of line in object literal", "labels": ["Bug", "Domain: Formatter", "help wanted"]}, {"num": 27236, "title": "Up-to-date typings (like lib.dom.d.ts) for older versions", "labels": ["Needs More Info", "Suggestion"]}, {"num": 7454, "title": "Update \"export = <expr>\" to use same logic as for \"module.exports\" in JavaScript files", "labels": ["In Discussion", "Suggestion"]}, {"num": 34785, "title": "Update contributing documentation", "labels": ["Docs", "Infrastructure"]}, {"num": 32890, "title": "Update declaration of ts.Iterator to be compatible with ES2015 IteratorResult type", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 33612, "title": "Update from typescript 3.1 to 3.6 -> out of memory exception (exit code 134)", "labels": ["Needs More Info"]}, {"num": 37949, "title": "Update Imports On File Move can create invalid and/or unexpected tsconfig changes", "labels": ["Bug", "Domain: TSServer"]}, {"num": 14336, "title": "Update mixin docs", "labels": ["Docs"]}, {"num": 28500, "title": "Update Terminal's \"--pretty\" style.", "labels": ["In Discussion", "Suggestion"]}, {"num": 36642, "title": "Update the performance test suite", "labels": ["Domain: Performance"]}, {"num": 35991, "title": "Updating Windows contributor requirements to run Windows 10", "labels": ["Discussion", "Infrastructure"]}, {"num": 9715, "title": "Upgrade onXXX callback signatures for non-nullable types", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 29922, "title": "Upgrading from 3.0.3 to 3.1.1 breaks underscore type definition", "labels": ["Bug"]}, {"num": 30732, "title": "Upgrading to 3.2.1 causes out of memory error in watch mode", "labels": ["Bug", "Crash"]}, {"num": 32951, "title": "URLSearchParams API should accept numbers for values", "labels": ["Bug", "Domain: lib.d.ts"]}, {"num": 19806, "title": "URLSearchParams/Headers constructor also receives iterables including Map", "labels": ["Domain: lib.d.ts", "Experience Enhancement", "Suggestion", "help wanted"]}, {"num": 19949, "title": "Use  `[Type]Constructor for HTMLElement type declarations", "labels": ["Awaiting More Feedback", "Domain: lib.d.ts", "Suggestion"]}, {"num": 17360, "title": "Use `Symbol.hasInstance` for `instanceof` narrowing, include constructor as part of class structural type", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 17944, "title": "Use a consistent ordering when writing union types", "labels": ["Awaiting More Feedback", "Domain: Type Display", "Suggestion"]}, {"num": 37793, "title": "Use a data object instead of function closures for oldPrograms", "labels": ["In Discussion", "Suggestion"]}, {"num": 36221, "title": "Use absolute file paths in error messages", "labels": ["Domain: Error Messages", "In Discussion", "Suggestion"]}, {"num": 33458, "title": "Use any instead of unknown for AsyncGenerator optional .next parameter", "labels": ["Needs Investigation"]}, {"num": 19503, "title": "Use before declaration errors when using let statements within a switch case ", "labels": ["Bug"]}, {"num": 11229, "title": "Use builder logic (now used for compile on save) to retrieve diagnostics for tsserver", "labels": ["Experience Enhancement", "Suggestion", "VS Code Tracked"]}, {"num": 14682, "title": "Use const enum values as keys of object literals", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 8134, "title": "Use function type shorthands when displaying signature help", "labels": ["API", "Suggestion", "VS Code Tracked", "help wanted"]}, {"num": 29786, "title": "Use generic defaults for \"empty\" constructors of Array, Map, Set", "labels": ["In Discussion", "Suggestion"]}, {"num": 21408, "title": "Use insertText to add string literal completions", "labels": ["Experience Enhancement", "In Discussion", "Suggestion"]}, {"num": 27235, "title": "Use React TSX tags without having to write \"import React from 'react'\"", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 16312, "title": "Use ReadonlyArray<T> in type declarations", "labels": ["Infrastructure"]}, {"num": 32848, "title": "Use related error spans for \"implement abstract class\" errors", "labels": ["Bug", "Domain: Error Messages", "Domain: Quick Fixes", "Experience Enhancement", "good first issue"]}, {"num": 38732, "title": "Use TypeScript declaration files alongside JavaScript", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 21603, "title": "Use unique symbol for well-known symbols", "labels": ["Revisit", "Suggestion"]}, {"num": 35081, "title": "useDefineForClassFields breaks augmentation/overwrite of class members with decorators", "labels": ["Bug", "Domain: JS Emit", "Effort: Moderate", "Rescheduled", "help wanted"]}, {"num": 35908, "title": "Useless scary elaboration on all overloads in JSX", "labels": ["Experience Enhancement", "Suggestion"]}, {"num": 37560, "title": "User test requests fail too silently", "labels": ["Infrastructure", "Rescheduled"]}, {"num": 17760, "title": "User-defined type assertions", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 30240, "title": "User-defined type guard behaves differently inside `Array.filter`", "labels": ["Design Limitation"]}, {"num": 27687, "title": "User-defined type guard method can be overridden with any non-type-guard return type", "labels": ["Bug"]}, {"num": 32333, "title": "User/docker tests broken with duplicate identifier IteratorResult", "labels": ["Bug", "Rescheduled"]}, {"num": 36470, "title": "Using \"arguments\" keyword with Function.prototype.apply causes TS2345", "labels": ["Design Limitation"]}, {"num": 32455, "title": "Using && with a string produces union type with empty string", "labels": ["Bug"]}, {"num": 40069, "title": "Using 'Key in keyof ArrayType' always returns an Array regardles of the value manipulation applied", "labels": ["Needs Investigation"]}, {"num": 19751, "title": "Using 'this' in a function declaration based on a function type interface confuses type checking", "labels": ["Bug"]}, {"num": 39427, "title": "Using @ts-expect-error in a @ts-nocheck file", "labels": ["Bug"]}, {"num": 14471, "title": "Using `undefined` as a discriminator within a mapped type yields erroneous types when primitive intersections are involved", "labels": ["Needs Investigation"]}, {"num": 41007, "title": "Using an optional call with `.flat()` produces incorrect types", "labels": ["Has Repro", "Needs Investigation"]}, {"num": 36227, "title": "Using Array and Boolean in condition does not trigger a warning", "labels": ["In Discussion", "Suggestion"]}, {"num": 38484, "title": "Using classes in jsdoc comments results in different behaviors depending on how the class was required", "labels": ["Bug"]}, {"num": 29354, "title": "Using compiled *.d.ts file produces a type error, but using the same type from the source file doesn't", "labels": ["Bug"]}, {"num": 28368, "title": "Using createProgram outside node environment throws unhelpful exception message", "labels": ["API", "In Discussion", "Suggestion"]}, {"num": 27928, "title": "Using generic argument that extends something, stops inferring super keys when Exclude is used in addition to keyof and Pick", "labels": ["Domain: Conditional Types", "Needs Proposal", "Suggestion"]}, {"num": 8896, "title": "Using intersection with unions", "labels": ["In Discussion", "Suggestion"]}, {"num": 37791, "title": "Using object destructuring with ECMAScript's private field as computed property name leads to runtime error", "labels": ["Bug", "Fix Available", "Rescheduled"]}, {"num": 28637, "title": "Using rest parameters in JavaScript type annotations seems broken in 3.1", "labels": ["Bug", "Domain: JavaScript"]}, {"num": 31999, "title": "Using super inside async class method generate error", "labels": ["Needs More Info"]}, {"num": 34867, "title": "Using the \"in\" operator should make bracket access safe on an object", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 28016, "title": "Using the switched variable in an if statement causes an error.", "labels": ["Design Limitation"]}, {"num": 31051, "title": "Using the typechecker tutorial does not work anymore", "labels": ["Docs"]}, {"num": 14226, "title": "Using Type Parameters in Generic Constraints - type check failure", "labels": ["In Discussion", "Suggestion"]}, {"num": 31404, "title": "Using undefined as a property discriminated union doesn't work correctly with control flow narrowing", "labels": ["Design Limitation"]}, {"num": 28871, "title": "Using VS Code Go to Declaration support", "labels": ["Domain: Symbol Navigation", "In Discussion", "Suggestion"]}, {"num": 28775, "title": "USVString type definition", "labels": ["Awaiting More Feedback", "Breaking Change", "Domain: lib.d.ts", "Suggestion"]}, {"num": 41023, "title": "Utility type to reference JSDoc of another type", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 32771, "title": "Utility type: Object entries tuple", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 40217, "title": "v4 regression: weird type inference inside of `Array.every` when using `pipe`", "labels": ["Needs Investigation"]}, {"num": 28139, "title": "Value matching union type rejected", "labels": ["Design Limitation"]}, {"num": 2763, "title": "Value properties", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 39534, "title": "Variable \"name\" in VSCode editor(intelli-sense) is showing incorrect information", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 36618, "title": "Variable aliasing this should be treated the same as this", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 40901, "title": "Variable arguments generated from JS although not applicable", "labels": ["Bug", "help wanted"]}, {"num": 15323, "title": "Variable declaration list comments from async functions are removed", "labels": ["Bug", "Domain: Comment Emit", "Domain: Transforms", "Effort: Difficult"]}, {"num": 36819, "title": "Variable initializer omits an error on destructuring assignment", "labels": ["Bug"]}, {"num": 35124, "title": "Variable isn't narrowed within a capturing closure", "labels": ["In Discussion", "Suggestion"]}, {"num": 4062, "title": "Variable merging", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 33257, "title": "Variables declared in array destructuring patterns can't be used in initializers of other variables in the same pattern", "labels": ["Bug"]}, {"num": 40945, "title": "Variadic element of tuple-like intersection types are spreading incorrectly", "labels": ["Bug"]}, {"num": 39713, "title": "Variadic tuple constraint incoherent ?", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 41136, "title": "Variadic tuple inference does not work well with generics (e.g. currying array)", "labels": []}, {"num": 39941, "title": "Variadic with \"named tuples\" doesn't preserve name", "labels": ["Experience Enhancement", "Needs Investigation"]}, {"num": 29904, "title": "Various issues when trying to use `pipe` function", "labels": ["Meta-Issue"]}, {"num": 23759, "title": "Verbose computed property transpilation", "labels": ["Domain: Transforms", "Suggestion", "help wanted"]}, {"num": 33187, "title": "Verbose Debug Information: {\"pos\":102,\"end\":395} and {\"pos\":298,\"end\":307} in '_loop_10' during 'getCodeFixes'", "labels": ["Bug", "Source: Telemetry"]}, {"num": 32826, "title": "Very slow intellisense (10-30s until suggestions appear)", "labels": ["Needs More Info"]}, {"num": 39812, "title": "Very strange issue with generators, and inferred types", "labels": ["Needs Investigation"]}, {"num": 25655, "title": "Visual Studio 2015 + compileOnSave + outFile + multiple tsconfig = only one tsconfig compiled on save", "labels": ["Bug", "Visual Studio"]}, {"num": 8830, "title": "Visual Studio 2015 provides inconsistent type info per request order", "labels": ["Bug"]}, {"num": 14533, "title": "Visual Studio 2015/2017 .tsproj project type suggestion", "labels": ["Suggestion", "Visual Studio"]}, {"num": 35465, "title": "Visual Studio 2017 (2019) can't find parent project modules without disableSourceOfProjectReferenceRedirect", "labels": ["Needs More Info"]}, {"num": 20253, "title": "Visual Studio 2017 IntelliSense show errors in @types folder even for unused modules", "labels": ["Needs More Info"]}, {"num": 27211, "title": "Visual Studio Code intellisense on React component using typescript with union types", "labels": ["Bug"]}, {"num": 3817, "title": "Visual Studio formatting is wrong in some cases", "labels": ["Bug", "VS Code Tracked", "help wanted"]}, {"num": 29131, "title": "Void parameter still required when type extends generic", "labels": ["Bug"]}, {"num": 788, "title": "VS 2013 IDE should show documentation in IntelliSense for parameter properties", "labels": ["Bug", "help wanted"]}, {"num": 13954, "title": "VS 2015 TypeScript 2.1.5: error when class has more then 1127 static variables", "labels": ["Bug"]}, {"num": 40246, "title": "VS Code consumes too much RAM", "labels": ["Needs Investigation"]}, {"num": 32786, "title": "VS Code indicates available code action but doesn't actually offer a quick fix", "labels": ["Bug", "Domain: Quick Fixes"]}, {"num": 18496, "title": "VS Code Intellisense seems to wrongly infer revealing module pattern ", "labels": ["Domain: JavaScript", "In Discussion", "Suggestion", "VS Code Tracked"]}, {"num": 36304, "title": "VS Code variable inspection / watch does not work for default imports in NodeJS environment", "labels": ["Bug"]}, {"num": 35926, "title": "VS Community and TS: auto-import adds '.js' extension to the module name, while auto completion not ", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 40625, "title": "VSCode \"Convert to template\" refactor unescapes literals unexpectedly", "labels": ["Bug"]}, {"num": 37222, "title": "VSCode Angular 9 Auto-Import for Custom Libraries", "labels": ["Needs Investigation"]}, {"num": 14073, "title": "VSCode compatibility: Find-all-references not working for special reference kinds", "labels": ["Bug"]}, {"num": 39942, "title": "vscode does does not respect tsconfig.json configuration for ts files", "labels": ["Needs More Info"]}, {"num": 37714, "title": "VSCode ignores JSDoc's @property when specify @typedef type in 1.43.2 and 1.44.0-insider", "labels": ["Needs Investigation"]}, {"num": 40138, "title": "VSCode incredibly slow, 100% CPU usage, coming from electron_node tsserver.js CPU usage", "labels": ["Bug", "Domain: Performance", "Needs Investigation"]}, {"num": 32906, "title": "vscode intellisense for node_modules packages is truncated at deep level 2 in nodejs project", "labels": ["Needs More Info"]}, {"num": 40484, "title": "vscode intellisense import from src in typescript project", "labels": ["Needs Investigation"]}, {"num": 36514, "title": "VSCode JSDoc doesn't recognize members that are classes from default imported object.", "labels": ["Needs Investigation"]}, {"num": 29045, "title": "Vscode suggests wrong ts auto import path with js extension after having a json import", "labels": ["Bug", "Domain: TSServer"]}, {"num": 30817, "title": "VSCode tsconfig, jsconfig & other (.json) files in SharePoint", "labels": ["Needs More Info"]}, {"num": 37746, "title": "VSCode TypeScript error suggestions are slow", "labels": ["Needs More Info"]}, {"num": 30472, "title": "vscode will not auto import node modules packages correctly", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 34544, "title": "vscode: File resolution in \"node_modules/.bin\" should be relative to the module", "labels": ["Needs More Info"]}, {"num": 35762, "title": "Wall of errors for overload error messages", "labels": ["Domain: Error Messages", "Experience Enhancement", "In Discussion", "Needs Proposal"]}, {"num": 25478, "title": "warn about conflicts at renaming", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 25885, "title": "Warn on function returning `unknown` with no return statement", "labels": ["Bug", "help wanted"]}, {"num": 23340, "title": "Warn on unused property in object literal with spread", "labels": ["Effort: Moderate", "Suggestion", "help wanted"]}, {"num": 28390, "title": "Warn user when importing the same export with different names", "labels": ["Awaiting More Feedback", "Domain: Error Messages", "Suggestion"]}, {"num": 28993, "title": "Warn when JSDoc type cast misses parentheses", "labels": ["Domain: JSDoc", "In Discussion", "Suggestion"]}, {"num": 10477, "title": "Warn/error when testing a non-nullable type for null", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 18008, "title": "warning on emitDecoratorMetadata for interface in esnext", "labels": ["Bug", "Domain: Decorators"]}, {"num": 35082, "title": "Warning or error when importing files from a project's own outDir", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 41224, "title": "watch additional files", "labels": []}, {"num": 29967, "title": "Watch emit is not consistent ", "labels": ["Needs More Info"]}, {"num": 9726, "title": "Way of specifying non-enumerable properties", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 14588, "title": "Way to Go From Method Implementation to Interface Method Declaration", "labels": ["Awaiting More Feedback", "Domain: Symbol Navigation", "Suggestion", "VS Code Tracked"]}, {"num": 32728, "title": "Weak and inconsistent type inference with generators (regression)", "labels": ["Needs Investigation", "Rescheduled"]}, {"num": 35567, "title": "Weaken type checks based on CFA with assertion conditions", "labels": ["Needs More Info"]}, {"num": 26073, "title": "Web Animation API `Keyframe` requires all `CSSStyleDeclaration` Keys", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 39655, "title": "WebGL extensions typings not available", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 24195, "title": "WebGL's bufferData and bufferSubData should accept ArrayBufferView", "labels": ["Bug", "Domain: lib.d.ts"]}, {"num": 35696, "title": "WebGLShader has no properties", "labels": ["Bug", "Domain: lib.d.ts"]}, {"num": 12657, "title": "WebWorker and dom lib does not support transfers in the type for postMessage", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 14914, "title": "Webworker library is missing Date type", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 40903, "title": "Weird behavior of generic method parameter type", "labels": ["Design Limitation"]}, {"num": 36041, "title": "Weird error message for mixed exported/non-exported declarations under `isolatedModules`", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 31081, "title": "Weird inference bug where a union is expanded with \"never\" in the position of generics", "labels": ["Needs Investigation"]}, {"num": 30093, "title": "Weird type inference for binary plus", "labels": ["Bug", "Domain: Quick Fixes"]}, {"num": 1757, "title": "What is a \"large\" TypeScript implementation?", "labels": ["Discussion"]}, {"num": 8335, "title": "What is the correct way to write a .d.ts file for a node module, which is referenced in package.json?", "labels": ["@types", "Docs"]}, {"num": 40501, "title": "When `jsx` is `react-jsx` or `react-jsxdev`, a JSX tag should imply the file is a module", "labels": ["Bug"]}, {"num": 40759, "title": "When `jsx` is `react-jsx` or `react-jsxdev`, TypeScrip won't report error if @types/react and @types/react-dom not installed but slient give it any type.", "labels": ["Needs Investigation"]}, {"num": 36962, "title": "When an index signature is not available, encourage using a more specific type to index the type.", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 28427, "title": "when has optional elements in tuple types, Promise.all has error", "labels": ["Bug", "Domain: lib.d.ts"]}, {"num": 25205, "title": "when importing a module check if folder and add automatic forward slash", "labels": ["Awaiting More Feedback", "Suggestion", "VS Code Tracked"]}, {"num": 29501, "title": "When is guards for incompatible types are assigned to each other, an error occurs (breaks Array filter)", "labels": ["Design Limitation"]}, {"num": 15845, "title": "When module not found, show output of `--traceResolution` for that module", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 31353, "title": "when preserveConstEnums = true should allow use enum[key]", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 35923, "title": "When refactoring by renaming destructured arguments, solution is verbose", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 29919, "title": "When trying to use mapped tuples as rest parameters error 'A rest parameter must be of an array type' given", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 32535, "title": "When using a prototype function with `this` being `Array<keyof T>`, TS incorrectly says that an array with contents known at compile-time is not of that type. Same thing works with a regular function.", "labels": ["Design Limitation"]}, {"num": 37705, "title": "When using generic parameters, the actual type is not assignable to an InstanceType on a constructor in an interface", "labels": ["Design Limitation"]}, {"num": 8021, "title": "whole file \"use strict\" not working anymore", "labels": ["Needs Proposal", "Suggestion"]}, {"num": 6137, "title": "Why do multiple ES6 imports compile to multiple requires / define() deps with suffixed names?", "labels": ["Bug", "Effort: Moderate", "help wanted"]}, {"num": 25352, "title": "Why do we need to manually type unified overload signatures?", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 34955, "title": "Why doesn't awaiting a Promise<never> change reachability?", "labels": ["Bug", "Domain: Control Flow"]}, {"num": 11706, "title": "Why there is no document about Generator?", "labels": ["Docs"]}, {"num": 31606, "title": "Widen eligibility of Instrinsic Element names in JSX/TSX beyond lowercase names", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 531, "title": "Widening after inferring null or undefined for a type parameter should be an implicit any", "labels": ["Bug", "Effort: Moderate", "help wanted"]}, {"num": 31885, "title": "wiki doc: @template reference re: jsdoc (and old usejsdoc.org reference)", "labels": ["Docs", "GraceHopperOSD", "help wanted"]}, {"num": 28003, "title": "Wiki page 'Using the Language Service API' does not describe how to use the Language Service API", "labels": ["Docs"]}, {"num": 32422, "title": "Wildcard ambient modules declaration override rules ", "labels": ["Needs Investigation"]}, {"num": 19414, "title": "window.getMatchedCSSRules will be removed in chrome 63", "labels": ["Bug", "Domain: lib.d.ts"]}, {"num": 18198, "title": "window.onerror should be optionally null", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 40807, "title": "window.requestIdleCallback type missing", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 41311, "title": "Windows Script Host can't execute tsc.js", "labels": ["External"]}, {"num": 18765, "title": "Windows-only error for module with capitalized name of other module", "labels": ["Bug"]}, {"num": 30581, "title": "Wishlist: support for correlated record types", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 39117, "title": "With project references, some cross-package imports of inferred types are emitted with relative paths", "labels": ["Needs Investigation"]}, {"num": 37954, "title": "Workspace Symbol Provider called with empty string doesn't return all workspace symbols", "labels": ["Bug"]}, {"num": 7185, "title": "Write a FAQ entry for `export =` vs `export default` / `import ` variants", "labels": ["Docs"]}, {"num": 29937, "title": "Write strings and type information to the console at compile time", "labels": ["Suggestion", "Too Complex"]}, {"num": 27512, "title": "Write type parameters instead of @template tags in JSDoc", "labels": ["Domain: JSDoc", "Experience Enhancement", "In Discussion", "Suggestion"]}, {"num": 39446, "title": "Write typescript as modules, but output js without modules", "labels": ["Awaiting More Feedback", "Suggestion"]}, {"num": 22134, "title": "Write unit tests for isSymbolReferencedInFile", "labels": ["Infrastructure"]}, {"num": 31010, "title": "Wrong `this` type infered in spread objects.", "labels": ["Suggestion", "Too Complex"]}, {"num": 25151, "title": "wrong behaviour on variable created with destructuring", "labels": ["Bug"]}, {"num": 39364, "title": "Wrong branch on conditional type with ReturnType of T condition", "labels": ["Needs Investigation"]}, {"num": 39302, "title": "wrong comment in emit js", "labels": ["Needs Investigation"]}, {"num": 31556, "title": "Wrong compilation error in type combining intersection of unions", "labels": ["Bug"]}, {"num": 34752, "title": "Wrong completions for discriminated unions with generic index", "labels": ["Bug", "Domain: Completion Lists"]}, {"num": 24269, "title": "Wrong createElementNS() type definitions", "labels": ["Bug", "Domain: lib.d.ts", "help wanted"]}, {"num": 24841, "title": "Wrong documentation displayed in tooltip for union of interface and function in VSCode", "labels": ["Bug", "help wanted"]}, {"num": 40205, "title": "Wrong function parameters length computing", "labels": ["Bug"]}, {"num": 8644, "title": "wrong indent after formatting", "labels": ["Bug", "Domain: Formatter", "VS Code Priority", "help wanted"]}, {"num": 41209, "title": "Wrong indentation inside callback with format on type", "labels": []}, {"num": 40549, "title": "Wrong IntelliSense suggestion for a TypeScript construct", "labels": ["Bug", "Domain: Completion Lists"]}, {"num": 24560, "title": "Wrong keyof behaviour for generic with extends types in 2.9", "labels": ["Bug"]}, {"num": 20305, "title": "Wrong overload selected on function when passed a callback annotated with a type with multiple optional properties", "labels": ["Bug"]}, {"num": 37664, "title": "Wrong return type inference in a generic function using Promise.all ", "labels": ["Needs More Info"]}, {"num": 40854, "title": "Wrong TSX ternary markup block formatting on save", "labels": ["Bug", "Domain: Formatter"]}, {"num": 33443, "title": "Wrong type inference on a mutated array", "labels": ["Design Limitation"]}, {"num": 25516, "title": "Wrong type inferred by returning a tuple", "labels": ["In Discussion", "Suggestion"]}, {"num": 33899, "title": "Wrong type on extend parent class object field", "labels": ["Design Limitation"]}, {"num": 31630, "title": "Wrong typescript intelisense suggestions", "labels": ["Bug"]}, {"num": 33898, "title": "Wrong typing for document.open", "labels": ["Bug", "Domain: lib.d.ts"]}, {"num": 31752, "title": "You actually can get Infinity type if you're clever and other fun floating point oddities", "labels": ["Discussion"]}, {"num": 24804, "title": "Your thoughts on deno?", "labels": ["Discussion"]}, {"num": 41255, "title": "\u201cConvert to async function\u201d breaks function logic", "labels": []}, {"num": 34933, "title": "\u201cType instantiation is excessively deep and possibly infinite\u201d but only in a large codebase", "labels": ["Bug", "Domain: Big Unions", "Rescheduled"]}], "pulls": [{"num": 40368, "title": " A simple try for HKT", "labels": ["Experiment", "For Backlog Bug"]}, {"num": 28023, "title": " Improve error message when comparing non-comparable types", "labels": ["For Backlog Bug"]}, {"num": 39390, "title": "#24210: Updated handling of undefined values in Enum types", "labels": ["For Backlog Bug"]}, {"num": 40068, "title": "(WiP) Working .cjs, .mjs interop for tsc, tsserver", "labels": ["For Uncommitted Bug"]}, {"num": 39669, "title": "--noImplicitOverride", "labels": ["For Uncommitted Bug"]}, {"num": 40682, "title": "[Do Not Merge] Port tracing code to TS 3.8 for targeted investigation", "labels": ["For Uncommitted Bug"]}, {"num": 41110, "title": "[Experiment] Enum annotation sugar", "labels": ["Experiment", "For Uncommitted Bug"]}, {"num": 35561, "title": "[WIP] Migrate _everything_ to modules", "labels": ["Author: Team"]}, {"num": 41004, "title": "[WIP] Persistent resolutions", "labels": ["Author: Team", "For Uncommitted Bug"]}, {"num": 39698, "title": "[WIP] Update parser and diagnostics for numbers starting with zero", "labels": ["For Backlog Bug"]}, {"num": 37615, "title": "Add 'T | PromiseLike<T>' inference from awaited types", "labels": ["Author: Team", "For Milestone Bug"]}, {"num": 39898, "title": "Add an action to update baselines/fix lints", "labels": ["For Milestone Bug"]}, {"num": 33767, "title": "Add an overload to Object.freeze that preserves literal types", "labels": ["Author: Team", "For Backlog Bug"]}, {"num": 27932, "title": "Add assignability rules for when the target is a conditional type", "labels": ["Author: Team", "Experiment"]}, {"num": 33237, "title": "Add Dependent-Type-Like Functions [Experiment]", "labels": ["Experiment"]}, {"num": 41013, "title": "Add flag to change 'catch' variable default to 'unknown'", "labels": ["Experiment", "For Uncommitted Bug"]}, {"num": 37903, "title": "Add index signature for anonymous object literal type", "labels": ["For Uncommitted Bug"]}, {"num": 40466, "title": "Add inference for 'Promise' based on call to 'resolve'", "labels": ["Author: Team", "Experiment", "For Uncommitted Bug"]}, {"num": 39664, "title": "Add Intl.locale types", "labels": ["For Uncommitted Bug"]}, {"num": 40697, "title": "Add item method", "labels": ["For Milestone Bug"]}, {"num": 40825, "title": "Add IteratorVoidReturnResult for optional 'value' when done", "labels": ["Author: Team", "Experiment", "For Milestone Bug"]}, {"num": 30639, "title": "Add missing relationship allowing a type to be assignable to a conditional when assignable to both branches", "labels": ["Author: Team", "For Milestone Bug"]}, {"num": 29353, "title": "Add module: hybrid", "labels": ["Author: Team", "Experiment"]}, {"num": 40628, "title": "Add Remove type annotation or convert to jsdoc refactor ", "labels": ["For Uncommitted Bug"]}, {"num": 36844, "title": "Add separate PrivateIdentifier and SourceFile constructors", "labels": ["For Uncommitted Bug"]}, {"num": 33863, "title": "Add shim for ES Promise", "labels": ["Author: Team", "For Milestone Bug"]}, {"num": 37797, "title": "Add static index signature", "labels": ["For Backlog Bug"]}, {"num": 36392, "title": "Add support for abstract constructor types", "labels": ["Author: Team", "Experiment", "For Backlog Bug"]}, {"num": 40241, "title": "Add support for Encapsulate return value", "labels": ["For Uncommitted Bug"]}, {"num": 40091, "title": "Add support for enum completions", "labels": ["For Uncommitted Bug"]}, {"num": 36789, "title": "Add support for Inverse Offset and Range types", "labels": ["Author: Team"]}, {"num": 37973, "title": "Add support for Partial Application", "labels": ["lib update"]}, {"num": 40171, "title": "Add support for pedantic property access", "labels": ["For Uncommitted Bug"]}, {"num": 40148, "title": "Add support for pedanticBooleanCoercions", "labels": ["For Backlog Bug"]}, {"num": 38305, "title": "Add support for Pipeline Operator", "labels": ["Experiment"]}, {"num": 40998, "title": "Add support of spread enum member", "labels": ["Experiment", "For Uncommitted Bug"]}, {"num": 41239, "title": "Add target: ES2021 ", "labels": ["For Milestone Bug"]}, {"num": 34941, "title": "Add union of replacer function and string ", "labels": ["For Backlog Bug"]}, {"num": 33248, "title": "Add use-before-def error for uninitialized property", "labels": ["Author: Team", "For Milestone Bug"]}, {"num": 39796, "title": "Add variadic tuple overload to Promise.all", "labels": ["Experiment", "For Uncommitted Bug"]}, {"num": 39243, "title": "Add way to exclude files and directories to watch", "labels": ["Author: Team"]}, {"num": 35913, "title": "Added elaborations for parent or child access.", "labels": []}, {"num": 35885, "title": "Added quick-fix to rewrite index access as call to get/set method.", "labels": ["For Backlog Bug"]}, {"num": 37283, "title": "Added runtime TypeError for non-function, non-null __extends", "labels": ["For Backlog Bug"]}, {"num": 40884, "title": "Adding Diagnostic message for missing ']' and ')' in Array literal and conditional statements", "labels": ["For Backlog Bug"]}, {"num": 38410, "title": "Address false positive cases for return value codefix", "labels": ["Author: Team"]}, {"num": 39656, "title": "Adds experimental support for running TS Server in a web worker", "labels": ["Experiment", "For Uncommitted Bug"]}, {"num": 39840, "title": "Add\u00a0support for\u00a0`.cjs` and\u00a0`.mjs` input\u00a0files", "labels": ["Experiment", "For Uncommitted Bug"]}, {"num": 39016, "title": "Adjust TypeFact calculation for intersections to omit negative typeof facts when an equivalent positive fact is present", "labels": ["Author: Team", "For Milestone Bug"]}, {"num": 40985, "title": "Adjust typeof import name lookup to better match type query lookup", "labels": ["Author: Team", "For Milestone Bug"]}, {"num": 26797, "title": "Allow any key type as an index signature parameter type", "labels": ["Author: Team", "Experiment"]}, {"num": 39014, "title": "Allow arrow function parameter parsing to bail out during speculation", "labels": ["Author: Team", "For Milestone Bug"]}, {"num": 35874, "title": "Allow arrow functions without blocks inside to fold be outlined.", "labels": []}, {"num": 31023, "title": "Allow identical type parameter lists to merge in union signatures", "labels": ["Author: Team", "For Milestone Bug"]}, {"num": 31633, "title": "Allow inference to explore multiple instances of the same symbol", "labels": ["Author: Team", "For Milestone Bug"]}, {"num": 36723, "title": "Allow specifying TReturn and TNext for AsyncIterableIterator and AsyncIterable", "labels": ["For Milestone Bug"]}, {"num": 29374, "title": "Allowed non-this, non-super code before super call in derived classes with property initializers", "labels": ["For Backlog Bug"]}, {"num": 39029, "title": "any * any -> number | bigint", "labels": ["Experiment"]}, {"num": 41169, "title": "Be more specific when normalizing intersections containing tuples as tuple elements", "labels": ["Author: Team", "For Backlog Bug"]}, {"num": 40232, "title": "Better best effort type alias preservation", "labels": ["Author: Team", "Breaking Change", "For Milestone Bug"]}, {"num": 33645, "title": "Better typings for Array.concat(), etc.", "labels": ["For Backlog Bug"]}, {"num": 33707, "title": "Better typings for Promise, like #31117", "labels": ["For Backlog Bug"]}, {"num": 33055, "title": "Better typings for Promise.all(), like #31117", "labels": ["For Backlog Bug"]}, {"num": 33074, "title": "Better typings for Promise.resolve(), like #31117", "labels": ["For Backlog Bug"]}, {"num": 33103, "title": "Better typings for Promise.then(), like #31117", "labels": ["For Backlog Bug"]}, {"num": 38995, "title": "BigInt constructor should not accept any type", "labels": ["For Backlog Bug"]}, {"num": 40877, "title": "BigInt type constructor should not accept any type", "labels": ["Experiment", "For Backlog Bug", "lib update"]}, {"num": 37910, "title": "Cache complex union and intersection relations", "labels": ["For Uncommitted Bug"]}, {"num": 34518, "title": "Cache global tagged template objects", "labels": ["For Backlog Bug"]}, {"num": 35494, "title": "capture thisArg of optionalChaining in parens", "labels": ["For Milestone Bug"]}, {"num": 33497, "title": "Change default for TNext in Iterator/AsyncIterator", "labels": ["Author: Team", "For Backlog Bug"]}, {"num": 41022, "title": "Check for 'void' before indexing into a type.", "labels": ["For Milestone Bug"]}, {"num": 40906, "title": "chore: add dateStyle to DateTimeFormatOptions", "labels": ["For Backlog Bug", "lib update"]}, {"num": 33363, "title": "Class emit: cached repeat prototype sets in a variable", "labels": ["For Backlog Bug"]}, {"num": 35061, "title": "Combine `concat` into a single method signature", "labels": ["Experiment"]}, {"num": 39832, "title": "Convert destruction", "labels": ["For Uncommitted Bug"]}, {"num": 33337, "title": "Corrected ES5 for-in destructuring binding emit", "labels": ["For Backlog Bug"]}, {"num": 35284, "title": "Defer generic awaited type", "labels": ["For Backlog Bug"]}, {"num": 33570, "title": "Delete the {} and unconstrained type parameter assignability rule", "labels": ["Author: Team", "Breaking Change", "For Milestone Bug"]}, {"num": 40607, "title": "Deprecated as warning", "labels": ["For Uncommitted Bug"]}, {"num": 30796, "title": "Distinguish missing and undefined object properties.", "labels": ["Experiment"]}, {"num": 31277, "title": "Do not measure variance for a conditional type extendsType", "labels": ["For Milestone Bug"]}, {"num": 36673, "title": "Do not parse template arguments in JavaScript files.", "labels": ["Breaking Change", "For Backlog Bug"]}, {"num": 40297, "title": "Don't crash when renaming a JS property declared via module.exports", "labels": ["Author: Team", "For Uncommitted Bug"]}, {"num": 40311, "title": "Don't widen inferred return types when a contextual signature is available", "labels": ["Breaking Change", "For Backlog Bug", "For Milestone Bug"]}, {"num": 37964, "title": "Dont look for properties of Object and Function type when looking to resolve named import from module with `export=`", "labels": ["Author: Team", "For Milestone Bug"]}, {"num": 31345, "title": "During inference break down unions on the target side before unions on the source side", "labels": ["Author: Team", "For Backlog Bug"]}, {"num": 38878, "title": "Emit AND instead of ternary for optional chains in expression statements", "labels": ["For Backlog Bug"]}, {"num": 33673, "title": "Emit comments and newlines only once even with initializers added by the transformer", "labels": ["For Backlog Bug"]}, {"num": 40288, "title": "Emit error when trying to iterate a value with union type with non-iterable constituent when --downlevelIterator", "labels": ["For Backlog Bug"]}, {"num": 39362, "title": "Enable \"useDefineForClassFields\" in tsc --init", "labels": ["For Uncommitted Bug"]}, {"num": 40544, "title": "Enforce that compiler option names match the value set by the commandline parser", "labels": ["Author: Team", "For Uncommitted Bug"]}, {"num": 39217, "title": "Erase type parameters to a type which behaves as never in a union and unknown in an intersection or any otherwise", "labels": ["Author: Team", "For Milestone Bug"]}, {"num": 41115, "title": "Error if assignment after block", "labels": ["For Backlog Bug"]}, {"num": 39175, "title": "Error on forget to use await on Promise in if condition", "labels": ["For Uncommitted Bug"]}, {"num": 37065, "title": "Error on immediate casts of literals to incompatible literal types", "labels": ["Experiment"]}, {"num": 28749, "title": "Exact types - [WIP]", "labels": ["Experiment"]}, {"num": 30476, "title": "Expand isEmptyIntersectionType to check for objects with mutually exclusive property types", "labels": []}, {"num": 40200, "title": "Experiment: Implement Bind Operator", "labels": ["Experiment", "For Uncommitted Bug"]}, {"num": 33876, "title": "expose getOptionalType and getNonOptionalType", "labels": ["For Uncommitted Bug"]}, {"num": 24738, "title": "Expunge the concept of well-known symbols from the checker", "labels": ["Author: Team", "Experiment"]}, {"num": 37980, "title": "Feat#Provide a quickfix for non-exported types", "labels": ["For Uncommitted Bug"]}, {"num": 41215, "title": "feat(26217): Add missing member fix should work for missing function", "labels": ["For Backlog Bug"]}, {"num": 41052, "title": "feat(40750): Refactoring to add inferred return type annotation to a function", "labels": ["For Uncommitted Bug"]}, {"num": 41226, "title": "feat(eslint): upgrade typescript-eslint/eslint", "labels": ["For Uncommitted Bug"]}, {"num": 35608, "title": "feat(lib/es2015): Add\u00a0typed\u00a0overloads to\u00a0`Reflect`", "labels": ["For Uncommitted Bug"]}, {"num": 37376, "title": "feat: add util {is,create,update}ImportCall", "labels": ["For Uncommitted Bug"]}, {"num": 30813, "title": "feat: Implement the\u00a0`implicitUnknown` complier\u00a0flag", "labels": ["Experiment"]}, {"num": 38610, "title": "Fix #38608", "labels": ["For Uncommitted Bug"]}, {"num": 39746, "title": "Fix 21732: \"in\" operator could widden type", "labels": ["For Backlog Bug"]}, {"num": 39716, "title": "fix 38503.", "labels": ["For Milestone Bug"]}, {"num": 39808, "title": "Fix 39749: specialize jsx error for missing properties.", "labels": ["For Milestone Bug"]}, {"num": 39699, "title": "Fix 4628: add compiler option for non-check static member in inheritance", "labels": ["For Backlog Bug"]}, {"num": 28708, "title": "Fix block-scoped capturing by class elements inside iteration statements", "labels": ["For Backlog Bug"]}, {"num": 31455, "title": "Fix conditional type type parameter leak", "labels": ["Author: Team", "For Milestone Bug"]}, {"num": 41094, "title": "Fix destructuring evaluation order for initializers", "labels": ["Author: Team", "For Milestone Bug"]}, {"num": 37297, "title": "Fix handling of string enums on LHS of `+=`", "labels": ["Author: Team", "For Milestone Bug"]}, {"num": 37962, "title": "Fix instantiated check for imports", "labels": ["Author: Team", "For Milestone Bug"]}, {"num": 41222, "title": "Fix missing file name of extended source file in synchronizeProjectList when it is missing on disk", "labels": ["Author: Team", "For Milestone Bug"]}, {"num": 40379, "title": "Fix missing func modifier", "labels": ["For Backlog Bug"]}, {"num": 38088, "title": "Fix missing narrow with assignment", "labels": ["For Backlog Bug"]}, {"num": 40909, "title": "Fix object.assign first param constraint", "labels": ["Author: Team", "For Milestone Bug"]}, {"num": 36131, "title": "Fix parsing nested parameter types of `@callback` JSDoc tag", "labels": ["For Backlog Bug"]}, {"num": 35877, "title": "fix receiver on calls of imported and exported functions", "labels": ["For Milestone Bug"]}, {"num": 31029, "title": "Fix relations for instantiations of same generic signature", "labels": ["For Milestone Bug"]}, {"num": 38574, "title": "Fix return type for JSON.stringify()", "labels": ["For Backlog Bug", "lib update"]}, {"num": 41128, "title": "Fix show deprecated suggestion for alias", "labels": ["For Milestone Bug"]}, {"num": 40536, "title": "Fix top level logical assignment leak", "labels": ["For Backlog Bug", "For Milestone Bug"]}, {"num": 38518, "title": "Fix top-level await parsing (#38483)", "labels": ["For Milestone Bug"]}, {"num": 41014, "title": "Fix transformation of nested return statements in \"convert to async function\" quick fix", "labels": ["For Backlog Bug"]}, {"num": 41307, "title": "Fix typos in comments", "labels": ["For Uncommitted Bug"]}, {"num": 41273, "title": "fix(12365): Add formatter option \"insertSpaceAfterTypeAnnotation\"", "labels": ["For Uncommitted Bug"]}, {"num": 37887, "title": "fix(35779): Comments at the end of an array, when the last item ends with a comma, are not compiled", "labels": ["For Backlog Bug"]}, {"num": 38726, "title": "fix(37578): Deprecate variable name AllowQualifedNameInPlaceOfIdentifier", "labels": ["For Uncommitted Bug"]}, {"num": 38135, "title": "fix(37791): Using object destructuring with ECMAScript's private field as computed property name leads to runtime error", "labels": ["For Milestone Bug"]}, {"num": 41127, "title": "fix(38283): Incorrect parse on static property followed by method", "labels": ["For Milestone Bug"]}, {"num": 41156, "title": "fix(39022): If exported variable is renamed, tsc will generate code with a syntax error", "labels": ["For Milestone Bug"]}, {"num": 40154, "title": "fix(39858): \"Convert to async function\" refactor generates invalid code with imported functions", "labels": ["For Backlog Bug"]}, {"num": 40050, "title": "fix(40042): Convert to async function with decorator", "labels": ["For Backlog Bug"]}, {"num": 40374, "title": "fix(40218): Adds codefix to remove an unused declaration but keep the body", "labels": ["For Backlog Bug"]}, {"num": 40265, "title": "fix(40257): Remove type parameters quick fix forgets the trailing > ", "labels": ["For Milestone Bug"]}, {"num": 40476, "title": "fix(40469): \"Convert to named function\" refactoring is not suggested for non-arrow function expressions", "labels": ["For Backlog Bug"]}, {"num": 40653, "title": "fix(40610): \"Convert to template string\" result unnecessarily complicated if one part was already a template string", "labels": ["For Uncommitted Bug"]}, {"num": 40699, "title": "fix(40632): Don't emit abstract members", "labels": ["For Milestone Bug"]}, {"num": 40942, "title": "fix(40671): Enable \"Convert to template string\" on expressions that don't start with a string", "labels": ["For Milestone Bug"]}, {"num": 40912, "title": "fix(40901): Variable arguments generated from JS although not applicable", "labels": ["For Backlog Bug"]}, {"num": 41103, "title": "fix(41027): recursive private static gets missed in --noUnusedLocals", "labels": ["For Backlog Bug"]}, {"num": 41089, "title": "fix(41078): Convert to ES6 Class Refactoring removes methods named with quoted properties", "labels": ["For Backlog Bug"]}, {"num": 41275, "title": "fix(41227): Cryptic error message when assigning to a key also present on the construtor, but forggetting to declare it in the calss body", "labels": ["For Backlog Bug"]}, {"num": 41269, "title": "fix(41268): Replace leading tabs in diagnostic code with spaces", "labels": ["For Uncommitted Bug"]}, {"num": 41310, "title": "fix(41295): Passing deprecated function as callback does not give deprecation suggestion", "labels": ["For Uncommitted Bug"]}, {"num": 35594, "title": "fix(lib/es2015): Fix\u00a0definition of\u00a0`ProxyHandler`", "labels": ["For Backlog Bug"]}, {"num": 39662, "title": "fix: add es2016.intl.d.ts", "labels": ["For Uncommitted Bug", "lib update"]}, {"num": 33544, "title": "fix: add this type for Reflect.defineProperty", "labels": ["For Backlog Bug"]}, {"num": 39661, "title": "fix: fix RelativeTimeFormat type definition", "labels": ["For Backlog Bug"]}, {"num": 38421, "title": "fix: string.replace `any[]` => `(string | number)[]`", "labels": ["For Uncommitted Bug"]}, {"num": 40973, "title": "Fixes #35735: Avoids listing missing properties for types with only call/construct signatures", "labels": ["For Backlog Bug"]}, {"num": 41294, "title": "fixes microsoft/TypeScript#41286", "labels": ["For Milestone Bug"]}, {"num": 35863, "title": "Fixes non-null assertion applied to type narrowed to never not issuing an error.", "labels": ["For Backlog Bug"]}, {"num": 41044, "title": "Forbid property renaming in destructuring binding in function types", "labels": ["Breaking Change", "For Backlog Bug"]}, {"num": 33139, "title": "Higher order this parameter inference, like #31116", "labels": ["For Backlog Bug"]}, {"num": 39764, "title": "Hoist import declarations when transforming to commonjs/amd/umd module", "labels": ["For Backlog Bug"]}, {"num": 39224, "title": "Implement await.ops", "labels": ["For Uncommitted Bug"]}, {"num": 26349, "title": "Implement partial type argument inference using the _ sigil", "labels": ["Experiment"]}, {"num": 40698, "title": "Import assertion", "labels": ["For Milestone Bug"]}, {"num": 31424, "title": "Improve identifier check", "labels": []}, {"num": 39336, "title": "Improve inference for Promise.all of 'never[]'", "labels": ["Author: Team"]}, {"num": 33441, "title": "Improve non-ambient class and function merge error", "labels": ["For Backlog Bug"]}, {"num": 37902, "title": "Infer extracted local variable name from property name", "labels": ["For Backlog Bug"]}, {"num": 30979, "title": "Inline type aliases", "labels": []}, {"num": 29468, "title": "Instantiate `this` in non-super property/element access expressions", "labels": ["Author: Team", "For Milestone Bug"]}, {"num": 31384, "title": "Interactive Diagnostics", "labels": []}, {"num": 40011, "title": "Keep track of why files are in the program", "labels": ["Author: Team", "For Uncommitted Bug"]}, {"num": 29818, "title": "Lookup return type of factory function for JSX expression return types", "labels": ["Experiment"]}, {"num": 37881, "title": "Make `Symbol#valueDeclaration` optional in public API", "labels": ["Breaking Change", "For Backlog Bug", "lib update"]}, {"num": 39816, "title": "Make direct assignments to cjs exports considered literal contexts", "labels": ["Author: Team", "Breaking Change", "For Backlog Bug", "For Milestone Bug"]}, {"num": 38153, "title": "Make Iterable Map constructor argument optional", "labels": ["For Backlog Bug"]}, {"num": 41008, "title": "Make map constructor generic", "labels": ["For Uncommitted Bug", "lib update"]}, {"num": 29228, "title": "Mapped symbol", "labels": ["For Backlog Bug"]}, {"num": 40358, "title": "Mark comparisons of union constituents involving markers as being unreliable sources of variance", "labels": ["Author: Team", "For Uncommitted Bug"]}, {"num": 36747, "title": "Merge diagnosticsProducing and nonDiagnosticsProducing checkers into a single checker supporting lazy diagnostics", "labels": ["Author: Team", "For Backlog Bug"]}, {"num": 30520, "title": "Merge overloads that only differ by return type when intersecting", "labels": ["Experiment"]}, {"num": 30161, "title": "narrow by instanceof: infer type parameters from original type", "labels": ["For Backlog Bug"]}, {"num": 41100, "title": "Narrow spreaded object types", "labels": ["For Backlog Bug"]}, {"num": 35206, "title": "Native support for PnP", "labels": ["Experiment", "For Uncommitted Bug", "lib update"]}, {"num": 29317, "title": "Negated types", "labels": ["Author: Team", "Experiment", "typescript@experimental"]}, {"num": 37608, "title": "New definition for omit that should ensure the name Omit is preserved\u2026", "labels": ["Author: Team", "For Milestone Bug"]}, {"num": 41219, "title": "New flag assumeChangesAffectShape for incremental and watch scenario", "labels": ["Author: Team", "For Uncommitted Bug"]}, {"num": 35878, "title": "No error on indirect calls", "labels": ["For Uncommitted Bug"]}, {"num": 33038, "title": "Nominal `unique type` brands", "labels": ["Experiment"]}, {"num": 41291, "title": "noop in setTypeAcquisiton for undefined", "labels": ["For Uncommitted Bug"]}, {"num": 29671, "title": "NOT READY TO MERGE - Use conditional type inference for promise resolution", "labels": ["Experiment"]}, {"num": 33089, "title": "Only apply indexed access write simplifications to types that arise from mutation", "labels": ["For Backlog Bug"]}, {"num": 41199, "title": "Organize imports should not return edits if no work is done", "labels": ["For Milestone Bug"]}, {"num": 40708, "title": "Parse quoted names in qualified names", "labels": ["Author: Team", "For Uncommitted Bug"]}, {"num": 40178, "title": "Pedantic safe any", "labels": ["For Uncommitted Bug"]}, {"num": 34816, "title": "Perform checks on unused definitely-defined promises", "labels": ["Experiment"]}, {"num": 34598, "title": "Perform weak type checks when performing comparisons.", "labels": ["Experiment"]}, {"num": 37509, "title": "POC: allow project references to be resolved relative to outDir", "labels": []}, {"num": 37814, "title": "Preserve source newlines all the things", "labels": []}, {"num": 40637, "title": "Proposal: importModuleSpecifierPreference: project-relative", "labels": ["Author: Team", "For Uncommitted Bug"]}, {"num": 40014, "title": "QuickInfo of element access expression could shows correct type when it is narrowed.", "labels": ["For Backlog Bug"]}, {"num": 37702, "title": "Re-order reduce overloads", "labels": ["For Backlog Bug"]}, {"num": 39188, "title": "Reduce rest parameter if not referenced", "labels": ["For Uncommitted Bug"]}, {"num": 39577, "title": "Reintroduce definitelyAssignableRelation and use with conditional types", "labels": ["For Uncommitted Bug"]}, {"num": 41042, "title": "Remove `undefined` from source type of renaming destructuring assignment with default", "labels": ["For Backlog Bug"]}, {"num": 41030, "title": "Remove errors for invalid escape sequences in tagged template literals", "labels": ["For Backlog Bug"]}, {"num": 40278, "title": "Remove incorrect assert that triggers crash on completions of globalThis", "labels": ["Author: Team", "For Uncommitted Bug"]}, {"num": 37815, "title": "Remove redundant intersections from unions", "labels": ["Experiment", "For Uncommitted Bug"]}, {"num": 36408, "title": "Remove usage of non-standardised `Reflect.decorate`.", "labels": ["For Backlog Bug"]}, {"num": 25492, "title": "Remove whitespace", "labels": ["Author: Team", "Experiment"]}, {"num": 41168, "title": "Remove-unused-identifiers codefix skips assigned identifiers", "labels": ["Author: Team", "For Uncommitted Bug"]}, {"num": 41000, "title": "Rename 'compat' to 'deprecatedCompat'.", "labels": ["For Uncommitted Bug"]}, {"num": 41105, "title": "Separate delete-all-imports from other delete-all", "labels": ["Author: Team", "For Uncommitted Bug"]}, {"num": 34868, "title": "Sort emitted declarations of union types.", "labels": ["For Backlog Bug"]}, {"num": 40070, "title": "Specified diagnostic for iterating known array type without --downlevelIteration", "labels": ["For Backlog Bug"]}, {"num": 39060, "title": "Spelling correction fixes should not be case-agnostic for two equally weighed options", "labels": ["For Uncommitted Bug"]}, {"num": 39720, "title": "Split line and node counts by file extension", "labels": ["For Uncommitted Bug"]}, {"num": 39298, "title": "String literal rename support", "labels": ["For Backlog Bug"]}, {"num": 33290, "title": "Structural `tag type` brands", "labels": ["Experiment"]}, {"num": 39784, "title": "Support pulling type information directly from `.wasm` modules", "labels": ["Author: Team", "Breaking Change", "Experiment", "For Uncommitted Bug"]}, {"num": 37424, "title": "Support top level \"for await of\"", "labels": ["For Backlog Bug"]}, {"num": 37421, "title": "Support xml namespace prefix for JSX elements and attributes", "labels": ["For Uncommitted Bug"]}, {"num": 40917, "title": "Textually search for 'return' before exploring the tree for 'return' statements.", "labels": ["For Uncommitted Bug"]}, {"num": 40468, "title": "Throw types", "labels": ["For Uncommitted Bug"]}, {"num": 37497, "title": "Token hints for missing closing braces: classes, enums, jsx, modules, types", "labels": ["For Backlog Bug"]}, {"num": 40823, "title": "Treat void-typed properties as optional", "labels": ["Author: Team", "For Milestone Bug"]}, {"num": 39930, "title": "Triple-slash comments for JSDoc", "labels": ["Author: Team", "Experiment", "For Uncommitted Bug"]}, {"num": 41303, "title": "Try get method type from super class", "labels": ["For Uncommitted Bug"]}, {"num": 35127, "title": "Try some functional refactor of some parser code", "labels": ["Author: Team", "Experiment"]}, {"num": 35741, "title": "Type comparison when conditional type is target", "labels": ["For Milestone Bug"]}, {"num": 38839, "title": "Type guard by deep property", "labels": ["For Backlog Bug"]}, {"num": 39708, "title": "Type reference directive improvements", "labels": ["Author: Team", "For Uncommitted Bug"]}, {"num": 30284, "title": "Uniform Generics for Conditional Type Inference and Type Parameter Narrowing [Experiment]", "labels": ["Experiment"]}, {"num": 40294, "title": "Unify the codepaths for determining if something is generic and showing type help", "labels": ["Author: Team", "For Milestone Bug"]}, {"num": 40888, "title": "Update the Enum Members Error to be like TS2713", "labels": ["For Uncommitted Bug"]}, {"num": 39827, "title": "Updated error message for TS2539", "labels": ["For Uncommitted Bug"]}, {"num": 33791, "title": "Use @definitelytyped/types-registry for ATA", "labels": ["Author: Team", "Experiment"]}, {"num": 39232, "title": "Use a single relation stack for nested dependent variance calculations", "labels": ["Author: Team", "For Milestone Bug"]}, {"num": 22348, "title": "Use lib conditional types for type facts if possible", "labels": ["Experiment"]}, {"num": 41217, "title": "Use stricter types for tracing event arguments", "labels": ["For Uncommitted Bug"]}, {"num": 40949, "title": "Use the faster implmentation of the 2020 syntaxtical classifications", "labels": ["Author: Team", "For Milestone Bug"]}, {"num": 41067, "title": "Use the wildcard type for signature erasure", "labels": ["Author: Team", "For Uncommitted Bug"]}, {"num": 29484, "title": "WIP: Polymorphic \"this\" for static members", "labels": ["Experiment"]}, {"num": 41193, "title": "\ud83e\udd16 Pick PR #41079 (`transformGenerators`: handle `Comm...) into release-4.0", "labels": ["For Uncommitted Bug"]}, {"num": 37605, "title": "\ud83e\udd16 User test baselines have changed for fix36031", "labels": []}, {"num": 41195, "title": "\ud83e\udd16 User test baselines have changed for refs/heads/master", "labels": ["For Uncommitted Bug"]}]}